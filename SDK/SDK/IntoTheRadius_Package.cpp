/**
 * Name: Into_The_Radius_VR
 * Version: 2.4
 */

#include "pch.h"

namespace CG
{
	// --------------------------------------------------
	// # Structs Functions
	// --------------------------------------------------
	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AchievementsManager.UpdateLeaderboardProgress
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ERadiusLeaderboard                                 Leaderboard                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAchievementsManager::UpdateLeaderboardProgress(ERadiusLeaderboard Leaderboard, int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AchievementsManager.UpdateLeaderboardProgress");
		
		UAchievementsManager_UpdateLeaderboardProgress_Params params {};
		params.Leaderboard = Leaderboard;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AchievementsManager.ResetAchievementProgress
	 * 		Flags  -> ()
	 */
	void UAchievementsManager::ResetAchievementProgress()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AchievementsManager.ResetAchievementProgress");
		
		UAchievementsManager_ResetAchievementProgress_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AchievementsManager.ReportAchievement
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ERadiusAchievement                                 Achievement                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAchievementsManager::ReportAchievement(ERadiusAchievement Achievement, int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AchievementsManager.ReportAchievement");
		
		UAchievementsManager_ReportAchievement_Params params {};
		params.Achievement = Achievement;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AchievementsManager.OnItemTaken
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAchievementsManager::OnItemTaken(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AchievementsManager.OnItemTaken");
		
		UAchievementsManager_OnItemTaken_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AchievementsManager.OnItemBoughtEvent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAchievementsManager::OnItemBoughtEvent(class UInventoryItem* InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AchievementsManager.OnItemBoughtEvent");
		
		UAchievementsManager_OnItemBoughtEvent_Params params {};
		params.InventoryItem = InventoryItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AchievementsManager.LogCachedAchievements
	 * 		Flags  -> ()
	 */
	void UAchievementsManager::LogCachedAchievements()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AchievementsManager.LogCachedAchievements");
		
		UAchievementsManager_LogCachedAchievements_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AchievementsManager.Initialize
	 * 		Flags  -> ()
	 */
	void UAchievementsManager::Initialize()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AchievementsManager.Initialize");
		
		UAchievementsManager_Initialize_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AchievementsManager.GetAchievementsManager
	 * 		Flags  -> ()
	 */
	class UAchievementsManager* UAchievementsManager::GetAchievementsManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AchievementsManager.GetAchievementsManager");
		
		UAchievementsManager_GetAchievementsManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AchievementsManager.CompleteAchievement
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ERadiusAchievement                                 Achievement                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAchievementsManager::CompleteAchievement(ERadiusAchievement Achievement)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AchievementsManager.CompleteAchievement");
		
		UAchievementsManager_CompleteAchievement_Params params {};
		params.Achievement = Achievement;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UAchievementsManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UAchievementsManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.AchievementsManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AActorActivationVolume.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AActorActivationVolume::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ActorActivationVolume");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ActorActivationVolumeManager.OnTransitionStart
	 * 		Flags  -> ()
	 */
	void UActorActivationVolumeManager::OnTransitionStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ActorActivationVolumeManager.OnTransitionStart");
		
		UActorActivationVolumeManager_OnTransitionStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ActorActivationVolumeManager.OnLevelPrepare
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UActorActivationVolumeManager::OnLevelPrepare(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ActorActivationVolumeManager.OnLevelPrepare");
		
		UActorActivationVolumeManager_OnLevelPrepare_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UActorActivationVolumeManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UActorActivationVolumeManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ActorActivationVolumeManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ActorVolumeActivationInterface.SetVolumeActivationState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               NewState                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UActorVolumeActivationInterface::SetVolumeActivationState(bool NewState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ActorVolumeActivationInterface.SetVolumeActivationState");
		
		UActorVolumeActivationInterface_SetVolumeActivationState_Params params {};
		params.NewState = NewState;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UActorVolumeActivationInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UActorVolumeActivationInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ActorVolumeActivationInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AIEdPerceptionComp.SetSightHalfAngle
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              HalfAngle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UAIEdPerceptionComp::SetSightHalfAngle(float HalfAngle)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AIEdPerceptionComp.SetSightHalfAngle");
		
		UAIEdPerceptionComp_SetSightHalfAngle_Params params {};
		params.HalfAngle = HalfAngle;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AIEdPerceptionComp.SetSightDistance
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Distance                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UAIEdPerceptionComp::SetSightDistance(float Distance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AIEdPerceptionComp.SetSightDistance");
		
		UAIEdPerceptionComp_SetSightDistance_Params params {};
		params.Distance = Distance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AIEdPerceptionComp.SetHearingDistance
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Distance                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UAIEdPerceptionComp::SetHearingDistance(float Distance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AIEdPerceptionComp.SetHearingDistance");
		
		UAIEdPerceptionComp_SetHearingDistance_Params params {};
		params.Distance = Distance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AIEdPerceptionComp.GetSightHalfAngle
	 * 		Flags  -> ()
	 */
	float UAIEdPerceptionComp::GetSightHalfAngle()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AIEdPerceptionComp.GetSightHalfAngle");
		
		UAIEdPerceptionComp_GetSightHalfAngle_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AIEdPerceptionComp.GetSightDistance
	 * 		Flags  -> ()
	 */
	float UAIEdPerceptionComp::GetSightDistance()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AIEdPerceptionComp.GetSightDistance");
		
		UAIEdPerceptionComp_GetSightDistance_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AIEdPerceptionComp.GetHearingDistance
	 * 		Flags  -> ()
	 */
	float UAIEdPerceptionComp::GetHearingDistance()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AIEdPerceptionComp.GetHearingDistance");
		
		UAIEdPerceptionComp_GetHearingDistance_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UAIEdPerceptionComp.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UAIEdPerceptionComp::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.AIEdPerceptionComp");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.UseStamina
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bUse                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              UseSpeed                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAliveStatsComponent::UseStamina(bool bUse, float UseSpeed)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.UseStamina");
		
		UAliveStatsComponent_UseStamina_Params params {};
		params.bUse = bUse;
		params.UseSpeed = UseSpeed;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.OnTakePointDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      DamagedActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AController*                                 InstigatedBy                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     HitLocation                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         HitComponent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FName                                        BoneName                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     ShotFromDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UDamageType*                                 DamageType                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      DamageCauser                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAliveStatsComponent::OnTakePointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, const class FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.OnTakePointDamage");
		
		UAliveStatsComponent_OnTakePointDamage_Params params {};
		params.DamagedActor = DamagedActor;
		params.Damage = Damage;
		params.InstigatedBy = InstigatedBy;
		params.HitLocation = HitLocation;
		params.HitComponent = HitComponent;
		params.BoneName = BoneName;
		params.ShotFromDirection = ShotFromDirection;
		params.DamageType = DamageType;
		params.DamageCauser = DamageCauser;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.OnTakeAnyDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      DamagedActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UDamageType*                                 DamageType                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AController*                                 InstigatedBy                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      DamageCauser                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAliveStatsComponent::OnTakeAnyDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.OnTakeAnyDamage");
		
		UAliveStatsComponent_OnTakeAnyDamage_Params params {};
		params.DamagedActor = DamagedActor;
		params.Damage = Damage;
		params.DamageType = DamageType;
		params.InstigatedBy = InstigatedBy;
		params.DamageCauser = DamageCauser;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.Kill
	 * 		Flags  -> ()
	 */
	void UAliveStatsComponent::Kill()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.Kill");
		
		UAliveStatsComponent_Kill_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.IsCriticalHit
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     HitComponent                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FName                                        BoneName                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UAliveStatsComponent::IsCriticalHit(class UObject* HitComponent, const class FName& BoneName)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.IsCriticalHit");
		
		UAliveStatsComponent_IsCriticalHit_Params params {};
		params.HitComponent = HitComponent;
		params.BoneName = BoneName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.IsAlive
	 * 		Flags  -> ()
	 */
	bool UAliveStatsComponent::IsAlive()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.IsAlive");
		
		UAliveStatsComponent_IsAlive_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.HealthRegeneration
	 * 		Flags  -> ()
	 */
	void UAliveStatsComponent::HealthRegeneration()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.HealthRegeneration");
		
		UAliveStatsComponent_HealthRegeneration_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.GetHealthPercent
	 * 		Flags  -> ()
	 */
	float UAliveStatsComponent::GetHealthPercent()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.GetHealthPercent");
		
		UAliveStatsComponent_GetHealthPercent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.DisplayStats
	 * 		Flags  -> ()
	 */
	void UAliveStatsComponent::DisplayStats()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.DisplayStats");
		
		UAliveStatsComponent_DisplayStats_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.CustomTick
	 * 		Flags  -> ()
	 */
	void UAliveStatsComponent::CustomTick()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.CustomTick");
		
		UAliveStatsComponent_CustomTick_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.ChangeHealth
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAliveStatsComponent::ChangeHealth(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.ChangeHealth");
		
		UAliveStatsComponent_ChangeHealth_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.CalculateStamina
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bUse                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAliveStatsComponent::CalculateStamina(bool bUse)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.CalculateStamina");
		
		UAliveStatsComponent_CalculateStamina_Params params {};
		params.bUse = bUse;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AliveStatsComponent.ApplyDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      causer                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Weapon                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              InputDamage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UAliveStatsComponent::ApplyDamage(class AActor* causer, class AActor* Weapon, float InputDamage)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AliveStatsComponent.ApplyDamage");
		
		UAliveStatsComponent_ApplyDamage_Params params {};
		params.causer = causer;
		params.Weapon = Weapon;
		params.InputDamage = InputDamage;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UAliveStatsComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UAliveStatsComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.AliveStatsComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.SetupAmmoMeshComponent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                AmmoTag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UStaticMeshComponent*                        AmmoMeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsFired                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAmmoConfig::SetupAmmoMeshComponent(const struct FGameplayTag& AmmoTag, class UStaticMeshComponent* AmmoMeshComponent, bool IsFired)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.SetupAmmoMeshComponent");
		
		UAmmoConfig_SetupAmmoMeshComponent_Params params {};
		params.AmmoTag = AmmoTag;
		params.AmmoMeshComponent = AmmoMeshComponent;
		params.IsFired = IsFired;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.IsTakenOutAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UAmmoConfig::IsTakenOutAmmo(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.IsTakenOutAmmo");
		
		UAmmoConfig_IsTakenOutAmmo_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.IsShrapnelAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                AmmoTag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UAmmoConfig::IsShrapnelAmmo(const struct FGameplayTag& AmmoTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.IsShrapnelAmmo");
		
		UAmmoConfig_IsShrapnelAmmo_Params params {};
		params.AmmoTag = AmmoTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.IsHeldAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UAmmoConfig::IsHeldAmmo(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.IsHeldAmmo");
		
		UAmmoConfig_IsHeldAmmo_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.IsAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UAmmoConfig::IsAmmo(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.IsAmmo");
		
		UAmmoConfig_IsAmmo_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.GetAmmoWholeMesh
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                AmmoType                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UStaticMesh* UAmmoConfig::GetAmmoWholeMesh(const struct FGameplayTag& AmmoType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.GetAmmoWholeMesh");
		
		UAmmoConfig_GetAmmoWholeMesh_Params params {};
		params.AmmoType = AmmoType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.GetAmmoTypeName
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                AmmoType                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FText UAmmoConfig::GetAmmoTypeName(const struct FGameplayTag& AmmoType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.GetAmmoTypeName");
		
		UAmmoConfig_GetAmmoTypeName_Params params {};
		params.AmmoType = AmmoType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.GetAmmoTypeColor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                AmmoType                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FLinearColor UAmmoConfig::GetAmmoTypeColor(const struct FGameplayTag& AmmoType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.GetAmmoTypeColor");
		
		UAmmoConfig_GetAmmoTypeColor_Params params {};
		params.AmmoType = AmmoType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.GetAmmoTagsConfig
	 * 		Flags  -> ()
	 */
	class UAmmoConfig* UAmmoConfig::GetAmmoTagsConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.GetAmmoTagsConfig");
		
		UAmmoConfig_GetAmmoTagsConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AmmoConfig.GetAmmoShellMesh
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                AmmoType                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UStaticMesh* UAmmoConfig::GetAmmoShellMesh(const struct FGameplayTag& AmmoType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AmmoConfig.GetAmmoShellMesh");
		
		UAmmoConfig_GetAmmoShellMesh_Params params {};
		params.AmmoType = AmmoType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UAmmoConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UAmmoConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.AmmoConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnUnstuck
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnUnstuck(const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnUnstuck");
		
		UAnalyticsManager_OnUnstuck_Params params {};
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnTutorialStart
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TutorialId                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            TotalSteps                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnTutorialStart(const struct FGameplayTag& TutorialId, int32_t TotalSteps)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnTutorialStart");
		
		UAnalyticsManager_OnTutorialStart_Params params {};
		params.TutorialId = TutorialId;
		params.TotalSteps = TotalSteps;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnTutorialEnd
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TutorialId                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            TotalSteps                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            CompletedSteps                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnTutorialEnd(const struct FGameplayTag& TutorialId, int32_t TotalSteps, int32_t CompletedSteps)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnTutorialEnd");
		
		UAnalyticsManager_OnTutorialEnd_Params params {};
		params.TutorialId = TutorialId;
		params.TotalSteps = TotalSteps;
		params.CompletedSteps = CompletedSteps;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnTutorialControls
	 * 		Flags  -> ()
	 */
	void UAnalyticsManager::OnTutorialControls()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnTutorialControls");
		
		UAnalyticsManager_OnTutorialControls_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnTransitionStart
	 * 		Flags  -> ()
	 */
	void UAnalyticsManager::OnTransitionStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnTransitionStart");
		
		UAnalyticsManager_OnTransitionStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnTideHappening
	 * 		Flags  -> ()
	 */
	void UAnalyticsManager::OnTideHappening()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnTideHappening");
		
		UAnalyticsManager_OnTideHappening_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnSleep
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Seconds                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               isBlackout                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnSleep(float Seconds, bool isBlackout)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnSleep");
		
		UAnalyticsManager_OnSleep_Params params {};
		params.Seconds = Seconds;
		params.isBlackout = isBlackout;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnSettingsGameplay
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               VirtualStock                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               PlayerHeight                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               NeckHeight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               ArmLength                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               VignetteTurn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               VignetteRun                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               ShowBody                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               SeatedMode                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnSettingsGameplay(bool VirtualStock, bool PlayerHeight, bool NeckHeight, bool ArmLength, bool VignetteTurn, bool VignetteRun, bool ShowBody, bool SeatedMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnSettingsGameplay");
		
		UAnalyticsManager_OnSettingsGameplay_Params params {};
		params.VirtualStock = VirtualStock;
		params.PlayerHeight = PlayerHeight;
		params.NeckHeight = NeckHeight;
		params.ArmLength = ArmLength;
		params.VignetteTurn = VignetteTurn;
		params.VignetteRun = VignetteRun;
		params.ShowBody = ShowBody;
		params.SeatedMode = SeatedMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnSettingsControls
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bTurnType                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bTurnSpeed                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bMovementDirectionType                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bControllerRotation                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bHoldGrip                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bLeftHanded                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bMirrorHolsters                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bTeleportMovement                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnSettingsControls(bool bTurnType, bool bTurnSpeed, bool bMovementDirectionType, bool bControllerRotation, bool bHoldGrip, bool bLeftHanded, bool bMirrorHolsters, bool bTeleportMovement)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnSettingsControls");
		
		UAnalyticsManager_OnSettingsControls_Params params {};
		params.bTurnType = bTurnType;
		params.bTurnSpeed = bTurnSpeed;
		params.bMovementDirectionType = bMovementDirectionType;
		params.bControllerRotation = bControllerRotation;
		params.bHoldGrip = bHoldGrip;
		params.bLeftHanded = bLeftHanded;
		params.bMirrorHolsters = bMirrorHolsters;
		params.bTeleportMovement = bTeleportMovement;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnPlayerLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AverageDelta                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnPlayerLocation(const struct FVector& Location, float AverageDelta)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnPlayerLocation");
		
		UAnalyticsManager_OnPlayerLocation_Params params {};
		params.Location = Location;
		params.AverageDelta = AverageDelta;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnPlayerKill
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      KilledActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                weaponTag                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     DeathLocation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnPlayerKill(class AActor* KilledActor, const struct FGameplayTag& weaponTag, const struct FVector& DeathLocation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnPlayerKill");
		
		UAnalyticsManager_OnPlayerKill_Params params {};
		params.KilledActor = KilledActor;
		params.weaponTag = weaponTag;
		params.DeathLocation = DeathLocation;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnPlayerDeath
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FText                                        DeathCauserName                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     DeathLocation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnPlayerDeath(const class FText& DeathCauserName, const struct FVector& DeathLocation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnPlayerDeath");
		
		UAnalyticsManager_OnPlayerDeath_Params params {};
		params.DeathCauserName = DeathCauserName;
		params.DeathLocation = DeathLocation;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnMoneyChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class FString>                              AnalyticsParams                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnMoneyChanged(int32_t Value, TArray<class FString> AnalyticsParams)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnMoneyChanged");
		
		UAnalyticsManager_OnMoneyChanged_Params params {};
		params.Value = Value;
		params.AnalyticsParams = AnalyticsParams;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnMissionStateChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnMissionStateChanged(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnMissionStateChanged");
		
		UAnalyticsManager_OnMissionStateChanged_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnMissionFinished
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnMissionFinished(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnMissionFinished");
		
		UAnalyticsManager_OnMissionFinished_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnMenuNewGame
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               SkipTutor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Ironman                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FRadiusGameDifficulty                       Difficulty                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnMenuNewGame(bool SkipTutor, bool Ironman, const struct FRadiusGameDifficulty& Difficulty)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnMenuNewGame");
		
		UAnalyticsManager_OnMenuNewGame_Params params {};
		params.SkipTutor = SkipTutor;
		params.Ironman = Ironman;
		params.Difficulty = Difficulty;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnLogHmdDevice
	 * 		Flags  -> ()
	 */
	void UAnalyticsManager::OnLogHmdDevice()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnLogHmdDevice");
		
		UAnalyticsManager_OnLogHmdDevice_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnLogFPS
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Location                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Min                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Max                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Average                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnLogFPS(const class FString& Location, float Min, float Max, float Average)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnLogFPS");
		
		UAnalyticsManager_OnLogFPS_Params params {};
		params.Location = Location;
		params.Min = Min;
		params.Max = Max;
		params.Average = Average;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Value                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnLevelStarted(const struct FGameplayTag& Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnLevelStarted");
		
		UAnalyticsManager_OnLevelStarted_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnKatyasMonologue
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MonologueTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnKatyasMonologue(const struct FGameplayTag& MonologueTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnKatyasMonologue");
		
		UAnalyticsManager_OnKatyasMonologue_Params params {};
		params.MonologueTag = MonologueTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnJournalOpened
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TabTag                                                     (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnJournalOpened(const struct FGameplayTag& TabTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnJournalOpened");
		
		UAnalyticsManager_OnJournalOpened_Params params {};
		params.TabTag = TabTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnGuitarPlayed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            PlayCount                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              PlayTimeSeconds                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnGuitarPlayed(int32_t PlayCount, float PlayTimeSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnGuitarPlayed");
		
		UAnalyticsManager_OnGuitarPlayed_Params params {};
		params.PlayCount = PlayCount;
		params.PlayTimeSeconds = PlayTimeSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnGameStart
	 * 		Flags  -> ()
	 */
	void UAnalyticsManager::OnGameStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnGameStart");
		
		UAnalyticsManager_OnGameStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnFinalChoice
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Choice                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::OnFinalChoice(const class FString& Choice)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnFinalChoice");
		
		UAnalyticsManager_OnFinalChoice_Params params {};
		params.Choice = Choice;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.OnDifficultyChanged
	 * 		Flags  -> ()
	 */
	void UAnalyticsManager::OnDifficultyChanged()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.OnDifficultyChanged");
		
		UAnalyticsManager_OnDifficultyChanged_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.End
	 * 		Flags  -> ()
	 */
	void UAnalyticsManager::End()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.End");
		
		UAnalyticsManager_End_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AnalyticsManager.Begin
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPRGameInstance*                             GameInstance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAnalyticsManager::Begin(class UPRGameInstance* GameInstance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AnalyticsManager.Begin");
		
		UAnalyticsManager_Begin_Params params {};
		params.GameInstance = GameInstance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UAnalyticsManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UAnalyticsManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.AnalyticsManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AttachmentSlotComponent.TryDetachItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Attachment                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAttachmentSlotComponent::TryDetachItem(class AActor* Attachment, bool* bSuccess)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AttachmentSlotComponent.TryDetachItem");
		
		UAttachmentSlotComponent_TryDetachItem_Params params {};
		params.Attachment = Attachment;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AttachmentSlotComponent.TryAttachItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Attachment                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAttachmentSlotComponent::TryAttachItem(class AActor* Attachment, bool* bSuccess)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AttachmentSlotComponent.TryAttachItem");
		
		UAttachmentSlotComponent_TryAttachItem_Params params {};
		params.Attachment = Attachment;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AttachmentSlotComponent.SetSlotEnabled
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bEnable                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAttachmentSlotComponent::SetSlotEnabled(bool bEnable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AttachmentSlotComponent.SetSlotEnabled");
		
		UAttachmentSlotComponent_SetSlotEnabled_Params params {};
		params.bEnable = bEnable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AttachmentSlotComponent.IsSlotEnabled
	 * 		Flags  -> ()
	 */
	bool UAttachmentSlotComponent::IsSlotEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AttachmentSlotComponent.IsSlotEnabled");
		
		UAttachmentSlotComponent_IsSlotEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AttachmentSlotComponent.IsSlotEmpty
	 * 		Flags  -> ()
	 */
	bool UAttachmentSlotComponent::IsSlotEmpty()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AttachmentSlotComponent.IsSlotEmpty");
		
		UAttachmentSlotComponent_IsSlotEmpty_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AttachmentSlotComponent.IsParentHeld
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               IsHeld                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAttachmentSlotComponent::IsParentHeld(bool* IsHeld)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AttachmentSlotComponent.IsParentHeld");
		
		UAttachmentSlotComponent_IsParentHeld_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (IsHeld != nullptr)
			*IsHeld = params.IsHeld;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AttachmentSlotComponent.IsAccepts
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Type                                                       (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bCanAttach                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UAttachmentSlotComponent::IsAccepts(const struct FGameplayTag& Type, bool* bCanAttach)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AttachmentSlotComponent.IsAccepts");
		
		UAttachmentSlotComponent_IsAccepts_Params params {};
		params.Type = Type;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bCanAttach != nullptr)
			*bCanAttach = params.bCanAttach;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.AttachmentSlotComponent.GetParentItem
	 * 		Flags  -> ()
	 */
	class UInventoryItem* UAttachmentSlotComponent::GetParentItem()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.AttachmentSlotComponent.GetParentItem");
		
		UAttachmentSlotComponent_GetParentItem_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UAttachmentSlotComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UAttachmentSlotComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.AttachmentSlotComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.RefreshState
	 * 		Flags  -> ()
	 */
	void ABackpackSimple::RefreshState()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.RefreshState");
		
		ABackpackSimple_RefreshState_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.OnUnequipped
	 * 		Flags  -> ()
	 */
	void ABackpackSimple::OnUnequipped()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.OnUnequipped");
		
		ABackpackSimple_OnUnequipped_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.OnReturned
	 * 		Flags  -> ()
	 */
	void ABackpackSimple::OnReturned()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.OnReturned");
		
		ABackpackSimple_OnReturned_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.LerpToHolster
	 * 		Flags  -> ()
	 */
	void ABackpackSimple::LerpToHolster()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.LerpToHolster");
		
		ABackpackSimple_LerpToHolster_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.GetPivotGripPoint
	 * 		Flags  -> ()
	 */
	class USceneComponent* ABackpackSimple::GetPivotGripPoint()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.GetPivotGripPoint");
		
		ABackpackSimple_GetPivotGripPoint_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.GetHolderSleepingBag
	 * 		Flags  -> ()
	 */
	class APRHolder* ABackpackSimple::GetHolderSleepingBag()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.GetHolderSleepingBag");
		
		ABackpackSimple_GetHolderSleepingBag_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.GetHolders
	 * 		Flags  -> ()
	 */
	TArray<class APRHolder*> ABackpackSimple::GetHolders()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.GetHolders");
		
		ABackpackSimple_GetHolders_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.GetHolderPrimaryWeapon
	 * 		Flags  -> ()
	 */
	class APRHolder* ABackpackSimple::GetHolderPrimaryWeapon()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.GetHolderPrimaryWeapon");
		
		ABackpackSimple_GetHolderPrimaryWeapon_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.GetHolderBackpack
	 * 		Flags  -> ()
	 */
	class APRHolder* ABackpackSimple::GetHolderBackpack()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.GetHolderBackpack");
		
		ABackpackSimple_GetHolderBackpack_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BackpackSimple.CheckEquipped
	 * 		Flags  -> ()
	 */
	bool ABackpackSimple::CheckEquipped()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BackpackSimple.CheckEquipped");
		
		ABackpackSimple_CheckEquipped_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ABackpackSimple.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ABackpackSimple::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.BackpackSimple");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UBTD_BlackboardBool.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UBTD_BlackboardBool::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.BTD_BlackboardBool");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UBTD_DistanceToCpp.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UBTD_DistanceToCpp::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.BTD_DistanceToCpp");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.BTD_IsActiveCpp.OnNPCDied
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      DeadNPC                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UBTD_IsActiveCpp::OnNPCDied(class AActor* DeadNPC)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.BTD_IsActiveCpp.OnNPCDied");
		
		UBTD_IsActiveCpp_OnNPCDied_Params params {};
		params.DeadNPC = DeadNPC;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UBTD_IsActiveCpp.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UBTD_IsActiveCpp::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.BTD_IsActiveCpp");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UBTS_CheckLOS_Cpp.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UBTS_CheckLOS_Cpp::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.BTS_CheckLOS_Cpp");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UBTS_UpdateTargetLocation.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UBTS_UpdateTargetLocation::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.BTS_UpdateTargetLocation");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UBTT_Bot_StartAttackCpp.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UBTT_Bot_StartAttackCpp::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.BTT_Bot_StartAttackCpp");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UBTT_Bot_StopAttackCpp.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UBTT_Bot_StopAttackCpp::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.BTT_Bot_StopAttackCpp");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActor.OnTransitionStart
	 * 		Flags  -> ()
	 */
	void APRBasicActor::OnTransitionStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActor.OnTransitionStart");
		
		APRBasicActor_OnTransitionStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActor.OnTransitionEnd
	 * 		Flags  -> ()
	 */
	void APRBasicActor::OnTransitionEnd()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActor.OnTransitionEnd");
		
		APRBasicActor_OnTransitionEnd_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActor.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRBasicActor::OnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActor.OnLevelStarted");
		
		APRBasicActor_OnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActor.OnLevelPrepare
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRBasicActor::OnLevelPrepare(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActor.OnLevelPrepare");
		
		APRBasicActor_OnLevelPrepare_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActor.OnGameStartedPrivate
	 * 		Flags  -> ()
	 */
	void APRBasicActor::OnGameStartedPrivate()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActor.OnGameStartedPrivate");
		
		APRBasicActor_OnGameStartedPrivate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActor.OnGameStarted
	 * 		Flags  -> ()
	 */
	void APRBasicActor::OnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActor.OnGameStarted");
		
		APRBasicActor_OnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActor.OnGamePaused
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bPaused                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRBasicActor::OnGamePaused(bool bPaused)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActor.OnGamePaused");
		
		APRBasicActor_OnGamePaused_Params params {};
		params.bPaused = bPaused;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActor.DisableRelevanceManagement
	 * 		Flags  -> ()
	 */
	void APRBasicActor::DisableRelevanceManagement()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActor.DisableRelevanceManagement");
		
		APRBasicActor_DisableRelevanceManagement_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRBasicActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRBasicActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRBasicActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CharBroadcast.SpawnBroadcast
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContext                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  SpawnTransform                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                MissionKillPointTag                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              LifeSpan                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              SphereRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class ACharBroadcast* ACharBroadcast::SpawnBroadcast(class UObject* WorldContext, const struct FTransform& SpawnTransform, const struct FGameplayTag& MissionKillPointTag, float LifeSpan, float SphereRadius)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CharBroadcast.SpawnBroadcast");
		
		ACharBroadcast_SpawnBroadcast_Params params {};
		params.WorldContext = WorldContext;
		params.SpawnTransform = SpawnTransform;
		params.MissionKillPointTag = MissionKillPointTag;
		params.LifeSpan = LifeSpan;
		params.SphereRadius = SphereRadius;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CharBroadcast.AlertOthers
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Caller                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Target                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Location                                                   (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void ACharBroadcast::AlertOthers(class AActor* Caller, class AActor** Target, const struct FTransform& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CharBroadcast.AlertOthers");
		
		ACharBroadcast_AlertOthers_Params params {};
		params.Caller = Caller;
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Target != nullptr)
			*Target = params.Target;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ACharBroadcast.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ACharBroadcast::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.CharBroadcast");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ACheatsController.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ACheatsController::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.CheatsController");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.SwitchPlayerCollisions
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::SwitchPlayerCollisions()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.SwitchPlayerCollisions");
		
		UCheatsControllerInterface_SwitchPlayerCollisions_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.SwitchCheatShowStashes
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::SwitchCheatShowStashes()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.SwitchCheatShowStashes");
		
		UCheatsControllerInterface_SwitchCheatShowStashes_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.SwitchCheatShowCorpses
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::SwitchCheatShowCorpses()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.SwitchCheatShowCorpses");
		
		UCheatsControllerInterface_SwitchCheatShowCorpses_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.SwitchCheatShowArtifacts
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::SwitchCheatShowArtifacts()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.SwitchCheatShowArtifacts");
		
		UCheatsControllerInterface_SwitchCheatShowArtifacts_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.SwitchCheatNoClip
	 * 		Flags  -> ()
	 */
	void UCheatsControllerInterface::SwitchCheatNoClip()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.SwitchCheatNoClip");
		
		UCheatsControllerInterface_SwitchCheatNoClip_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.SetCheatScreenshot
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UCheatsControllerInterface::SetCheatScreenshot(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.SetCheatScreenshot");
		
		UCheatsControllerInterface_SetCheatScreenshot_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.SetCheatReload
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UCheatsControllerInterface::SetCheatReload(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.SetCheatReload");
		
		UCheatsControllerInterface_SetCheatReload_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.SetCheatPause
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UCheatsControllerInterface::SetCheatPause(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.SetCheatPause");
		
		UCheatsControllerInterface_SetCheatPause_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.SetCheatNoRandom
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UCheatsControllerInterface::SetCheatNoRandom(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.SetCheatNoRandom");
		
		UCheatsControllerInterface_SetCheatNoRandom_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.GetCheatShowStashes
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::GetCheatShowStashes()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.GetCheatShowStashes");
		
		UCheatsControllerInterface_GetCheatShowStashes_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.GetCheatShowCorpses
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::GetCheatShowCorpses()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.GetCheatShowCorpses");
		
		UCheatsControllerInterface_GetCheatShowCorpses_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.GetCheatShowArtifacts
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::GetCheatShowArtifacts()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.GetCheatShowArtifacts");
		
		UCheatsControllerInterface_GetCheatShowArtifacts_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.GetCheatScreenshot
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::GetCheatScreenshot()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.GetCheatScreenshot");
		
		UCheatsControllerInterface_GetCheatScreenshot_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.GetCheatReload
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::GetCheatReload()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.GetCheatReload");
		
		UCheatsControllerInterface_GetCheatReload_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.GetCheatPause
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::GetCheatPause()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.GetCheatPause");
		
		UCheatsControllerInterface_GetCheatPause_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.GetCheatNoRandom
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::GetCheatNoRandom()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.GetCheatNoRandom");
		
		UCheatsControllerInterface_GetCheatNoRandom_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CheatsControllerInterface.GetCheatNoClip
	 * 		Flags  -> ()
	 */
	bool UCheatsControllerInterface::GetCheatNoClip()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CheatsControllerInterface.GetCheatNoClip");
		
		UCheatsControllerInterface_GetCheatNoClip_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UCheatsControllerInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UCheatsControllerInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.CheatsControllerInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.UnregisterNpc
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class ACharacter*                                  NpcToUnregister                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UCloseCombatManager::UnregisterNpc(class ACharacter* NpcToUnregister)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.UnregisterNpc");
		
		UCloseCombatManager_UnregisterNpc_Params params {};
		params.NpcToUnregister = NpcToUnregister;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.ToggleDebug
	 * 		Flags  -> ()
	 */
	void UCloseCombatManager::ToggleDebug()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.ToggleDebug");
		
		UCloseCombatManager_ToggleDebug_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.RegisterNpc
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class ACharacter*                                  NpcToRegister                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UCloseCombatManager::RegisterNpc(class ACharacter* NpcToRegister)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.RegisterNpc");
		
		UCloseCombatManager_RegisterNpc_Params params {};
		params.NpcToRegister = NpcToRegister;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.InitData
	 * 		Flags  -> ()
	 */
	void UCloseCombatManager::InitData()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.InitData");
		
		UCloseCombatManager_InitData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.GetTeleportSearchRadius
	 * 		Flags  -> ()
	 */
	float UCloseCombatManager::GetTeleportSearchRadius()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.GetTeleportSearchRadius");
		
		UCloseCombatManager_GetTeleportSearchRadius_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.GetMinDistanceFromPlayerToReappear
	 * 		Flags  -> ()
	 */
	float UCloseCombatManager::GetMinDistanceFromPlayerToReappear()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.GetMinDistanceFromPlayerToReappear");
		
		UCloseCombatManager_GetMinDistanceFromPlayerToReappear_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.GetDebugEnabled
	 * 		Flags  -> ()
	 */
	bool UCloseCombatManager::GetDebugEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.GetDebugEnabled");
		
		UCloseCombatManager_GetDebugEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.GetCloseCombatState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class ACharacter*                                  NPC                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	ENpcCombatState UCloseCombatManager::GetCloseCombatState(class ACharacter* NPC)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.GetCloseCombatState");
		
		UCloseCombatManager_GetCloseCombatState_Params params {};
		params.NPC = NPC;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.GetCloseCombatManager
	 * 		Flags  -> ()
	 */
	class UCloseCombatManager* UCloseCombatManager::GetCloseCombatManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.GetCloseCombatManager");
		
		UCloseCombatManager_GetCloseCombatManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CloseCombatManager.CleanData
	 * 		Flags  -> ()
	 */
	void UCloseCombatManager::CleanData()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CloseCombatManager.CleanData");
		
		UCloseCombatManager_CleanData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UCloseCombatManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UCloseCombatManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.CloseCombatManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CoverBTTask.OnQueryComplete
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FNpcPointQueryResult                        Result                                                     (Parm, NativeAccessSpecifierPublic)
	 */
	void UCoverBTTask::OnQueryComplete(const struct FNpcPointQueryResult& Result)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CoverBTTask.OnQueryComplete");
		
		UCoverBTTask_OnQueryComplete_Params params {};
		params.Result = Result;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UCoverBTTask.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UCoverBTTask::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.CoverBTTask");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFindCoverBTTask.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFindCoverBTTask::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FindCoverBTTask");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFindShootingPositionBTTask.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFindShootingPositionBTTask::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FindShootingPositionBTTask");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UCoverDebugComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UCoverDebugComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.CoverDebugComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ACoverLoader.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ACoverLoader::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.CoverLoader");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CoverRuntimeDataHolder.ToggleDebug
	 * 		Flags  -> ()
	 */
	void UCoverRuntimeDataHolder::ToggleDebug()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CoverRuntimeDataHolder.ToggleDebug");
		
		UCoverRuntimeDataHolder_ToggleDebug_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CoverRuntimeDataHolder.OnLevelUnloaded
	 * 		Flags  -> ()
	 */
	void UCoverRuntimeDataHolder::OnLevelUnloaded()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CoverRuntimeDataHolder.OnLevelUnloaded");
		
		UCoverRuntimeDataHolder_OnLevelUnloaded_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CoverRuntimeDataHolder.GetDebugEnabled
	 * 		Flags  -> ()
	 */
	bool UCoverRuntimeDataHolder::GetDebugEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CoverRuntimeDataHolder.GetDebugEnabled");
		
		UCoverRuntimeDataHolder_GetDebugEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CoverRuntimeDataHolder.GetCoverRuntimeDataHolder
	 * 		Flags  -> ()
	 */
	class UCoverRuntimeDataHolder* UCoverRuntimeDataHolder::GetCoverRuntimeDataHolder()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CoverRuntimeDataHolder.GetCoverRuntimeDataHolder");
		
		UCoverRuntimeDataHolder_GetCoverRuntimeDataHolder_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.CoverRuntimeDataHolder.DebugDraw
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UCoverRuntimeDataHolder::DebugDraw(class UObject* WorldContextObject)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.CoverRuntimeDataHolder.DebugDraw");
		
		UCoverRuntimeDataHolder_DebugDraw_Params params {};
		params.WorldContextObject = WorldContextObject;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UCoverRuntimeDataHolder.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UCoverRuntimeDataHolder::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.CoverRuntimeDataHolder");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DamageDealerInterface.GetDamageDealerTag
	 * 		Flags  -> ()
	 */
	struct FGameplayTag UDamageDealerInterface::GetDamageDealerTag()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DamageDealerInterface.GetDamageDealerTag");
		
		UDamageDealerInterface_GetDamageDealerTag_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DamageDealerInterface.GetDamageDealerName
	 * 		Flags  -> ()
	 */
	class FText UDamageDealerInterface::GetDamageDealerName()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DamageDealerInterface.GetDamageDealerName");
		
		UDamageDealerInterface_GetDamageDealerName_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UDamageDealerInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UDamageDealerInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.DamageDealerInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.SetUseAlternateSaveLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDataSaveManager::SetUseAlternateSaveLocation(bool Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.SetUseAlternateSaveLocation");
		
		UDataSaveManager_SetUseAlternateSaveLocation_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.SaveStringToFileEditor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      String                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      FilePath                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bAppend                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UDataSaveManager::SaveStringToFileEditor(const class FString& String, const class FString& FilePath, bool bAppend)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.SaveStringToFileEditor");
		
		UDataSaveManager_SaveStringToFileEditor_Params params {};
		params.String = String;
		params.FilePath = FilePath;
		params.bAppend = bAppend;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.SaveStringToFile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      String                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      FilePath                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bAppend                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UDataSaveManager::SaveStringToFile(const class FString& String, const class FString& FilePath, bool bAppend)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.SaveStringToFile");
		
		UDataSaveManager_SaveStringToFile_Params params {};
		params.String = String;
		params.FilePath = FilePath;
		params.bAppend = bAppend;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.SaveGameData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPRGameData*                                 Data                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            SlotNr                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            SaveNr                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDataSaveManager::SaveGameData(class UPRGameData* Data, int32_t SlotNr, int32_t SaveNr)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.SaveGameData");
		
		UDataSaveManager_SaveGameData_Params params {};
		params.Data = Data;
		params.SlotNr = SlotNr;
		params.SaveNr = SaveNr;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.IsSlotWithIronman
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Slot                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UDataSaveManager::IsSlotWithIronman(int32_t Slot)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.IsSlotWithIronman");
		
		UDataSaveManager_IsSlotWithIronman_Params params {};
		params.Slot = Slot;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.IsSlotEmpty
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FSaveSlotInfo                               SlotInfo                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	bool UDataSaveManager::IsSlotEmpty(const struct FSaveSlotInfo& SlotInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.IsSlotEmpty");
		
		UDataSaveManager_IsSlotEmpty_Params params {};
		params.SlotInfo = SlotInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.HasSaves
	 * 		Flags  -> ()
	 */
	bool UDataSaveManager::HasSaves()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.HasSaves");
		
		UDataSaveManager_HasSaves_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.GetUseAlternateSaveLocation
	 * 		Flags  -> ()
	 */
	bool UDataSaveManager::GetUseAlternateSaveLocation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.GetUseAlternateSaveLocation");
		
		UDataSaveManager_GetUseAlternateSaveLocation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.GetSlotInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Slot                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FSaveSlotInfo                               SlotInfo                                                   (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	bool UDataSaveManager::GetSlotInfo(int32_t Slot, struct FSaveSlotInfo* SlotInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.GetSlotInfo");
		
		UDataSaveManager_GetSlotInfo_Params params {};
		params.Slot = Slot;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (SlotInfo != nullptr)
			*SlotInfo = params.SlotInfo;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.GetSavesPath
	 * 		Flags  -> ()
	 */
	class FString UDataSaveManager::GetSavesPath()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.GetSavesPath");
		
		UDataSaveManager_GetSavesPath_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.GetSaveInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Slot                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Save                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FSaveInfo                                   SaveInfo                                                   (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	bool UDataSaveManager::GetSaveInfo(int32_t Slot, int32_t Save, struct FSaveInfo* SaveInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.GetSaveInfo");
		
		UDataSaveManager_GetSaveInfo_Params params {};
		params.Slot = Slot;
		params.Save = Save;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (SaveInfo != nullptr)
			*SaveInfo = params.SaveInfo;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.GetLastSaveInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FSaveSlotInfo                               SlotInfo                                                   (Parm, NativeAccessSpecifierPublic)
	 */
	struct FSaveInfo UDataSaveManager::GetLastSaveInfo(const struct FSaveSlotInfo& SlotInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.GetLastSaveInfo");
		
		UDataSaveManager_GetLastSaveInfo_Params params {};
		params.SlotInfo = SlotInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.GetDataSaveManager
	 * 		Flags  -> ()
	 */
	class UDataSaveManager* UDataSaveManager::GetDataSaveManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.GetDataSaveManager");
		
		UDataSaveManager_GetDataSaveManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.GetDataPath
	 * 		Flags  -> ()
	 */
	class FString UDataSaveManager::GetDataPath()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.GetDataPath");
		
		UDataSaveManager_GetDataPath_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.FixInventoryItemPosition
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UDataSaveManager::FixInventoryItemPosition(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.FixInventoryItemPosition");
		
		UDataSaveManager_FixInventoryItemPosition_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.CopyScopedToAlternateSave
	 * 		Flags  -> ()
	 */
	void UDataSaveManager::CopyScopedToAlternateSave()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.CopyScopedToAlternateSave");
		
		UDataSaveManager_CopyScopedToAlternateSave_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.CopyAlternateToScopedSave
	 * 		Flags  -> ()
	 */
	void UDataSaveManager::CopyAlternateToScopedSave()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.CopyAlternateToScopedSave");
		
		UDataSaveManager_CopyAlternateToScopedSave_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DataSaveManager.AutosaveGameData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDataSaveManager::AutosaveGameData(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DataSaveManager.AutosaveGameData");
		
		UDataSaveManager_AutosaveGameData_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UDataSaveManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UDataSaveManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.DataSaveManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DiscordManager.Initialize
	 * 		Flags  -> ()
	 */
	void UDiscordManager::Initialize()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DiscordManager.Initialize");
		
		UDiscordManager_Initialize_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DiscordManager.GetDiscordManager
	 * 		Flags  -> ()
	 */
	class UDiscordManager* UDiscordManager::GetDiscordManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DiscordManager.GetDiscordManager");
		
		UDiscordManager_GetDiscordManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DiscordManager.ChangeLocationName
	 * 		Flags  -> ()
	 */
	void UDiscordManager::ChangeLocationName()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DiscordManager.ChangeLocationName");
		
		UDiscordManager_ChangeLocationName_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DiscordManager.ChangeDifficulty
	 * 		Flags  -> ()
	 */
	void UDiscordManager::ChangeDifficulty()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DiscordManager.ChangeDifficulty");
		
		UDiscordManager_ChangeDifficulty_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UDiscordManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UDiscordManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.DiscordManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DistanceGripManager.LevelTransitionStartCallback
	 * 		Flags  -> ()
	 */
	void UDistanceGripManager::LevelTransitionStartCallback()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DistanceGripManager.LevelTransitionStartCallback");
		
		UDistanceGripManager_LevelTransitionStartCallback_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DistanceGripManager.LevelTransitionEndCallback
	 * 		Flags  -> ()
	 */
	void UDistanceGripManager::LevelTransitionEndCallback()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DistanceGripManager.LevelTransitionEndCallback");
		
		UDistanceGripManager_LevelTransitionEndCallback_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DistanceGripManager.ItemTakenFromLevelCallback
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              ItemTaken                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDistanceGripManager::ItemTakenFromLevelCallback(class UInventoryItem* ItemTaken)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DistanceGripManager.ItemTakenFromLevelCallback");
		
		UDistanceGripManager_ItemTakenFromLevelCallback_Params params {};
		params.ItemTaken = ItemTaken;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DistanceGripManager.ItemStoredToLevelCallback
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              ItemStored                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDistanceGripManager::ItemStoredToLevelCallback(class UInventoryItem* ItemStored)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DistanceGripManager.ItemStoredToLevelCallback");
		
		UDistanceGripManager_ItemStoredToLevelCallback_Params params {};
		params.ItemStored = ItemStored;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DistanceGripManager.ItemRemovedFromLevelCallback
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              ItemRemoved                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDistanceGripManager::ItemRemovedFromLevelCallback(class UInventoryItem* ItemRemoved)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DistanceGripManager.ItemRemovedFromLevelCallback");
		
		UDistanceGripManager_ItemRemovedFromLevelCallback_Params params {};
		params.ItemRemoved = ItemRemoved;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DistanceGripManager.ItemActorRemovedCallback
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              ItemWithActorRemoved                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDistanceGripManager::ItemActorRemovedCallback(class UInventoryItem* ItemWithActorRemoved)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DistanceGripManager.ItemActorRemovedCallback");
		
		UDistanceGripManager_ItemActorRemovedCallback_Params params {};
		params.ItemWithActorRemoved = ItemWithActorRemoved;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UDistanceGripManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UDistanceGripManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.DistanceGripManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AEnvConfigurator.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AEnvConfigurator::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.EnvConfigurator");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.GetEventsManager
	 * 		Flags  -> ()
	 */
	class UEventsManager* UEventsManager::GetEventsManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.GetEventsManager");
		
		UEventsManager_GetEventsManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnWildSpawnerCleared
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      SpawnerActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnWildSpawnerCleared(class AActor* SpawnerActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnWildSpawnerCleared");
		
		UEventsManager_FireOnWildSpawnerCleared_Params params {};
		params.SpawnerActor = SpawnerActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnVirtualStockChanged
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnVirtualStockChanged()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnVirtualStockChanged");
		
		UEventsManager_FireOnVirtualStockChanged_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnTutorialStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TutorialId                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnTutorialStarted(const struct FGameplayTag& TutorialId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnTutorialStarted");
		
		UEventsManager_FireOnTutorialStarted_Params params {};
		params.TutorialId = TutorialId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnTutorialSequenceFinished
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      SequenceActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnTutorialSequenceFinished(class AActor* SequenceActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnTutorialSequenceFinished");
		
		UEventsManager_FireOnTutorialSequenceFinished_Params params {};
		params.SequenceActor = SequenceActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnTriggerUnset
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Trigger                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnTriggerUnset(const struct FGameplayTag& Trigger)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnTriggerUnset");
		
		UEventsManager_FireOnTriggerUnset_Params params {};
		params.Trigger = Trigger;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnTriggerPassed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Trigger                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnTriggerPassed(const struct FGameplayTag& Trigger)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnTriggerPassed");
		
		UEventsManager_FireOnTriggerPassed_Params params {};
		params.Trigger = Trigger;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnTransitionStart
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnTransitionStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnTransitionStart");
		
		UEventsManager_FireOnTransitionStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnTransitionEnd
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnTransitionEnd()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnTransitionEnd");
		
		UEventsManager_FireOnTransitionEnd_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnTideHappening
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnTideHappening()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnTideHappening");
		
		UEventsManager_FireOnTideHappening_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnStoryNotePassed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                NoteID                                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnStoryNotePassed(const struct FGameplayTag& NoteID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnStoryNotePassed");
		
		UEventsManager_FireOnStoryNotePassed_Params params {};
		params.NoteID = NoteID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnStashOpened
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      StashActor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnStashOpened(class AActor* StashActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnStashOpened");
		
		UEventsManager_FireOnStashOpened_Params params {};
		params.StashActor = StashActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnShowBodyChanged
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnShowBodyChanged()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnShowBodyChanged");
		
		UEventsManager_FireOnShowBodyChanged_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnShotFired
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnShotFired()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnShotFired");
		
		UEventsManager_FireOnShotFired_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnReferencesClearing
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnReferencesClearing()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnReferencesClearing");
		
		UEventsManager_FireOnReferencesClearing_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerWalking
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnPlayerWalking()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerWalking");
		
		UEventsManager_FireOnPlayerWalking_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerTurning
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnPlayerTurning()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerTurning");
		
		UEventsManager_FireOnPlayerTurning_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerStarted
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnPlayerStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerStarted");
		
		UEventsManager_FireOnPlayerStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerSleep
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Seconds                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsBlackout                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnPlayerSleep(float Seconds, bool bIsBlackout)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerSleep");
		
		UEventsManager_FireOnPlayerSleep_Params params {};
		params.Seconds = Seconds;
		params.bIsBlackout = bIsBlackout;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerRunning
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnPlayerRunning()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerRunning");
		
		UEventsManager_FireOnPlayerRunning_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerReset
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnPlayerReset()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerReset");
		
		UEventsManager_FireOnPlayerReset_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerMoneyChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class FString>                              AnalyticsParams                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnPlayerMoneyChanged(int32_t Value, TArray<class FString> AnalyticsParams)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerMoneyChanged");
		
		UEventsManager_FireOnPlayerMoneyChanged_Params params {};
		params.Value = Value;
		params.AnalyticsParams = AnalyticsParams;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerLevelChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            PlayerLevel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnPlayerLevelChanged(int32_t PlayerLevel)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerLevelChanged");
		
		UEventsManager_FireOnPlayerLevelChanged_Params params {};
		params.PlayerLevel = PlayerLevel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerKilledNPC
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      NPCActor                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                weaponTag                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnPlayerKilledNPC(class AActor* NPCActor, const struct FGameplayTag& weaponTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerKilledNPC");
		
		UEventsManager_FireOnPlayerKilledNPC_Params params {};
		params.NPCActor = NPCActor;
		params.weaponTag = weaponTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerEyesOpen
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIsOpen                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnPlayerEyesOpen(bool bIsOpen)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerEyesOpen");
		
		UEventsManager_FireOnPlayerEyesOpen_Params params {};
		params.bIsOpen = bIsOpen;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerDied
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnPlayerDied()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerDied");
		
		UEventsManager_FireOnPlayerDied_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPlayerBodyVisibilityChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnPlayerBodyVisibilityChanged(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPlayerBodyVisibilityChanged");
		
		UEventsManager_FireOnPlayerBodyVisibilityChanged_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnPictureTaken
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnPictureTaken(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnPictureTaken");
		
		UEventsManager_FireOnPictureTaken_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnObjectiveRestored
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMissionAbstractObjectiveData*               objectiveData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnObjectiveRestored(class UMissionData* MissionData, class UMissionAbstractObjectiveData* objectiveData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnObjectiveRestored");
		
		UEventsManager_FireOnObjectiveRestored_Params params {};
		params.MissionData = MissionData;
		params.objectiveData = objectiveData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnObjectiveProgress
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMissionAbstractObjectiveData*               objectiveData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnObjectiveProgress(class UMissionData* MissionData, class UMissionAbstractObjectiveData* objectiveData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnObjectiveProgress");
		
		UEventsManager_FireOnObjectiveProgress_Params params {};
		params.MissionData = MissionData;
		params.objectiveData = objectiveData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnObjectiveFinished
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMissionAbstractObjectiveData*               objectiveData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnObjectiveFinished(class UMissionData* MissionData, class UMissionAbstractObjectiveData* objectiveData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnObjectiveFinished");
		
		UEventsManager_FireOnObjectiveFinished_Params params {};
		params.MissionData = MissionData;
		params.objectiveData = objectiveData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnNPCDied
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      NPCActor                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnNPCDied(class AActor* NPCActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnNPCDied");
		
		UEventsManager_FireOnNPCDied_Params params {};
		params.NPCActor = NPCActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnNewMissionAdded
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnNewMissionAdded(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnNewMissionAdded");
		
		UEventsManager_FireOnNewMissionAdded_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnNewJournalNote
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                NoteID                                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnNewJournalNote(const struct FGameplayTag& NoteID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnNewJournalNote");
		
		UEventsManager_FireOnNewJournalNote_Params params {};
		params.NoteID = NoteID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnMissionStateChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnMissionStateChanged(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnMissionStateChanged");
		
		UEventsManager_FireOnMissionStateChanged_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnMissionPreview
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnMissionPreview(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnMissionPreview");
		
		UEventsManager_FireOnMissionPreview_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnMissionFinished
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnMissionFinished(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnMissionFinished");
		
		UEventsManager_FireOnMissionFinished_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnLevelStarted");
		
		UEventsManager_FireOnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnLevelPrepare
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnLevelPrepare(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnLevelPrepare");
		
		UEventsManager_FireOnLevelPrepare_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnItemTaken
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnItemTaken(class UInventoryItem* InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnItemTaken");
		
		UEventsManager_FireOnItemTaken_Params params {};
		params.InventoryItem = InventoryItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnItemStored
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnItemStored(class UInventoryItem* InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnItemStored");
		
		UEventsManager_FireOnItemStored_Params params {};
		params.InventoryItem = InventoryItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnItemsSold
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UInventoryItem*>                      Items                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnItemsSold(TArray<class UInventoryItem*> Items)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnItemsSold");
		
		UEventsManager_FireOnItemsSold_Params params {};
		params.Items = Items;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnItemRemoved
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnItemRemoved(class UInventoryItem* InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnItemRemoved");
		
		UEventsManager_FireOnItemRemoved_Params params {};
		params.InventoryItem = InventoryItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnItemDropped
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      itemActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnItemDropped(class AActor* itemActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnItemDropped");
		
		UEventsManager_FireOnItemDropped_Params params {};
		params.itemActor = itemActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnItemChangeDurability
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnItemChangeDurability(class UInventoryItem* InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnItemChangeDurability");
		
		UEventsManager_FireOnItemChangeDurability_Params params {};
		params.InventoryItem = InventoryItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnItemBought
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnItemBought(class UInventoryItem* InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnItemBought");
		
		UEventsManager_FireOnItemBought_Params params {};
		params.InventoryItem = InventoryItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnItemActorRefRemoved
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnItemActorRefRemoved(class UInventoryItem* InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnItemActorRefRemoved");
		
		UEventsManager_FireOnItemActorRefRemoved_Params params {};
		params.InventoryItem = InventoryItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnInventoryModeChanged
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnInventoryModeChanged()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnInventoryModeChanged");
		
		UEventsManager_FireOnInventoryModeChanged_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnGameTimeChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              DeltaSeconds                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnGameTimeChanged(float DeltaSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnGameTimeChanged");
		
		UEventsManager_FireOnGameTimeChanged_Params params {};
		params.DeltaSeconds = DeltaSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnGameStarted
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnGameStarted");
		
		UEventsManager_FireOnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnGameShutdown
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnGameShutdown()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnGameShutdown");
		
		UEventsManager_FireOnGameShutdown_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnGameplayTimeDilationChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              TimeDilation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnGameplayTimeDilationChanged(float TimeDilation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnGameplayTimeDilationChanged");
		
		UEventsManager_FireOnGameplayTimeDilationChanged_Params params {};
		params.TimeDilation = TimeDilation;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnGamePaused
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIsPaused                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnGamePaused(bool bIsPaused)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnGamePaused");
		
		UEventsManager_FireOnGamePaused_Params params {};
		params.bIsPaused = bIsPaused;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnGameModeStarted
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnGameModeStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnGameModeStarted");
		
		UEventsManager_FireOnGameModeStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnGameInstanceStarted
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnGameInstanceStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnGameInstanceStarted");
		
		UEventsManager_FireOnGameInstanceStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnGameDataSave
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnGameDataSave()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnGameDataSave");
		
		UEventsManager_FireOnGameDataSave_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnFirstTimeTaken
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnFirstTimeTaken(const struct FGameplayTag& ItemTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnFirstTimeTaken");
		
		UEventsManager_FireOnFirstTimeTaken_Params params {};
		params.ItemTag = ItemTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnEnvironmentRePrepared
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class APREnvironment*                              Environment                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnEnvironmentRePrepared(class APREnvironment* Environment)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnEnvironmentRePrepared");
		
		UEventsManager_FireOnEnvironmentRePrepared_Params params {};
		params.Environment = Environment;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnDifficultyChanged
	 * 		Flags  -> ()
	 */
	void UEventsManager::FireOnDifficultyChanged()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnDifficultyChanged");
		
		UEventsManager_FireOnDifficultyChanged_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnCustomMapMarkPassed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MarkID                                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnCustomMapMarkPassed(const struct FGameplayTag& MarkID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnCustomMapMarkPassed");
		
		UEventsManager_FireOnCustomMapMarkPassed_Params params {};
		params.MarkID = MarkID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnConsumableUsing
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnConsumableUsing(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnConsumableUsing");
		
		UEventsManager_FireOnConsumableUsing_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.EventsManager.FireOnConsumableActorUsing
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      itemActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UEventsManager::FireOnConsumableActorUsing(class AActor* itemActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.EventsManager.FireOnConsumableActorUsing");
		
		UEventsManager_FireOnConsumableActorUsing_Params params {};
		params.itemActor = itemActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UEventsManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UEventsManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.EventsManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLAnimation.GetDurationOfActiveNotifyState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UAnimInstance*                               AnimInstance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UAnimNotifyState*                            AnimNotifyStateInstance                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              OutDuration                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLAnimation::GetDurationOfActiveNotifyState(class UAnimInstance* AnimInstance, class UAnimNotifyState* AnimNotifyStateInstance, float* OutDuration)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLAnimation.GetDurationOfActiveNotifyState");
		
		UFLAnimation_GetDurationOfActiveNotifyState_Params params {};
		params.AnimInstance = AnimInstance;
		params.AnimNotifyStateInstance = AnimNotifyStateInstance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (OutDuration != nullptr)
			*OutDuration = params.OutDuration;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLAnimation.GetAnimSequencePlayLength
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UAnimSequenceBase*                           Anim                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              StartTime                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bPlayingBackwards                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UFLAnimation::GetAnimSequencePlayLength(class UAnimSequenceBase* Anim, float StartTime, bool bPlayingBackwards)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLAnimation.GetAnimSequencePlayLength");
		
		UFLAnimation_GetAnimSequencePlayLength_Params params {};
		params.Anim = Anim;
		params.StartTime = StartTime;
		params.bPlayingBackwards = bPlayingBackwards;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLAnimation.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLAnimation::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLAnimation");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SetWeaponInfosToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FWeaponInfo>                         infos                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::SetWeaponInfosToTable(class UDataTable* DataTable, TArray<struct FWeaponInfo> infos)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SetWeaponInfosToTable");
		
		UFLBlutility_SetWeaponInfosToTable_Params params {};
		params.DataTable = DataTable;
		params.infos = infos;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SetPoseInfosToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FPRHandPoseInfosPair>                Poses                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::SetPoseInfosToTable(class UDataTable* DataTable, TArray<struct FPRHandPoseInfosPair> Poses)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SetPoseInfosToTable");
		
		UFLBlutility_SetPoseInfosToTable_Params params {};
		params.DataTable = DataTable;
		params.Poses = Poses;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SetNPCInfosToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FPRNPCInfo>                          infos                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::SetNPCInfosToTable(class UDataTable* DataTable, TArray<struct FPRNPCInfo> infos)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SetNPCInfosToTable");
		
		UFLBlutility_SetNPCInfosToTable_Params params {};
		params.DataTable = DataTable;
		params.infos = infos;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SetMobility
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EComponentMobility                                 Mobility                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::SetMobility(class AActor* Actor, EComponentMobility Mobility)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SetMobility");
		
		UFLBlutility_SetMobility_Params params {};
		params.Actor = Actor;
		params.Mobility = Mobility;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SetItemInfosToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FPRItemInfo>                         infos                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::SetItemInfosToTable(class UDataTable* DataTable, TArray<struct FPRItemInfo> infos)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SetItemInfosToTable");
		
		UFLBlutility_SetItemInfosToTable_Params params {};
		params.DataTable = DataTable;
		params.infos = infos;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SetAnomalyInfosToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FPRAnomalyInfo>                      infos                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::SetAnomalyInfosToTable(class UDataTable* DataTable, TArray<struct FPRAnomalyInfo> infos)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SetAnomalyInfosToTable");
		
		UFLBlutility_SetAnomalyInfosToTable_Params params {};
		params.DataTable = DataTable;
		params.infos = infos;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SetAmmoInfosToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FAmmoInfo>                           infos                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::SetAmmoInfosToTable(class UDataTable* DataTable, TArray<struct FAmmoInfo> infos)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SetAmmoInfosToTable");
		
		UFLBlutility_SetAmmoInfosToTable_Params params {};
		params.DataTable = DataTable;
		params.infos = infos;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SetAmmoContainerInfosToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FPRAmmoContainerInfo>                infos                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::SetAmmoContainerInfosToTable(class UDataTable* DataTable, TArray<struct FPRAmmoContainerInfo> infos)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SetAmmoContainerInfosToTable");
		
		UFLBlutility_SetAmmoContainerInfosToTable_Params params {};
		params.DataTable = DataTable;
		params.infos = infos;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SetAllowCullDistanceVolume
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMeshComponent*                        Component                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::SetAllowCullDistanceVolume(class UStaticMeshComponent* Component, bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SetAllowCullDistanceVolume");
		
		UFLBlutility_SetAllowCullDistanceVolume_Params params {};
		params.Component = Component;
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.SaveDataTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLBlutility::SaveDataTable(class UDataTable* DataTable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.SaveDataTable");
		
		UFLBlutility_SaveDataTable_Params params {};
		params.DataTable = DataTable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.ReloadConfigAssets
	 * 		Flags  -> ()
	 */
	void UFLBlutility::ReloadConfigAssets()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.ReloadConfigAssets");
		
		UFLBlutility_ReloadConfigAssets_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.LoadItemInfos
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FPRItemInfo>                         Array                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		bool                                               updateTable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLBlutility::LoadItemInfos(TArray<struct FPRItemInfo>* Array, bool updateTable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.LoadItemInfos");
		
		UFLBlutility_LoadItemInfos_Params params {};
		params.updateTable = updateTable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Array != nullptr)
			*Array = params.Array;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.CompareHandPoses
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FPRHandPoseInfo                             poseA                                                      (Parm, NativeAccessSpecifierPublic)
	 * 		struct FPRHandPoseInfo                             poseB                                                      (Parm, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::CompareHandPoses(const struct FPRHandPoseInfo& poseA, const struct FPRHandPoseInfo& poseB)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.CompareHandPoses");
		
		UFLBlutility_CompareHandPoses_Params params {};
		params.poseA = poseA;
		params.poseB = poseB;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.ClearDataTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLBlutility::ClearDataTable(class UDataTable* DataTable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.ClearDataTable");
		
		UFLBlutility_ClearDataTable_Params params {};
		params.DataTable = DataTable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.AddWeaponInfoToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FWeaponInfo                                 Info                                                       (Parm, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::AddWeaponInfoToTable(class UDataTable* DataTable, const struct FWeaponInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.AddWeaponInfoToTable");
		
		UFLBlutility_AddWeaponInfoToTable_Params params {};
		params.DataTable = DataTable;
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.AddPoseInfoToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FPRHandPoseInfosPair                        Pose                                                       (Parm, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::AddPoseInfoToTable(class UDataTable* DataTable, const struct FPRHandPoseInfosPair& Pose)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.AddPoseInfoToTable");
		
		UFLBlutility_AddPoseInfoToTable_Params params {};
		params.DataTable = DataTable;
		params.Pose = Pose;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.AddPointData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TMap<struct FGameplayTag, struct FTagToTransformsList> In                                                         (Parm, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  absoluteTransform                                          (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		TMap<struct FGameplayTag, struct FTransform>       levelCenters                                               (Parm, NativeAccessSpecifierPublic)
	 * 		bool                                               Message                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               duplicateCheck                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TMap<struct FGameplayTag, struct FTagToTransformsList> UFLBlutility::AddPointData(TMap<struct FGameplayTag, struct FTagToTransformsList> In, const struct FGameplayTag& LevelTag, const struct FGameplayTag& pointTag, const struct FTransform& absoluteTransform, TMap<struct FGameplayTag, struct FTransform> levelCenters, bool Message, bool duplicateCheck)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.AddPointData");
		
		UFLBlutility_AddPointData_Params params {};
		params.In = In;
		params.LevelTag = LevelTag;
		params.pointTag = pointTag;
		params.absoluteTransform = absoluteTransform;
		params.levelCenters = levelCenters;
		params.Message = Message;
		params.duplicateCheck = duplicateCheck;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.AddNPCInfoToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FPRNPCInfo                                  Info                                                       (Parm, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::AddNPCInfoToTable(class UDataTable* DataTable, const struct FPRNPCInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.AddNPCInfoToTable");
		
		UFLBlutility_AddNPCInfoToTable_Params params {};
		params.DataTable = DataTable;
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.AddItemInfoToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FPRItemInfo                                 Info                                                       (Parm, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::AddItemInfoToTable(class UDataTable* DataTable, const struct FPRItemInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.AddItemInfoToTable");
		
		UFLBlutility_AddItemInfoToTable_Params params {};
		params.DataTable = DataTable;
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.AddAnomalyInfoToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FPRAnomalyInfo                              Info                                                       (Parm, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::AddAnomalyInfoToTable(class UDataTable* DataTable, const struct FPRAnomalyInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.AddAnomalyInfoToTable");
		
		UFLBlutility_AddAnomalyInfoToTable_Params params {};
		params.DataTable = DataTable;
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.AddAmmoInfoToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FAmmoInfo                                   Info                                                       (Parm, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::AddAmmoInfoToTable(class UDataTable* DataTable, const struct FAmmoInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.AddAmmoInfoToTable");
		
		UFLBlutility_AddAmmoInfoToTable_Params params {};
		params.DataTable = DataTable;
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLBlutility.AddAmmoContainerInfoToTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UDataTable*                                  DataTable                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FPRAmmoContainerInfo                        Info                                                       (Parm, NativeAccessSpecifierPublic)
	 */
	bool UFLBlutility::AddAmmoContainerInfoToTable(class UDataTable* DataTable, const struct FPRAmmoContainerInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLBlutility.AddAmmoContainerInfoToTable");
		
		UFLBlutility_AddAmmoContainerInfoToTable_Params params {};
		params.DataTable = DataTable;
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLBlutility.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLBlutility::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLBlutility");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLFirearmProjectiles.SpawnShrapnelProjectile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FAmmoInfo                                   AmmoInfo                                                   (ConstParm, Parm, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AccuracyInternal                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AccuracyMultiplier                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Offset                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              TraceDistance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Owner                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APawn*                                       Instigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLFirearmProjectiles::SpawnShrapnelProjectile(const struct FTransform& Transform, const struct FAmmoInfo& AmmoInfo, float Damage, float AccuracyInternal, float AccuracyMultiplier, float Offset, float TraceDistance, class AActor* Owner, class APawn* Instigator)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLFirearmProjectiles.SpawnShrapnelProjectile");
		
		UFLFirearmProjectiles_SpawnShrapnelProjectile_Params params {};
		params.Transform = Transform;
		params.AmmoInfo = AmmoInfo;
		params.Damage = Damage;
		params.AccuracyInternal = AccuracyInternal;
		params.AccuracyMultiplier = AccuracyMultiplier;
		params.Offset = Offset;
		params.TraceDistance = TraceDistance;
		params.Owner = Owner;
		params.Instigator = Instigator;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLFirearmProjectiles.SpawnProjectile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FAmmoInfo                                   AmmoInfo                                                   (ConstParm, Parm, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Velocity                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AccuracyInternal                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AccuracyMultiplier                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Offset                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Owner                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APawn*                                       Instigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsForceTrace                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               State                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Actor                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLFirearmProjectiles::SpawnProjectile(const struct FTransform& Transform, const struct FAmmoInfo& AmmoInfo, float Damage, float Velocity, float AccuracyInternal, float AccuracyMultiplier, float Offset, class AActor* Owner, class APawn* Instigator, bool IsForceTrace, bool* State, class AActor** Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLFirearmProjectiles.SpawnProjectile");
		
		UFLFirearmProjectiles_SpawnProjectile_Params params {};
		params.Transform = Transform;
		params.AmmoInfo = AmmoInfo;
		params.Damage = Damage;
		params.Velocity = Velocity;
		params.AccuracyInternal = AccuracyInternal;
		params.AccuracyMultiplier = AccuracyMultiplier;
		params.Offset = Offset;
		params.Owner = Owner;
		params.Instigator = Instigator;
		params.IsForceTrace = IsForceTrace;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (State != nullptr)
			*State = params.State;
		if (Actor != nullptr)
			*Actor = params.Actor;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLFirearmProjectiles.SpawnGrenadeProjectile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FAmmoInfo                                   AmmoInfo                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Velocity                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AccuracyRadians                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Owner                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APawn*                                       Instigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsForceTrace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLFirearmProjectiles::SpawnGrenadeProjectile(const struct FTransform& Transform, const struct FAmmoInfo& AmmoInfo, float Damage, float Velocity, float AccuracyRadians, class AActor* Owner, class APawn* Instigator, bool IsForceTrace)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLFirearmProjectiles.SpawnGrenadeProjectile");
		
		UFLFirearmProjectiles_SpawnGrenadeProjectile_Params params {};
		params.Transform = Transform;
		params.AmmoInfo = AmmoInfo;
		params.Damage = Damage;
		params.Velocity = Velocity;
		params.AccuracyRadians = AccuracyRadians;
		params.Owner = Owner;
		params.Instigator = Instigator;
		params.IsForceTrace = IsForceTrace;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLFirearmProjectiles.SpawnExplosionProjectile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  ExplosionOrigin                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FExplosionParticalInfo                      ParticalInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Owner                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APawn*                                       Instigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsForceTrace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<class AActor*> UFLFirearmProjectiles::SpawnExplosionProjectile(const struct FTransform& ExplosionOrigin, const struct FExplosionParticalInfo& ParticalInfo, class AActor* Owner, class APawn* Instigator, bool IsForceTrace)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLFirearmProjectiles.SpawnExplosionProjectile");
		
		UFLFirearmProjectiles_SpawnExplosionProjectile_Params params {};
		params.ExplosionOrigin = ExplosionOrigin;
		params.ParticalInfo = ParticalInfo;
		params.Owner = Owner;
		params.Instigator = Instigator;
		params.IsForceTrace = IsForceTrace;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLFirearmProjectiles.SpawnExplosion
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FExplosionInfo                              ExplosionInfo                                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Owner                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APawn*                                       Instigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLFirearmProjectiles::SpawnExplosion(const struct FTransform& Transform, const struct FExplosionInfo& ExplosionInfo, class AActor* Owner, class APawn* Instigator)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLFirearmProjectiles.SpawnExplosion");
		
		UFLFirearmProjectiles_SpawnExplosion_Params params {};
		params.Transform = Transform;
		params.ExplosionInfo = ExplosionInfo;
		params.Owner = Owner;
		params.Instigator = Instigator;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLFirearmProjectiles.SpawnBulletProjectile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FAmmoInfo                                   AmmoInfo                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Velocity                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AccuracyRadians                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Owner                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APawn*                                       Instigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsForceTrace                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               State                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Actor                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLFirearmProjectiles::SpawnBulletProjectile(const struct FTransform& Transform, const struct FAmmoInfo& AmmoInfo, float Damage, float Velocity, float AccuracyRadians, class AActor* Owner, class APawn* Instigator, bool IsForceTrace, bool* State, class AActor** Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLFirearmProjectiles.SpawnBulletProjectile");
		
		UFLFirearmProjectiles_SpawnBulletProjectile_Params params {};
		params.Transform = Transform;
		params.AmmoInfo = AmmoInfo;
		params.Damage = Damage;
		params.Velocity = Velocity;
		params.AccuracyRadians = AccuracyRadians;
		params.Owner = Owner;
		params.Instigator = Instigator;
		params.IsForceTrace = IsForceTrace;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (State != nullptr)
			*State = params.State;
		if (Actor != nullptr)
			*Actor = params.Actor;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLFirearmProjectiles.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLFirearmProjectiles::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLFirearmProjectiles");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.TracersShowTypeToString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ETracersShowType                                   TracersShowType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UFLGeneral::TracersShowTypeToString(ETracersShowType TracersShowType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.TracersShowTypeToString");
		
		UFLGeneral_TracersShowTypeToString_Params params {};
		params.TracersShowType = TracersShowType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.TagsArrayAsString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Prefix                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FGameplayTag>                        tagsArray                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	class FString UFLGeneral::TagsArrayAsString(const class FString& Prefix, TArray<struct FGameplayTag> tagsArray)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.TagsArrayAsString");
		
		UFLGeneral_TagsArrayAsString_Params params {};
		params.Prefix = Prefix;
		params.tagsArray = tagsArray;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.SpawnActorWithLabel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UClass*                                      ActorClass                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Label                                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLGeneral::SpawnActorWithLabel(class UObject* WorldContextObject, class UClass* ActorClass, const struct FVector& Location, const class FString& Label)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.SpawnActorWithLabel");
		
		UFLGeneral_SpawnActorWithLabel_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.ActorClass = ActorClass;
		params.Location = Location;
		params.Label = Label;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.SortComponentsByLabel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class USceneComponent*>                     In                                                         (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 * 		TArray<class USceneComponent*>                     Out                                                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::SortComponentsByLabel(TArray<class USceneComponent*> In, TArray<class USceneComponent*>* Out)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.SortComponentsByLabel");
		
		UFLGeneral_SortComponentsByLabel_Params params {};
		params.In = In;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Out != nullptr)
			*Out = params.Out;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.ShowMessage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Title                                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::ShowMessage(const class FString& Message, const class FString& Title)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.ShowMessage");
		
		UFLGeneral_ShowMessage_Params params {};
		params.Message = Message;
		params.Title = Title;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.ShiftActorByComponent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             Component                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  TargetTransform                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	struct FTransform UFLGeneral::ShiftActorByComponent(class AActor* Actor, class USceneComponent* Component, const struct FTransform& TargetTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.ShiftActorByComponent");
		
		UFLGeneral_ShiftActorByComponent_Params params {};
		params.Actor = Actor;
		params.Component = Component;
		params.TargetTransform = TargetTransform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.SetLightVisibility
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class ULightComponent*                             Light                                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsVisible                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::SetLightVisibility(class ULightComponent* Light, bool IsVisible)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.SetLightVisibility");
		
		UFLGeneral_SetLightVisibility_Params params {};
		params.Light = Light;
		params.IsVisible = IsVisible;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.SetLightAffectsWorld
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class ULightComponent*                             Component                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bAffects                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::SetLightAffectsWorld(class ULightComponent* Component, bool bAffects)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.SetLightAffectsWorld");
		
		UFLGeneral_SetLightAffectsWorld_Params params {};
		params.Component = Component;
		params.bAffects = bAffects;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.SetCanEverAffectNavigation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UActorComponent*                             Component                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bRelevant                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::SetCanEverAffectNavigation(class UActorComponent* Component, bool bRelevant)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.SetCanEverAffectNavigation");
		
		UFLGeneral_SetCanEverAffectNavigation_Params params {};
		params.Component = Component;
		params.bRelevant = bRelevant;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.SetAngularRotationOffset
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPhysicsConstraintComponent*                 Component                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FRotator                                    RotationOffset                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::SetAngularRotationOffset(class UPhysicsConstraintComponent* Component, const struct FRotator& RotationOffset)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.SetAngularRotationOffset");
		
		UFLGeneral_SetAngularRotationOffset_Params params {};
		params.Component = Component;
		params.RotationOffset = RotationOffset;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.SetActorSimulatePhysics
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Simulate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               zeroVel                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         Primitive                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::SetActorSimulatePhysics(class AActor* Actor, bool Simulate, bool zeroVel, bool* success, class UPrimitiveComponent** Primitive)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.SetActorSimulatePhysics");
		
		UFLGeneral_SetActorSimulatePhysics_Params params {};
		params.Actor = Actor;
		params.Simulate = Simulate;
		params.zeroVel = zeroVel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (Primitive != nullptr)
			*Primitive = params.Primitive;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.SetActorEnableGravity
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               enable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::SetActorEnableGravity(class AActor* Actor, bool enable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.SetActorEnableGravity");
		
		UFLGeneral_SetActorEnableGravity_Params params {};
		params.Actor = Actor;
		params.enable = enable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.SafeDestroyActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::SafeDestroyActor(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.SafeDestroyActor");
		
		UFLGeneral_SafeDestroyActor_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.RequestGameplayTagChildren
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FGameplayTag>                        GameplayTags                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	struct FGameplayTagContainer UFLGeneral::RequestGameplayTagChildren(TArray<struct FGameplayTag> GameplayTags)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.RequestGameplayTagChildren");
		
		UFLGeneral_RequestGameplayTagChildren_Params params {};
		params.GameplayTags = GameplayTags;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.RefreshHolders
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::RefreshHolders(class UObject* Object)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.RefreshHolders");
		
		UFLGeneral_RefreshHolders_Params params {};
		params.Object = Object;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.PutActorInPersistentLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::PutActorInPersistentLevel(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.PutActorInPersistentLevel");
		
		UFLGeneral_PutActorInPersistentLevel_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.ProtectedApplyPointDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      DamagedActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              BaseDamage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     HitFromDirection                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FHitResult                                  HitInfo                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      ActorInstigator                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      DamageCauser                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UClass*                                      DamageTypeClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UFLGeneral::ProtectedApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AActor* ActorInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.ProtectedApplyPointDamage");
		
		UFLGeneral_ProtectedApplyPointDamage_Params params {};
		params.DamagedActor = DamagedActor;
		params.BaseDamage = BaseDamage;
		params.HitFromDirection = HitFromDirection;
		params.HitInfo = HitInfo;
		params.ActorInstigator = ActorInstigator;
		params.DamageCauser = DamageCauser;
		params.DamageTypeClass = DamageTypeClass;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.PrintObjectReferences
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::PrintObjectReferences(class UObject* Object)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.PrintObjectReferences");
		
		UFLGeneral_PrintObjectReferences_Params params {};
		params.Object = Object;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.PresetToDifficulty
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRGameDifficultyPreset                            DifficultyPreset                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FRadiusGameDifficulty UFLGeneral::PresetToDifficulty(EPRGameDifficultyPreset DifficultyPreset)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.PresetToDifficulty");
		
		UFLGeneral_PresetToDifficulty_Params params {};
		params.DifficultyPreset = DifficultyPreset;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.ParseCommandLine
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      ParameterName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Value                                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::ParseCommandLine(const class FString& ParameterName, class FString* Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.ParseCommandLine");
		
		UFLGeneral_ParseCommandLine_Params params {};
		params.ParameterName = ParameterName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Value != nullptr)
			*Value = params.Value;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.Multiply_MinMaxFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FMinMaxFloat                                A                                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 * 		float                                              B                                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FMinMaxFloat UFLGeneral::Multiply_MinMaxFloat(const struct FMinMaxFloat& A, float B)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.Multiply_MinMaxFloat");
		
		UFLGeneral_Multiply_MinMaxFloat_Params params {};
		params.A = A;
		params.B = B;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.KillActorWithChildren
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::KillActorWithChildren(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.KillActorWithChildren");
		
		UFLGeneral_KillActorWithChildren_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.KillActorsByClass
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UClass*                                      ActorsClass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bWithChildren                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::KillActorsByClass(class UObject* WorldContextObject, class UClass* ActorsClass, bool bWithChildren)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.KillActorsByClass");
		
		UFLGeneral_KillActorsByClass_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.ActorsClass = ActorsClass;
		params.bWithChildren = bWithChildren;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.KillActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::KillActor(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.KillActor");
		
		UFLGeneral_KillActor_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.ItemsDropTypeToString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EItemsDropType                                     DropType                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UFLGeneral::ItemsDropTypeToString(EItemsDropType DropType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.ItemsDropTypeToString");
		
		UFLGeneral_ItemsDropTypeToString_Params params {};
		params.DropType = DropType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsZeroParallelepiped
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FParallelepiped                             Rect                                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsZeroParallelepiped(const struct FParallelepiped& Rect)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsZeroParallelepiped");
		
		UFLGeneral_IsZeroParallelepiped_Params params {};
		params.Rect = Rect;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsZeroInt
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FMinMaxInt                                  MinMax                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsZeroInt(const struct FMinMaxInt& MinMax)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsZeroInt");
		
		UFLGeneral_IsZeroInt_Params params {};
		params.MinMax = MinMax;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsZeroFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FMinMaxFloat                                MinMax                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsZeroFloat(const struct FMinMaxFloat& MinMax)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsZeroFloat");
		
		UFLGeneral_IsZeroFloat_Params params {};
		params.MinMax = MinMax;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsZeroDiffInt
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FMinMaxInt                                  MinMax                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsZeroDiffInt(const struct FMinMaxInt& MinMax)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsZeroDiffInt");
		
		UFLGeneral_IsZeroDiffInt_Params params {};
		params.MinMax = MinMax;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsZeroDiffFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FMinMaxFloat                                MinMax                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsZeroDiffFloat(const struct FMinMaxFloat& MinMax)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsZeroDiffFloat");
		
		UFLGeneral_IsZeroDiffFloat_Params params {};
		params.MinMax = MinMax;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsProfilingInCommandLine
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsProfilingInCommandLine()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsProfilingInCommandLine");
		
		UFLGeneral_IsProfilingInCommandLine_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsPreviewActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsPreviewActor(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsPreviewActor");
		
		UFLGeneral_IsPreviewActor_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsPassedTutorialUnseen
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TriggerTag                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsPassedTutorialUnseen(const struct FGameplayTag& TriggerTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsPassedTutorialUnseen");
		
		UFLGeneral_IsPassedTutorialUnseen_Params params {};
		params.TriggerTag = TriggerTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsParallelepipedIntersectSphere
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FParallelepiped                             Rect                                                       (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     SphereCenter                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              SphereRadius                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsParallelepipedIntersectSphere(const struct FParallelepiped& Rect, const struct FVector& SphereCenter, float SphereRadius)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsParallelepipedIntersectSphere");
		
		UFLGeneral_IsParallelepipedIntersectSphere_Params params {};
		params.Rect = Rect;
		params.SphereCenter = SphereCenter;
		params.SphereRadius = SphereRadius;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsParallelepipedIntersectPoint
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FParallelepiped                             Rect                                                       (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Point                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsParallelepipedIntersectPoint(const struct FParallelepiped& Rect, const struct FVector& Point)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsParallelepipedIntersectPoint");
		
		UFLGeneral_IsParallelepipedIntersectPoint_Params params {};
		params.Rect = Rect;
		params.Point = Point;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsNecessaryTutorial
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsNecessaryTutorial()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsNecessaryTutorial");
		
		UFLGeneral_IsNecessaryTutorial_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsInTutorialLevel
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsInTutorialLevel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsInTutorialLevel");
		
		UFLGeneral_IsInTutorialLevel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsInMainMenuLevel
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsInMainMenuLevel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsInMainMenuLevel");
		
		UFLGeneral_IsInMainMenuLevel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsInBoundsIgnoreZ
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Point                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  BoxWorldTransform                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     BoxExtent                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsInBoundsIgnoreZ(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsInBoundsIgnoreZ");
		
		UFLGeneral_IsInBoundsIgnoreZ_Params params {};
		params.Point = Point;
		params.BoxWorldTransform = BoxWorldTransform;
		params.BoxExtent = BoxExtent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsGameStarted
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsGameStarted");
		
		UFLGeneral_IsGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsGameRunning
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsGameRunning(class UObject* WorldContextObject)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsGameRunning");
		
		UFLGeneral_IsGameRunning_Params params {};
		params.WorldContextObject = WorldContextObject;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsGameplayRunning
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsGameplayRunning()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsGameplayRunning");
		
		UFLGeneral_IsGameplayRunning_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsGameClosing
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsGameClosing()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsGameClosing");
		
		UFLGeneral_IsGameClosing_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsFreeGame
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsFreeGame()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsFreeGame");
		
		UFLGeneral_IsFreeGame_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsEditorCustomStartup
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsEditorCustomStartup()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsEditorCustomStartup");
		
		UFLGeneral_IsEditorCustomStartup_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsEarlyAccessPlayer
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::IsEarlyAccessPlayer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsEarlyAccessPlayer");
		
		UFLGeneral_IsEarlyAccessPlayer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsDifficultyAppliedAfterTide
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRadiusGameDifficulty                       NewDifficulty                                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsDifficultyAppliedAfterTide(const struct FRadiusGameDifficulty& NewDifficulty)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsDifficultyAppliedAfterTide");
		
		UFLGeneral_IsDifficultyAppliedAfterTide_Params params {};
		params.NewDifficulty = NewDifficulty;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsDefaultUpgrade
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                UpgradeID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsDefaultUpgrade(const struct FGameplayTag& UpgradeID, class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsDefaultUpgrade");
		
		UFLGeneral_IsDefaultUpgrade_Params params {};
		params.UpgradeID = UpgradeID;
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsConditionsPassed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UPRCondition*>                        Conditions                                                 (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsConditionsPassed(TArray<class UPRCondition*> Conditions)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsConditionsPassed");
		
		UFLGeneral_IsConditionsPassed_Params params {};
		params.Conditions = Conditions;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsComponentBoundsIntersect
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPrimitiveComponent*                         ComponentA                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         ComponentB                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsComponentBoundsIntersect(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsComponentBoundsIntersect");
		
		UFLGeneral_IsComponentBoundsIntersect_Params params {};
		params.ComponentA = ComponentA;
		params.ComponentB = ComponentB;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsCommandLine
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      ParameterName                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsCommandLine(const class FString& ParameterName)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsCommandLine");
		
		UFLGeneral_IsCommandLine_Params params {};
		params.ParameterName = ParameterName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsActorInLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsActorInLevel(class AActor* Actor, const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsActorInLevel");
		
		UFLGeneral_IsActorInLevel_Params params {};
		params.Actor = Actor;
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.IsActorInCurrentLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::IsActorInCurrentLevel(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.IsActorInCurrentLevel");
		
		UFLGeneral_IsActorInCurrentLevel_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.HasUnseenPassedTutorials
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::HasUnseenPassedTutorials()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.HasUnseenPassedTutorials");
		
		UFLGeneral_HasUnseenPassedTutorials_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.HasPassedTutorials
	 * 		Flags  -> ()
	 */
	bool UFLGeneral::HasPassedTutorials()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.HasPassedTutorials");
		
		UFLGeneral_HasPassedTutorials_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetTrueMin
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FMinMaxFloat                                MinMax                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	float UFLGeneral::GetTrueMin(const struct FMinMaxFloat& MinMax)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetTrueMin");
		
		UFLGeneral_GetTrueMin_Params params {};
		params.MinMax = MinMax;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetTrueMax
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FMinMaxFloat                                MinMax                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	float UFLGeneral::GetTrueMax(const struct FMinMaxFloat& MinMax)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetTrueMax");
		
		UFLGeneral_GetTrueMax_Params params {};
		params.MinMax = MinMax;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetTimeStringFromSeconds
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            TotalSeconds                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bNoSeconds                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      String                                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::GetTimeStringFromSeconds(int32_t TotalSeconds, bool bNoSeconds, class FString* String)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetTimeStringFromSeconds");
		
		UFLGeneral_GetTimeStringFromSeconds_Params params {};
		params.TotalSeconds = TotalSeconds;
		params.bNoSeconds = bNoSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (String != nullptr)
			*String = params.String;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetTimeSpentString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            TotalMinutes                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      String                                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::GetTimeSpentString(int32_t TotalMinutes, class FString* String)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetTimeSpentString");
		
		UFLGeneral_GetTimeSpentString_Params params {};
		params.TotalMinutes = TotalMinutes;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (String != nullptr)
			*String = params.String;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetStreamingLevelNameFromActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FName UFLGeneral::GetStreamingLevelNameFromActor(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetStreamingLevelNameFromActor");
		
		UFLGeneral_GetStreamingLevelNameFromActor_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetSignedAngle
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Normal                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     v1                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     v2                                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UFLGeneral::GetSignedAngle(const struct FVector& Normal, const struct FVector& v1, const struct FVector& v2)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetSignedAngle");
		
		UFLGeneral_GetSignedAngle_Params params {};
		params.Normal = Normal;
		params.v1 = v1;
		params.v2 = v2;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetRelativeTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FTransform UFLGeneral::GetRelativeTransform(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetRelativeTransform");
		
		UFLGeneral_GetRelativeTransform_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetRandomInt
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FMinMaxInt                                  MinMax                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	int32_t UFLGeneral::GetRandomInt(const struct FMinMaxInt& MinMax)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetRandomInt");
		
		UFLGeneral_GetRandomInt_Params params {};
		params.MinMax = MinMax;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetRandomFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FMinMaxFloat                                MinMax                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	float UFLGeneral::GetRandomFloat(const struct FMinMaxFloat& MinMax)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetRandomFloat");
		
		UFLGeneral_GetRandomFloat_Params params {};
		params.MinMax = MinMax;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetPSOTasksRemaining
	 * 		Flags  -> ()
	 */
	int32_t UFLGeneral::GetPSOTasksRemaining()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetPSOTasksRemaining");
		
		UFLGeneral_GetPSOTasksRemaining_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetPRPlayerPawn
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APawn*                                       PRPlayerPawn                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::GetPRPlayerPawn(class UObject* WorldContextObject, class APawn** PRPlayerPawn)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetPRPlayerPawn");
		
		UFLGeneral_GetPRPlayerPawn_Params params {};
		params.WorldContextObject = WorldContextObject;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (PRPlayerPawn != nullptr)
			*PRPlayerPawn = params.PRPlayerPawn;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetParentClass
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UClass*                                      Class                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UClass* UFLGeneral::GetParentClass(class UClass* Class)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetParentClass");
		
		UFLGeneral_GetParentClass_Params params {};
		params.Class = Class;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetObjectParentClass
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UClass* UFLGeneral::GetObjectParentClass(class UObject* Object)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetObjectParentClass");
		
		UFLGeneral_GetObjectParentClass_Params params {};
		params.Object = Object;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetObjectFName
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     Object                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FName UFLGeneral::GetObjectFName(class UObject* Object)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetObjectFName");
		
		UFLGeneral_GetObjectFName_Params params {};
		params.Object = Object;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetNewNoteMarker
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UFLGeneral::GetNewNoteMarker(const struct FGameplayTag& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetNewNoteMarker");
		
		UFLGeneral_GetNewNoteMarker_Params params {};
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetNecessaryTutorialConfig
	 * 		Flags  -> ()
	 */
	struct FTutorialConfig UFLGeneral::GetNecessaryTutorialConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetNecessaryTutorialConfig");
		
		UFLGeneral_GetNecessaryTutorialConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetMapLevelTag
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::GetMapLevelTag(class UObject* WorldContextObject, struct FGameplayTag* LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetMapLevelTag");
		
		UFLGeneral_GetMapLevelTag_Params params {};
		params.WorldContextObject = WorldContextObject;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (LevelTag != nullptr)
			*LevelTag = params.LevelTag;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetLevelByName
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      LevelName                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::GetLevelByName(const class FString& LevelName, struct FGameplayTag* LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetLevelByName");
		
		UFLGeneral_GetLevelByName_Params params {};
		params.LevelName = LevelName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (LevelTag != nullptr)
			*LevelTag = params.LevelTag;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetLevelBounds
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class ULevel*                                      TargetLevel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     LevelLocation                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FBox UFLGeneral::GetLevelBounds(class ULevel* TargetLevel, struct FVector* LevelLocation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetLevelBounds");
		
		UFLGeneral_GetLevelBounds_Params params {};
		params.TargetLevel = TargetLevel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (LevelLocation != nullptr)
			*LevelLocation = params.LevelLocation;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetGamePurchaseDate
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FDateTime                                   PurchaseDate                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      PurchaseDateString                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::GetGamePurchaseDate(struct FDateTime* PurchaseDate, class FString* PurchaseDateString)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetGamePurchaseDate");
		
		UFLGeneral_GetGamePurchaseDate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (PurchaseDate != nullptr)
			*PurchaseDate = params.PurchaseDate;
		if (PurchaseDateString != nullptr)
			*PurchaseDateString = params.PurchaseDateString;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetDateTimeString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FDateTime                                   DateTime                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      String                                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::GetDateTimeString(const struct FDateTime& DateTime, class FString* String)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetDateTimeString");
		
		UFLGeneral_GetDateTimeString_Params params {};
		params.DateTime = DateTime;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (String != nullptr)
			*String = params.String;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetAttackFromPawn
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class APawn*                                       Pawn                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UObject* UFLGeneral::GetAttackFromPawn(class APawn* Pawn)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetAttackFromPawn");
		
		UFLGeneral_GetAttackFromPawn_Params params {};
		params.Pawn = Pawn;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetAllSecondaryWeaponTags
	 * 		Flags  -> ()
	 */
	TArray<struct FGameplayTag> UFLGeneral::GetAllSecondaryWeaponTags()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetAllSecondaryWeaponTags");
		
		UFLGeneral_GetAllSecondaryWeaponTags_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetAllPrimaryWeaponTags
	 * 		Flags  -> ()
	 */
	TArray<struct FGameplayTag> UFLGeneral::GetAllPrimaryWeaponTags()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetAllPrimaryWeaponTags");
		
		UFLGeneral_GetAllPrimaryWeaponTags_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetAllCassetteTags
	 * 		Flags  -> ()
	 */
	TArray<struct FGameplayTag> UFLGeneral::GetAllCassetteTags()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetAllCassetteTags");
		
		UFLGeneral_GetAllCassetteTags_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetAllArtifactTags
	 * 		Flags  -> ()
	 */
	TArray<struct FGameplayTag> UFLGeneral::GetAllArtifactTags()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetAllArtifactTags");
		
		UFLGeneral_GetAllArtifactTags_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetActorLevelTag
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FGameplayTag UFLGeneral::GetActorLevelTag(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetActorLevelTag");
		
		UFLGeneral_GetActorLevelTag_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetActorLevelName
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UFLGeneral::GetActorLevelName(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetActorLevelName");
		
		UFLGeneral_GetActorLevelName_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GetActorHolderTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                holderID                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  RelativeTransform                                          (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::GetActorHolderTransform(class AActor* Actor, const struct FGameplayTag& holderID, bool* success, struct FTransform* RelativeTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GetActorHolderTransform");
		
		UFLGeneral_GetActorHolderTransform_Params params {};
		params.Actor = Actor;
		params.holderID = holderID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (RelativeTransform != nullptr)
			*RelativeTransform = params.RelativeTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.GameDefaultMap
	 * 		Flags  -> ()
	 */
	class FString UFLGeneral::GameDefaultMap()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.GameDefaultMap");
		
		UFLGeneral_GameDefaultMap_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.FindIndexOfTag
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FGameplayTag>                        Array                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		bool                                               bExact                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UFLGeneral::FindIndexOfTag(const struct FGameplayTag& Tag, TArray<struct FGameplayTag> Array, bool bExact)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.FindIndexOfTag");
		
		UFLGeneral_FindIndexOfTag_Params params {};
		params.Tag = Tag;
		params.Array = Array;
		params.bExact = bExact;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.FindDistanceAlongSplineClosestToLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USplineComponent*                            Spline                                                     (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UFLGeneral::FindDistanceAlongSplineClosestToLocation(class USplineComponent* Spline, const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.FindDistanceAlongSplineClosestToLocation");
		
		UFLGeneral_FindDistanceAlongSplineClosestToLocation_Params params {};
		params.Spline = Spline;
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.DifficultyTypeToString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EDifficultyType                                    DifficultyType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UFLGeneral::DifficultyTypeToString(EDifficultyType DifficultyType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.DifficultyTypeToString");
		
		UFLGeneral_DifficultyTypeToString_Params params {};
		params.DifficultyType = DifficultyType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.DifficultyToPreset
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRadiusGameDifficulty                       GameDifficulty                                             (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	EPRGameDifficultyPreset UFLGeneral::DifficultyToPreset(const struct FRadiusGameDifficulty& GameDifficulty)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.DifficultyToPreset");
		
		UFLGeneral_DifficultyToPreset_Params params {};
		params.GameDifficulty = GameDifficulty;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.DifficultyPresetToString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRGameDifficultyPreset                            DifficultyPreset                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UFLGeneral::DifficultyPresetToString(EPRGameDifficultyPreset DifficultyPreset)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.DifficultyPresetToString");
		
		UFLGeneral_DifficultyPresetToString_Params params {};
		params.DifficultyPreset = DifficultyPreset;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.DifficultiesToNames
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<EDifficultyType>                            Difficulties                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		TArray<class FText>                                Names                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		TArray<int32_t>                                    Indexes                                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::DifficultiesToNames(TArray<EDifficultyType> Difficulties, TArray<class FText>* Names, TArray<int32_t>* Indexes)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.DifficultiesToNames");
		
		UFLGeneral_DifficultiesToNames_Params params {};
		params.Difficulties = Difficulties;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Names != nullptr)
			*Names = params.Names;
		if (Indexes != nullptr)
			*Indexes = params.Indexes;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.ClearUnseenPassedTutorials
	 * 		Flags  -> ()
	 */
	void UFLGeneral::ClearUnseenPassedTutorials()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.ClearUnseenPassedTutorials");
		
		UFLGeneral_ClearUnseenPassedTutorials_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.CheckUniqueInstanceID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      UID                                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Prefix                                                     (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bOnlyIfEmpty                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLGeneral::CheckUniqueInstanceID(class UObject* WorldContextObject, class FString* UID, const class FString& Prefix, bool bOnlyIfEmpty)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.CheckUniqueInstanceID");
		
		UFLGeneral_CheckUniqueInstanceID_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.Prefix = Prefix;
		params.bOnlyIfEmpty = bOnlyIfEmpty;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (UID != nullptr)
			*UID = params.UID;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.CalcLocalBounds
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USceneComponent*                             Component                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector UFLGeneral::CalcLocalBounds(class USceneComponent* Component)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.CalcLocalBounds");
		
		UFLGeneral_CalcLocalBounds_Params params {};
		params.Component = Component;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.BlinkFloorSweepTest
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UCharacterMovementComponent*                 MovementComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class ACharacter*                                  CharacterOwner                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FHitResult                                  Hit                                                        (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     CapsuleLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     TraceStart                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     TraceEnd                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLGeneral::BlinkFloorSweepTest(class UCharacterMovementComponent* MovementComponent, class ACharacter* CharacterOwner, struct FHitResult* Hit, const struct FVector& CapsuleLocation, const struct FVector& TraceStart, const struct FVector& TraceEnd)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.BlinkFloorSweepTest");
		
		UFLGeneral_BlinkFloorSweepTest_Params params {};
		params.MovementComponent = MovementComponent;
		params.CharacterOwner = CharacterOwner;
		params.CapsuleLocation = CapsuleLocation;
		params.TraceStart = TraceStart;
		params.TraceEnd = TraceEnd;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Hit != nullptr)
			*Hit = params.Hit;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.AsArray
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTagContainer                       Container                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	TArray<struct FGameplayTag> UFLGeneral::AsArray(const struct FGameplayTagContainer& Container)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.AsArray");
		
		UFLGeneral_AsArray_Params params {};
		params.Container = Container;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.ApplyDifficultyModifiers
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FPRNPCInfo                                  NpcInfo                                                    (Parm, NativeAccessSpecifierPublic)
	 */
	struct FPRNPCInfo UFLGeneral::ApplyDifficultyModifiers(const struct FPRNPCInfo& NpcInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.ApplyDifficultyModifiers");
		
		UFLGeneral_ApplyDifficultyModifiers_Params params {};
		params.NpcInfo = NpcInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.AmmoContainerDataAsString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Prefix                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FAmmoContainerData                          AmmoContainerData                                          (Parm, NativeAccessSpecifierPublic)
	 */
	class FString UFLGeneral::AmmoContainerDataAsString(const class FString& Prefix, const struct FAmmoContainerData& AmmoContainerData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.AmmoContainerDataAsString");
		
		UFLGeneral_AmmoContainerDataAsString_Params params {};
		params.Prefix = Prefix;
		params.AmmoContainerData = AmmoContainerData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLGeneral.AddComponentToActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      BaseActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UClass*                                      AttachedComponent                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UActorComponent* UFLGeneral::AddComponentToActor(class AActor* BaseActor, class UClass* AttachedComponent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLGeneral.AddComponentToActor");
		
		UFLGeneral_AddComponentToActor_Params params {};
		params.BaseActor = BaseActor;
		params.AttachedComponent = AttachedComponent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLGeneral.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLGeneral::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLGeneral");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.OilVerticesAtLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMeshComponent*                        StaticMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     WorldLocation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              DrawSize                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::OilVerticesAtLocation(class UStaticMeshComponent* StaticMeshComponent, const struct FVector& WorldLocation, float DrawSize)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.OilVerticesAtLocation");
		
		UFLItems_OilVerticesAtLocation_Params params {};
		params.StaticMeshComponent = StaticMeshComponent;
		params.WorldLocation = WorldLocation;
		params.DrawSize = DrawSize;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.LightDetection
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USpotLightComponent*                         Spot                                                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::LightDetection(class USpotLightComponent* Spot)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.LightDetection");
		
		UFLItems_LightDetection_Params params {};
		params.Spot = Spot;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.IsWeaponItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLItems::IsWeaponItem(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.IsWeaponItem");
		
		UFLItems_IsWeaponItem_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.IsSimpleItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLItems::IsSimpleItem(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.IsSimpleItem");
		
		UFLItems_IsSimpleItem_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.IsItemActorCanBeTraded
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      itemActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLItems::IsItemActorCanBeTraded(class AActor* itemActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.IsItemActorCanBeTraded");
		
		UFLItems_IsItemActorCanBeTraded_Params params {};
		params.itemActor = itemActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.IsAmmoItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLItems::IsAmmoItem(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.IsAmmoItem");
		
		UFLItems_IsAmmoItem_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.IsAmmoContainerItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLItems::IsAmmoContainerItem(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.IsAmmoContainerItem");
		
		UFLItems_IsAmmoContainerItem_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetTotalPrice
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class AActor*>                              Actors                                                     (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsSelling                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UFLItems::GetTotalPrice(TArray<class AActor*> Actors, bool bIsSelling)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetTotalPrice");
		
		UFLItems_GetTotalPrice_Params params {};
		params.Actors = Actors;
		params.bIsSelling = bIsSelling;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetStatReliability
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              White                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Red                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Green                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            PercentChange                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bGood                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::GetStatReliability(class UInventoryItem* Item, float* White, float* Red, float* Green, int32_t* PercentChange, bool* bGood)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetStatReliability");
		
		UFLItems_GetStatReliability_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (White != nullptr)
			*White = params.White;
		if (Red != nullptr)
			*Red = params.Red;
		if (Green != nullptr)
			*Green = params.Green;
		if (PercentChange != nullptr)
			*PercentChange = params.PercentChange;
		if (bGood != nullptr)
			*bGood = params.bGood;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetStatRecoil
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              White                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Red                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Green                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            PercentChange                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bGood                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::GetStatRecoil(class UInventoryItem* Item, float* White, float* Red, float* Green, int32_t* PercentChange, bool* bGood)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetStatRecoil");
		
		UFLItems_GetStatRecoil_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (White != nullptr)
			*White = params.White;
		if (Red != nullptr)
			*Red = params.Red;
		if (Green != nullptr)
			*Green = params.Green;
		if (PercentChange != nullptr)
			*PercentChange = params.PercentChange;
		if (bGood != nullptr)
			*bGood = params.bGood;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetStatRatios
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EWeaponInfoParameter                               Parameter                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              White                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Red                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Green                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            PercentChange                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bGood                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::GetStatRatios(class UInventoryItem* Item, EWeaponInfoParameter Parameter, float* White, float* Red, float* Green, int32_t* PercentChange, bool* bGood)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetStatRatios");
		
		UFLItems_GetStatRatios_Params params {};
		params.Item = Item;
		params.Parameter = Parameter;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (White != nullptr)
			*White = params.White;
		if (Red != nullptr)
			*Red = params.Red;
		if (Green != nullptr)
			*Green = params.Green;
		if (PercentChange != nullptr)
			*PercentChange = params.PercentChange;
		if (bGood != nullptr)
			*bGood = params.bGood;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetStatFireRate
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              White                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Red                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Green                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            PercentChange                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bGood                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::GetStatFireRate(class UInventoryItem* Item, float* White, float* Red, float* Green, int32_t* PercentChange, bool* bGood)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetStatFireRate");
		
		UFLItems_GetStatFireRate_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (White != nullptr)
			*White = params.White;
		if (Red != nullptr)
			*Red = params.Red;
		if (Green != nullptr)
			*Green = params.Green;
		if (PercentChange != nullptr)
			*PercentChange = params.PercentChange;
		if (bGood != nullptr)
			*bGood = params.bGood;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetStatDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              White                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Red                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Green                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            PercentChange                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bGood                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::GetStatDamage(class UInventoryItem* Item, float* White, float* Red, float* Green, int32_t* PercentChange, bool* bGood)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetStatDamage");
		
		UFLItems_GetStatDamage_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (White != nullptr)
			*White = params.White;
		if (Red != nullptr)
			*Red = params.Red;
		if (Green != nullptr)
			*Green = params.Green;
		if (PercentChange != nullptr)
			*PercentChange = params.PercentChange;
		if (bGood != nullptr)
			*bGood = params.bGood;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetStatAccuracy
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              White                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Red                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Green                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            PercentChange                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bGood                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::GetStatAccuracy(class UInventoryItem* Item, float* White, float* Red, float* Green, int32_t* PercentChange, bool* bGood)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetStatAccuracy");
		
		UFLItems_GetStatAccuracy_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (White != nullptr)
			*White = params.White;
		if (Red != nullptr)
			*Red = params.Red;
		if (Green != nullptr)
			*Green = params.Green;
		if (PercentChange != nullptr)
			*PercentChange = params.PercentChange;
		if (bGood != nullptr)
			*bGood = params.bGood;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetSellPrice
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      itemActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIgnoreIfAttached                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bItemOnly                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UFLItems::GetSellPrice(class AActor* itemActor, bool bIgnoreIfAttached, bool bItemOnly)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetSellPrice");
		
		UFLItems_GetSellPrice_Params params {};
		params.itemActor = itemActor;
		params.bIgnoreIfAttached = bIgnoreIfAttached;
		params.bItemOnly = bItemOnly;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetRepairTime
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      itemActor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               ignoreIfAttached                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UFLItems::GetRepairTime(class AActor* itemActor, bool ignoreIfAttached)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetRepairTime");
		
		UFLItems_GetRepairTime_Params params {};
		params.itemActor = itemActor;
		params.ignoreIfAttached = ignoreIfAttached;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetRepairPrice
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      itemActor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               ignoreIfAttached                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UFLItems::GetRepairPrice(class AActor* itemActor, bool ignoreIfAttached)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetRepairPrice");
		
		UFLItems_GetRepairPrice_Params params {};
		params.itemActor = itemActor;
		params.ignoreIfAttached = ignoreIfAttached;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetItemClass
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UClass*                                      itemClass                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::GetItemClass(class UInventoryItem* Item, class UClass** itemClass)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetItemClass");
		
		UFLItems_GetItemClass_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (itemClass != nullptr)
			*itemClass = params.itemClass;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetCleanableMeshes
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMaterial*                                   ComparisonMaterial                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UStaticMeshComponent*>                outMeshes                                                  (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 * 		int32_t                                            outCleanbleVertices                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLItems::GetCleanableMeshes(class AActor* Actor, class UMaterial* ComparisonMaterial, TArray<class UStaticMeshComponent*>* outMeshes, int32_t* outCleanbleVertices)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetCleanableMeshes");
		
		UFLItems_GetCleanableMeshes_Params params {};
		params.Actor = Actor;
		params.ComparisonMaterial = ComparisonMaterial;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (outMeshes != nullptr)
			*outMeshes = params.outMeshes;
		if (outCleanbleVertices != nullptr)
			*outCleanbleVertices = params.outCleanbleVertices;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.GetActorAssociatedName
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FText UFLItems::GetActorAssociatedName(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.GetActorAssociatedName");
		
		UFLItems_GetActorAssociatedName_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.CreateConfig
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      UID                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UPRItemConfig* UFLItems::CreateConfig(const struct FGameplayTag& ItemTag, const class FString& UID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.CreateConfig");
		
		UFLItems_CreateConfig_Params params {};
		params.ItemTag = ItemTag;
		params.UID = UID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.ConstructItemFromConfig
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPRItemConfig*                               Config                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<class UInventoryItem*> UFLItems::ConstructItemFromConfig(class UPRItemConfig* Config)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.ConstructItemFromConfig");
		
		UFLItems_ConstructItemFromConfig_Params params {};
		params.Config = Config;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.ConstructDefaultItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      CustomUID                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FGameplayTag>                        AdditionalTags                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                holderID                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              DurabilityRatio                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UInventoryItem* UFLItems::ConstructDefaultItem(const struct FGameplayTag& Tag, const class FString& CustomUID, TArray<struct FGameplayTag> AdditionalTags, const struct FGameplayTag& holderID, float DurabilityRatio)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.ConstructDefaultItem");
		
		UFLItems_ConstructDefaultItem_Params params {};
		params.Tag = Tag;
		params.CustomUID = CustomUID;
		params.AdditionalTags = AdditionalTags;
		params.holderID = holderID;
		params.DurabilityRatio = DurabilityRatio;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.ConstructActorItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      CustomUID                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FGameplayTag>                        AdditionalTags                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		float                                              DurabilityRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UInventoryItem* UFLItems::ConstructActorItem(class AActor* Actor, const class FString& CustomUID, TArray<struct FGameplayTag> AdditionalTags, float DurabilityRatio)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.ConstructActorItem");
		
		UFLItems_ConstructActorItem_Params params {};
		params.Actor = Actor;
		params.CustomUID = CustomUID;
		params.AdditionalTags = AdditionalTags;
		params.DurabilityRatio = DurabilityRatio;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.CloneInventoryItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      CustomID                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UInventoryItem* UFLItems::CloneInventoryItem(class UInventoryItem* Item, const class FString& CustomID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.CloneInventoryItem");
		
		UFLItems_CloneInventoryItem_Params params {};
		params.Item = Item;
		params.CustomID = CustomID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLItems.CleanVerticesAtLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMeshComponent*                        StaticMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     WorldLocation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              DrawSize                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UFLItems::CleanVerticesAtLocation(class UStaticMeshComponent* StaticMeshComponent, const struct FVector& WorldLocation, float DrawSize)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLItems.CleanVerticesAtLocation");
		
		UFLItems_CleanVerticesAtLocation_Params params {};
		params.StaticMeshComponent = StaticMeshComponent;
		params.WorldLocation = WorldLocation;
		params.DrawSize = DrawSize;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLItems.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLItems::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLItems");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchWorldDumpLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchWorldDumpLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchWorldDumpLogs");
		
		UFLLogs_SwitchWorldDumpLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchSpawnerLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchSpawnerLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchSpawnerLogs");
		
		UFLLogs_SwitchSpawnerLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchSpawnerDebug
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchSpawnerDebug()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchSpawnerDebug");
		
		UFLLogs_SwitchSpawnerDebug_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchSingletonsLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchSingletonsLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchSingletonsLogs");
		
		UFLLogs_SwitchSingletonsLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchSavesLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchSavesLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchSavesLogs");
		
		UFLLogs_SwitchSavesLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchPoolLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchPoolLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchPoolLogs");
		
		UFLLogs_SwitchPoolLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchLootTablesLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchLootTablesLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchLootTablesLogs");
		
		UFLLogs_SwitchLootTablesLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchLogsEnabled
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchLogsEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchLogsEnabled");
		
		UFLLogs_SwitchLogsEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchLevelsLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchLevelsLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchLevelsLogs");
		
		UFLLogs_SwitchLevelsLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchInventoryLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchInventoryLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchInventoryLogs");
		
		UFLLogs_SwitchInventoryLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchINILogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchINILogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchINILogs");
		
		UFLLogs_SwitchINILogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchGameReferencesLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchGameReferencesLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchGameReferencesLogs");
		
		UFLLogs_SwitchGameReferencesLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchGameModeLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchGameModeLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchGameModeLogs");
		
		UFLLogs_SwitchGameModeLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchGameDataLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchGameDataLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchGameDataLogs");
		
		UFLLogs_SwitchGameDataLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchDetailedEventsLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchDetailedEventsLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchDetailedEventsLogs");
		
		UFLLogs_SwitchDetailedEventsLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchDataParsingLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchDataParsingLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchDataParsingLogs");
		
		UFLLogs_SwitchDataParsingLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchConditionsLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchConditionsLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchConditionsLogs");
		
		UFLLogs_SwitchConditionsLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchClusterLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchClusterLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchClusterLogs");
		
		UFLLogs_SwitchClusterLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.SwitchBasicActorLogs
	 * 		Flags  -> ()
	 */
	void UFLLogs::SwitchBasicActorLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.SwitchBasicActorLogs");
		
		UFLLogs_SwitchBasicActorLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PRLogStacktrace
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Warning                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLLogs::PRLogStacktrace(bool Warning, const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PRLogStacktrace");
		
		UFLLogs_PRLogStacktrace_Params params {};
		params.Warning = Warning;
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PRLogNormal
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLLogs::PRLogNormal(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PRLogNormal");
		
		UFLLogs_PRLogNormal_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PRLogLines
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLLogs::PRLogLines(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PRLogLines");
		
		UFLLogs_PRLogLines_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PRLogError
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLLogs::PRLogError(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PRLogError");
		
		UFLLogs_PRLogError_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PRLogBanner
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Symbol                                                     (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Message                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLLogs::PRLogBanner(const class FString& Symbol, const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PRLogBanner");
		
		UFLLogs_PRLogBanner_Params params {};
		params.Symbol = Symbol;
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintWorldDumpLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintWorldDumpLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintWorldDumpLogs");
		
		UFLLogs_PrintWorldDumpLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintWorldDump
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLLogs::PrintWorldDump(class UObject* WorldContextObject)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintWorldDump");
		
		UFLLogs_PrintWorldDump_Params params {};
		params.WorldContextObject = WorldContextObject;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintSpawnerLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintSpawnerLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintSpawnerLogs");
		
		UFLLogs_PrintSpawnerLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintSingletonsLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintSingletonsLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintSingletonsLogs");
		
		UFLLogs_PrintSingletonsLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintSavesLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintSavesLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintSavesLogs");
		
		UFLLogs_PrintSavesLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintPoolLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintPoolLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintPoolLogs");
		
		UFLLogs_PrintPoolLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintNPCDump
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLLogs::PrintNPCDump(class UObject* WorldContextObject)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintNPCDump");
		
		UFLLogs_PrintNPCDump_Params params {};
		params.WorldContextObject = WorldContextObject;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintMissionsDataDump
	 * 		Flags  -> ()
	 */
	void UFLLogs::PrintMissionsDataDump()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintMissionsDataDump");
		
		UFLLogs_PrintMissionsDataDump_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintLootTablesLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintLootTablesLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintLootTablesLogs");
		
		UFLLogs_PrintLootTablesLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintLevelsLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintLevelsLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintLevelsLogs");
		
		UFLLogs_PrintLevelsLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintInventoryLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintInventoryLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintInventoryLogs");
		
		UFLLogs_PrintInventoryLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintInventoryDataDump
	 * 		Flags  -> ()
	 */
	void UFLLogs::PrintInventoryDataDump()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintInventoryDataDump");
		
		UFLLogs_PrintInventoryDataDump_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintINILogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintINILogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintINILogs");
		
		UFLLogs_PrintINILogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintGameReferencesLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintGameReferencesLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintGameReferencesLogs");
		
		UFLLogs_PrintGameReferencesLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintGameModeLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintGameModeLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintGameModeLogs");
		
		UFLLogs_PrintGameModeLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintGameDataLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintGameDataLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintGameDataLogs");
		
		UFLLogs_PrintGameDataLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintGameDataDump
	 * 		Flags  -> ()
	 */
	void UFLLogs::PrintGameDataDump()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintGameDataDump");
		
		UFLLogs_PrintGameDataDump_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintDetailedEventsLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintDetailedEventsLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintDetailedEventsLogs");
		
		UFLLogs_PrintDetailedEventsLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintDataParsingLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintDataParsingLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintDataParsingLogs");
		
		UFLLogs_PrintDataParsingLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintConditionsLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintConditionsLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintConditionsLogs");
		
		UFLLogs_PrintConditionsLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintClusterLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintClusterLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintClusterLogs");
		
		UFLLogs_PrintClusterLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.PrintBasicActorLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::PrintBasicActorLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.PrintBasicActorLogs");
		
		UFLLogs_PrintBasicActorLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.LogsEnabled
	 * 		Flags  -> ()
	 */
	bool UFLLogs::LogsEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.LogsEnabled");
		
		UFLLogs_LogsEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.IsEnabledTeleportDebug
	 * 		Flags  -> ()
	 */
	bool UFLLogs::IsEnabledTeleportDebug()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.IsEnabledTeleportDebug");
		
		UFLLogs_IsEnabledTeleportDebug_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.IsEnabledPlayerStatsLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::IsEnabledPlayerStatsLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.IsEnabledPlayerStatsLogs");
		
		UFLLogs_IsEnabledPlayerStatsLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.IsEnabledAnomaliesLogs
	 * 		Flags  -> ()
	 */
	bool UFLLogs::IsEnabledAnomaliesLogs()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.IsEnabledAnomaliesLogs");
		
		UFLLogs_IsEnabledAnomaliesLogs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.GetTeleportDebugTime
	 * 		Flags  -> ()
	 */
	float UFLLogs::GetTeleportDebugTime()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.GetTeleportDebugTime");
		
		UFLLogs_GetTeleportDebugTime_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLLogs.DrawSpawnerDebug
	 * 		Flags  -> ()
	 */
	bool UFLLogs::DrawSpawnerDebug()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLLogs.DrawSpawnerDebug");
		
		UFLLogs_DrawSpawnerDebug_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLLogs.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLLogs::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLLogs");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLMissionData.SetString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionConfigId                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Value                                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLMissionData::SetString(const struct FGameplayTag& MissionConfigId, const class FString& Key, const class FString& Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLMissionData.SetString");
		
		UFLMissionData_SetString_Params params {};
		params.MissionConfigId = MissionConfigId;
		params.Key = Key;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLMissionData.SetInt
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionConfigId                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLMissionData::SetInt(const struct FGameplayTag& MissionConfigId, const class FString& Key, int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLMissionData.SetInt");
		
		UFLMissionData_SetInt_Params params {};
		params.MissionConfigId = MissionConfigId;
		params.Key = Key;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLMissionData.SetFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionConfigId                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLMissionData::SetFloat(const struct FGameplayTag& MissionConfigId, const class FString& Key, float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLMissionData.SetFloat");
		
		UFLMissionData_SetFloat_Params params {};
		params.MissionConfigId = MissionConfigId;
		params.Key = Key;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLMissionData.SetBool
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionConfigId                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLMissionData::SetBool(const struct FGameplayTag& MissionConfigId, const class FString& Key, bool Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLMissionData.SetBool");
		
		UFLMissionData_SetBool_Params params {};
		params.MissionConfigId = MissionConfigId;
		params.Key = Key;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLMissionData.GetString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionConfigId                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Value                                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsSet                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLMissionData::GetString(const struct FGameplayTag& MissionConfigId, const class FString& Key, class FString* Value, bool* IsSet)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLMissionData.GetString");
		
		UFLMissionData_GetString_Params params {};
		params.MissionConfigId = MissionConfigId;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Value != nullptr)
			*Value = params.Value;
		if (IsSet != nullptr)
			*IsSet = params.IsSet;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLMissionData.GetInt
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionConfigId                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Value                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsSet                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLMissionData::GetInt(const struct FGameplayTag& MissionConfigId, const class FString& Key, int32_t* Value, bool* IsSet)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLMissionData.GetInt");
		
		UFLMissionData_GetInt_Params params {};
		params.MissionConfigId = MissionConfigId;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Value != nullptr)
			*Value = params.Value;
		if (IsSet != nullptr)
			*IsSet = params.IsSet;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLMissionData.GetFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionConfigId                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Value                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsSet                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLMissionData::GetFloat(const struct FGameplayTag& MissionConfigId, const class FString& Key, float* Value, bool* IsSet)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLMissionData.GetFloat");
		
		UFLMissionData_GetFloat_Params params {};
		params.MissionConfigId = MissionConfigId;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Value != nullptr)
			*Value = params.Value;
		if (IsSet != nullptr)
			*IsSet = params.IsSet;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLMissionData.GetBool
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionConfigId                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Value                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsSet                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLMissionData::GetBool(const struct FGameplayTag& MissionConfigId, const class FString& Key, bool* Value, bool* IsSet)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLMissionData.GetBool");
		
		UFLMissionData_GetBool_Params params {};
		params.MissionConfigId = MissionConfigId;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Value != nullptr)
			*Value = params.Value;
		if (IsSet != nullptr)
			*IsSet = params.IsSet;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLMissionData.CleanUp
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionConfigId                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLMissionData::CleanUp(const struct FGameplayTag& MissionConfigId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLMissionData.CleanUp");
		
		UFLMissionData_CleanUp_Params params {};
		params.MissionConfigId = MissionConfigId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLMissionData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLMissionData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLMissionData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPhysics.ToggleSimulatePhysics
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bState                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UPrimitiveComponent* UFLPhysics::ToggleSimulatePhysics(class AActor* Actor, bool bState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPhysics.ToggleSimulatePhysics");
		
		UFLPhysics_ToggleSimulatePhysics_Params params {};
		params.Actor = Actor;
		params.bState = bState;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLPhysics.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLPhysics::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLPhysics");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.IsVRControllerDefault
	 * 		Flags  -> ()
	 */
	bool UFLPlatform::IsVRControllerDefault()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.IsVRControllerDefault");
		
		UFLPlatform_IsVRControllerDefault_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.IsNativeOculus
	 * 		Flags  -> ()
	 */
	bool UFLPlatform::IsNativeOculus()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.IsNativeOculus");
		
		UFLPlatform_IsNativeOculus_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.HasVRFocus
	 * 		Flags  -> ()
	 */
	bool UFLPlatform::HasVRFocus()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.HasVRFocus");
		
		UFLPlatform_HasVRFocus_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetVRControllerType
	 * 		Flags  -> ()
	 */
	EPRControllerType UFLPlatform::GetVRControllerType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetVRControllerType");
		
		UFLPlatform_GetVRControllerType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetPlatformTypeString
	 * 		Flags  -> ()
	 */
	class FString UFLPlatform::GetPlatformTypeString()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetPlatformTypeString");
		
		UFLPlatform_GetPlatformTypeString_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetPlatformType
	 * 		Flags  -> ()
	 */
	EPRPlatformType UFLPlatform::GetPlatformType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetPlatformType");
		
		UFLPlatform_GetPlatformType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetHMDDeviceType
	 * 		Flags  -> ()
	 */
	EPRHmdDeviceType UFLPlatform::GetHMDDeviceType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetHMDDeviceType");
		
		UFLPlatform_GetHMDDeviceType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetGPUBrandName
	 * 		Flags  -> ()
	 */
	class FString UFLPlatform::GetGPUBrandName()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetGPUBrandName");
		
		UFLPlatform_GetGPUBrandName_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetFingerCurls
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHand                                            hand                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FFingerCurls                                FingerCurls                                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UFLPlatform::GetFingerCurls(EPRHand hand, struct FFingerCurls* FingerCurls)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetFingerCurls");
		
		UFLPlatform_GetFingerCurls_Params params {};
		params.hand = hand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (FingerCurls != nullptr)
			*FingerCurls = params.FingerCurls;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetDefaultControllerType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHmdDeviceType                                   HMDDevice                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	EPRControllerType UFLPlatform::GetDefaultControllerType(EPRHmdDeviceType HMDDevice)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetDefaultControllerType");
		
		UFLPlatform_GetDefaultControllerType_Params params {};
		params.HMDDevice = HMDDevice;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetCurlsAndSplaysState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               LeftHandState                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               RightHandState                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLPlatform::GetCurlsAndSplaysState(bool* LeftHandState, bool* RightHandState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetCurlsAndSplaysState");
		
		UFLPlatform_GetCurlsAndSplaysState_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (LeftHandState != nullptr)
			*LeftHandState = params.LeftHandState;
		if (RightHandState != nullptr)
			*RightHandState = params.RightHandState;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetCPUVendorName
	 * 		Flags  -> ()
	 */
	class FString UFLPlatform::GetCPUVendorName()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetCPUVendorName");
		
		UFLPlatform_GetCPUVendorName_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLPlatform.GetCPUBrandName
	 * 		Flags  -> ()
	 */
	class FString UFLPlatform::GetCPUBrandName()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLPlatform.GetCPUBrandName");
		
		UFLPlatform_GetCPUBrandName_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLPlatform.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLPlatform::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLPlatform");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.TrimFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              In                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Digits                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UFLProject::TrimFloat(float In, int32_t Digits)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.TrimFloat");
		
		UFLProject_TrimFloat_Params params {};
		params.In = In;
		params.Digits = Digits;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.RoundVector
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     In                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Digits                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector UFLProject::RoundVector(const struct FVector& In, int32_t Digits)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.RoundVector");
		
		UFLProject_RoundVector_Params params {};
		params.In = In;
		params.Digits = Digits;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.RoundTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  In                                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	struct FTransform UFLProject::RoundTransform(const struct FTransform& In)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.RoundTransform");
		
		UFLProject_RoundTransform_Params params {};
		params.In = In;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.RoundRotator
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRotator                                    In                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Digits                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FRotator UFLProject::RoundRotator(const struct FRotator& In, int32_t Digits)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.RoundRotator");
		
		UFLProject_RoundRotator_Params params {};
		params.In = In;
		params.Digits = Digits;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.RoundFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              In                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Digits                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UFLProject::RoundFloat(float In, int32_t Digits)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.RoundFloat");
		
		UFLProject_RoundFloat_Params params {};
		params.In = In;
		params.Digits = Digits;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.Negative
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              In                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UFLProject::Negative(float In)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.Negative");
		
		UFLProject_Negative_Params params {};
		params.In = In;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.NativeSortObjectsByDistance
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UObject*>                             inArray                                                    (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      DistanceFromActor                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<class UObject*> UFLProject::NativeSortObjectsByDistance(TArray<class UObject*> inArray, class AActor* DistanceFromActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.NativeSortObjectsByDistance");
		
		UFLProject_NativeSortObjectsByDistance_Params params {};
		params.inArray = inArray;
		params.DistanceFromActor = DistanceFromActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.IsInputEnabledAndNotSimulation
	 * 		Flags  -> ()
	 */
	bool UFLProject::IsInputEnabledAndNotSimulation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.IsInputEnabledAndNotSimulation");
		
		UFLProject_IsInputEnabledAndNotSimulation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.GetSpawnPoint
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     nearby                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              InRadius                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               reachable                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     OutPoint                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLProject::GetSpawnPoint(const struct FVector& nearby, float InRadius, bool reachable, struct FVector* OutPoint)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.GetSpawnPoint");
		
		UFLProject_GetSpawnPoint_Params params {};
		params.nearby = nearby;
		params.InRadius = InRadius;
		params.reachable = reachable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (OutPoint != nullptr)
			*OutPoint = params.OutPoint;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.GetReachablePointNotVisibleToPlayer
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class APawn*                                       PlayerPawn                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APawn*                                       NPC                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              MinDistFromPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              SearchRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            NumAttempts                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     OutPoint                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLProject::GetReachablePointNotVisibleToPlayer(class APawn* PlayerPawn, class APawn* NPC, float MinDistFromPlayer, float SearchRadius, int32_t NumAttempts, struct FVector* OutPoint)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.GetReachablePointNotVisibleToPlayer");
		
		UFLProject_GetReachablePointNotVisibleToPlayer_Params params {};
		params.PlayerPawn = PlayerPawn;
		params.NPC = NPC;
		params.MinDistFromPlayer = MinDistFromPlayer;
		params.SearchRadius = SearchRadius;
		params.NumAttempts = NumAttempts;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (OutPoint != nullptr)
			*OutPoint = params.OutPoint;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.GetNavigablePointBehindPlayer
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class APawn*                                       PlayerPawn                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              MinDistFromPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              SearchRadius                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     OutPoint                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLProject::GetNavigablePointBehindPlayer(class APawn* PlayerPawn, float MinDistFromPlayer, float SearchRadius, struct FVector* OutPoint)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.GetNavigablePointBehindPlayer");
		
		UFLProject_GetNavigablePointBehindPlayer_Params params {};
		params.PlayerPawn = PlayerPawn;
		params.MinDistFromPlayer = MinDistFromPlayer;
		params.SearchRadius = SearchRadius;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (OutPoint != nullptr)
			*OutPoint = params.OutPoint;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.GetGripRelativeTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     GripObject                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              handController                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  outGripRelativeTransform                                   (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	bool UFLProject::GetGripRelativeTransform(class UObject* GripObject, class UGripMotionControllerComponent* handController, EPRHandPoseType poseType, struct FTransform* outGripRelativeTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.GetGripRelativeTransform");
		
		UFLProject_GetGripRelativeTransform_Params params {};
		params.GripObject = GripObject;
		params.handController = handController;
		params.poseType = poseType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (outGripRelativeTransform != nullptr)
			*outGripRelativeTransform = params.outGripRelativeTransform;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLProject.GetGripObjectActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Actor                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLProject::GetGripObjectActor(class UObject* Object, class AActor** Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLProject.GetGripObjectActor");
		
		UFLProject_GetGripObjectActor_Params params {};
		params.Object = Object;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Actor != nullptr)
			*Actor = params.Actor;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLProject.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLProject::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLProject");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnNPC
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FNpcSpawnInfo                               NpcSpawnInfo                                               (ConstParm, Parm, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnNPC(class UObject* WorldContextObject, const struct FNpcSpawnInfo& NpcSpawnInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnNPC");
		
		UFLSpawn_SpawnNPC_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.NpcSpawnInfo = NpcSpawnInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnNiagaraEmitter
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FRadiusNiagaraEmitterInfo                   Info                                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnNiagaraEmitter(const struct FTransform& Transform, const struct FRadiusNiagaraEmitterInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnNiagaraEmitter");
		
		UFLSpawn_SpawnNiagaraEmitter_Params params {};
		params.Transform = Transform;
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnItemByType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                ItemTypeID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      InstanceId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bProjectOnGround                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSimulatePhysics                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnItemByType(class UObject* WorldContextObject, const struct FGameplayTag& ItemTypeID, const class FString& InstanceId, const struct FTransform& Transform, bool bProjectOnGround, bool bSimulatePhysics)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnItemByType");
		
		UFLSpawn_SpawnItemByType_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.ItemTypeID = ItemTypeID;
		params.InstanceId = InstanceId;
		params.Transform = Transform;
		params.bProjectOnGround = bProjectOnGround;
		params.bSimulatePhysics = bSimulatePhysics;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnItemByTag
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             ParentComponent                                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSnapToParent                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bPreConfigure                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      CustomID                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnItemByTag(class UObject* WorldContextObject, const struct FGameplayTag& Tag, class USceneComponent* ParentComponent, bool bSnapToParent, const struct FTransform& Transform, bool bPreConfigure, const class FString& CustomID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnItemByTag");
		
		UFLSpawn_SpawnItemByTag_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.Tag = Tag;
		params.ParentComponent = ParentComponent;
		params.bSnapToParent = bSnapToParent;
		params.Transform = Transform;
		params.bPreConfigure = bPreConfigure;
		params.CustomID = CustomID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnItemByInventoryItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bProjectOnGround                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSimulatePhysics                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnItemByInventoryItem(class UObject* WorldContextObject, class UInventoryItem* InventoryItem, const struct FTransform& Transform, bool bProjectOnGround, bool bSimulatePhysics)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnItemByInventoryItem");
		
		UFLSpawn_SpawnItemByInventoryItem_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.InventoryItem = InventoryItem;
		params.Transform = Transform;
		params.bProjectOnGround = bProjectOnGround;
		params.bSimulatePhysics = bSimulatePhysics;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FItemSpawnInfo                              ItemSpawnInfo                                              (ConstParm, Parm, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnItem(class UObject* WorldContextObject, const struct FItemSpawnInfo& ItemSpawnInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnItem");
		
		UFLSpawn_SpawnItem_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.ItemSpawnInfo = ItemSpawnInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnInventoryItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             ParentComponent                                            (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bKeepRelativeLocation                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSimulatePhysics                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnInventoryItem(class UObject* WorldContextObject, class UInventoryItem* InventoryItem, class USceneComponent* ParentComponent, bool bKeepRelativeLocation, bool bSimulatePhysics)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnInventoryItem");
		
		UFLSpawn_SpawnInventoryItem_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.InventoryItem = InventoryItem;
		params.ParentComponent = ParentComponent;
		params.bKeepRelativeLocation = bKeepRelativeLocation;
		params.bSimulatePhysics = bSimulatePhysics;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnImpactFromHit
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FHitResult                                  Hit                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 * 		float                                              ParticleScale                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              DecalScale                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Distance                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnImpactFromHit(class UObject* WorldContextObject, const struct FHitResult& Hit, float ParticleScale, float DecalScale, float Distance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnImpactFromHit");
		
		UFLSpawn_SpawnImpactFromHit_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.Hit = Hit;
		params.ParticleScale = ParticleScale;
		params.DecalScale = DecalScale;
		params.Distance = Distance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnImpact
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FRadiusImpactInfo                           Info                                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnImpact(const struct FTransform& Transform, const struct FRadiusImpactInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnImpact");
		
		UFLSpawn_SpawnImpact_Params params {};
		params.Transform = Transform;
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnEmitter
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FRadiusEmitterInfo                          Info                                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnEmitter(const struct FTransform& Transform, const struct FRadiusEmitterInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnEmitter");
		
		UFLSpawn_SpawnEmitter_Params params {};
		params.Transform = Transform;
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnBulletShell
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UClass*                                      ActorClass                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FRadiusFirearmShellInfo                     ShellInfo                                                  (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnBulletShell(class UClass* ActorClass, const struct FTransform& Transform, const struct FRadiusFirearmShellInfo& ShellInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnBulletShell");
		
		UFLSpawn_SpawnBulletShell_Params params {};
		params.ActorClass = ActorClass;
		params.Transform = Transform;
		params.ShellInfo = ShellInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnAnomaly
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FAnomalySpawnInfo                           AnomalySpawnInfo                                           (ConstParm, Parm, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnAnomaly(class UObject* WorldContextObject, const struct FAnomalySpawnInfo& AnomalySpawnInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnAnomaly");
		
		UFLSpawn_SpawnAnomaly_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.AnomalySpawnInfo = AnomalySpawnInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnActorWithTransformDeferred
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UClass*                                      ActorClass                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnActorWithTransformDeferred(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& Transform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnActorWithTransformDeferred");
		
		UFLSpawn_SpawnActorWithTransformDeferred_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.ActorClass = ActorClass;
		params.Transform = Transform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSpawn.SpawnActorWithIdentityTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UClass*                                      ActorClass                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bDeferred                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UFLSpawn::SpawnActorWithIdentityTransform(class UObject* WorldContextObject, class UClass* ActorClass, bool bDeferred)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSpawn.SpawnActorWithIdentityTransform");
		
		UFLSpawn_SpawnActorWithIdentityTransform_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.ActorClass = ActorClass;
		params.bDeferred = bDeferred;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLSpawn.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLSpawn::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLSpawn");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.SplitStaticMeshByMaterial
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      inputActor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<class AActor*> UFLStaticMeshSplitter::SplitStaticMeshByMaterial(class AActor* inputActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.SplitStaticMeshByMaterial");
		
		UFLStaticMeshSplitter_SplitStaticMeshByMaterial_Params params {};
		params.inputActor = inputActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.SetLodScreenSize
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMeshComponent*                        StaticMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            LODIndex                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              ScreenSize                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLStaticMeshSplitter::SetLodScreenSize(class UStaticMeshComponent* StaticMeshComponent, int32_t LODIndex, float ScreenSize)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.SetLodScreenSize");
		
		UFLStaticMeshSplitter_SetLodScreenSize_Params params {};
		params.StaticMeshComponent = StaticMeshComponent;
		params.LODIndex = LODIndex;
		params.ScreenSize = ScreenSize;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.SetLightMapResolution
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMeshComponent*                        StaticMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Resolution                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLStaticMeshSplitter::SetLightMapResolution(class UStaticMeshComponent* StaticMeshComponent, int32_t Resolution)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.SetLightMapResolution");
		
		UFLStaticMeshSplitter_SetLightMapResolution_Params params {};
		params.StaticMeshComponent = StaticMeshComponent;
		params.Resolution = Resolution;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.SetLightmapCoordinateIndex
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMesh*                                 StaticMesh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            coordinateIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLStaticMeshSplitter::SetLightmapCoordinateIndex(class UStaticMesh* StaticMesh, int32_t coordinateIndex)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.SetLightmapCoordinateIndex");
		
		UFLStaticMeshSplitter_SetLightmapCoordinateIndex_Params params {};
		params.StaticMesh = StaticMesh;
		params.coordinateIndex = coordinateIndex;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.SetCustomDataInTexcoord
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMeshComponent*                        StaticMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            textureCoordIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector2D                                   customData                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UFLStaticMeshSplitter::SetCustomDataInTexcoord(class UStaticMeshComponent* StaticMeshComponent, int32_t textureCoordIndex, const struct FVector2D& customData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.SetCustomDataInTexcoord");
		
		UFLStaticMeshSplitter_SetCustomDataInTexcoord_Params params {};
		params.StaticMeshComponent = StaticMeshComponent;
		params.textureCoordIndex = textureCoordIndex;
		params.customData = customData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.RemoveCollisionFromLodSections
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMeshComponent*                        StaticMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLStaticMeshSplitter::RemoveCollisionFromLodSections(class UStaticMeshComponent* StaticMeshComponent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.RemoveCollisionFromLodSections");
		
		UFLStaticMeshSplitter_RemoveCollisionFromLodSections_Params params {};
		params.StaticMeshComponent = StaticMeshComponent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.PackTintAndTextureIndex
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FLinearColor                                Tint                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            TextureIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector2D UFLStaticMeshSplitter::PackTintAndTextureIndex(const struct FLinearColor& Tint, int32_t TextureIndex)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.PackTintAndTextureIndex");
		
		UFLStaticMeshSplitter_PackTintAndTextureIndex_Params params {};
		params.Tint = Tint;
		params.TextureIndex = TextureIndex;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.CreateEmptyLod
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMeshComponent*                        StaticMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLStaticMeshSplitter::CreateEmptyLod(class UStaticMeshComponent* StaticMeshComponent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.CreateEmptyLod");
		
		UFLStaticMeshSplitter_CreateEmptyLod_Params params {};
		params.StaticMeshComponent = StaticMeshComponent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.CreateCopyOfExistingLod
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMeshComponent*                        StaticMeshComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            sourceLodIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLStaticMeshSplitter::CreateCopyOfExistingLod(class UStaticMeshComponent* StaticMeshComponent, int32_t sourceLodIndex)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.CreateCopyOfExistingLod");
		
		UFLStaticMeshSplitter_CreateCopyOfExistingLod_Params params {};
		params.StaticMeshComponent = StaticMeshComponent;
		params.sourceLodIndex = sourceLodIndex;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLStaticMeshSplitter.BuildStaticMesh
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UStaticMesh*                                 StaticMesh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLStaticMeshSplitter::BuildStaticMesh(class UStaticMesh* StaticMesh)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLStaticMeshSplitter.BuildStaticMesh");
		
		UFLStaticMeshSplitter_BuildStaticMesh_Params params {};
		params.StaticMesh = StaticMesh;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLStaticMeshSplitter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLStaticMeshSplitter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLStaticMeshSplitter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.IsSimulate
	 * 		Flags  -> ()
	 */
	bool UFLSystem::IsSimulate()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.IsSimulate");
		
		UFLSystem_IsSimulate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.IsShippingBuild
	 * 		Flags  -> ()
	 */
	bool UFLSystem::IsShippingBuild()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.IsShippingBuild");
		
		UFLSystem_IsShippingBuild_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.IsQABuild
	 * 		Flags  -> ()
	 */
	bool UFLSystem::IsQABuild()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.IsQABuild");
		
		UFLSystem_IsQABuild_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.IsEditor
	 * 		Flags  -> ()
	 */
	bool UFLSystem::IsEditor()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.IsEditor");
		
		UFLSystem_IsEditor_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.IsDevelopmentBuild
	 * 		Flags  -> ()
	 */
	bool UFLSystem::IsDevelopmentBuild()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.IsDevelopmentBuild");
		
		UFLSystem_IsDevelopmentBuild_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.IsBuild
	 * 		Flags  -> ()
	 */
	bool UFLSystem::IsBuild()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.IsBuild");
		
		UFLSystem_IsBuild_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.GetPuTimers
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              RawFrameTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              RawGameThreadTime                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              RawrenderThreadTime                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              RawGPUFrameTime                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UFLSystem::GetPuTimers(float* RawFrameTime, float* RawGameThreadTime, float* RawrenderThreadTime, float* RawGPUFrameTime)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.GetPuTimers");
		
		UFLSystem_GetPuTimers_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (RawFrameTime != nullptr)
			*RawFrameTime = params.RawFrameTime;
		if (RawGameThreadTime != nullptr)
			*RawGameThreadTime = params.RawGameThreadTime;
		if (RawrenderThreadTime != nullptr)
			*RawrenderThreadTime = params.RawrenderThreadTime;
		if (RawGPUFrameTime != nullptr)
			*RawGPUFrameTime = params.RawGPUFrameTime;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.GetProjectVersion
	 * 		Flags  -> ()
	 */
	class FString UFLSystem::GetProjectVersion()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.GetProjectVersion");
		
		UFLSystem_GetProjectVersion_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.GetProjectRevision
	 * 		Flags  -> ()
	 */
	class FString UFLSystem::GetProjectRevision()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.GetProjectRevision");
		
		UFLSystem_GetProjectRevision_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.GetProjectBeta
	 * 		Flags  -> ()
	 */
	class FString UFLSystem::GetProjectBeta()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.GetProjectBeta");
		
		UFLSystem_GetProjectBeta_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.GetInstallID
	 * 		Flags  -> ()
	 */
	class FString UFLSystem::GetInstallID()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.GetInstallID");
		
		UFLSystem_GetInstallID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.GetFullVersionString
	 * 		Flags  -> ()
	 */
	class FString UFLSystem::GetFullVersionString()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.GetFullVersionString");
		
		UFLSystem_GetFullVersionString_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLSystem.GetClientVersionString
	 * 		Flags  -> ()
	 */
	class FString UFLSystem::GetClientVersionString()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLSystem.GetClientVersionString");
		
		UFLSystem_GetClientVersionString_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLSystem.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLSystem::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLSystem");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UTexture2DArrayWrapper.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UTexture2DArrayWrapper::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.Texture2DArrayWrapper");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLTexture2DArray.Texture2DArray_SplitTexturesIntoValidGroups
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UTexture2D*>                          Textures                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	TArray<class UTexture2DArrayWrapper*> UFLTexture2DArray::Texture2DArray_SplitTexturesIntoValidGroups(TArray<class UTexture2D*> Textures)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLTexture2DArray.Texture2DArray_SplitTexturesIntoValidGroups");
		
		UFLTexture2DArray_Texture2DArray_SplitTexturesIntoValidGroups_Params params {};
		params.Textures = Textures;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLTexture2DArray.Texture2DArray_SetTextures
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UTexture2DArray*                             textureArray                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UTexture2D*>                          Textures                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UFLTexture2DArray::Texture2DArray_SetTextures(class UTexture2DArray* textureArray, TArray<class UTexture2D*> Textures)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLTexture2DArray.Texture2DArray_SetTextures");
		
		UFLTexture2DArray_Texture2DArray_SetTextures_Params params {};
		params.textureArray = textureArray;
		params.Textures = Textures;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.FLTexture2DArray.Texture2DArray_GetTextures
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UTexture2DArray*                             textureArray                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<class UTexture2D*> UFLTexture2DArray::Texture2DArray_GetTextures(class UTexture2DArray* textureArray)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.FLTexture2DArray.Texture2DArray_GetTextures");
		
		UFLTexture2DArray_Texture2DArray_GetTextures_Params params {};
		params.textureArray = textureArray;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UFLTexture2DArray.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UFLTexture2DArray::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.FLTexture2DArray");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameConfig.GetGameConfig
	 * 		Flags  -> ()
	 */
	class UGameConfig* UGameConfig::GetGameConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameConfig.GetGameConfig");
		
		UGameConfig_GetGameConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameConfig.ApplyStartupConfig
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FStartupConfig                              Config                                                     (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	void UGameConfig::ApplyStartupConfig(const struct FStartupConfig& Config)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameConfig.ApplyStartupConfig");
		
		UGameConfig_ApplyStartupConfig_Params params {};
		params.Config = Config;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UGameConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UGameConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.GameConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.IsSleepRestoreHealth
	 * 		Flags  -> ()
	 */
	bool UGameDifficultyConfig::IsSleepRestoreHealth()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.IsSleepRestoreHealth");
		
		UGameDifficultyConfig_IsSleepRestoreHealth_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.IsShowTips
	 * 		Flags  -> ()
	 */
	bool UGameDifficultyConfig::IsShowTips()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.IsShowTips");
		
		UGameDifficultyConfig_IsShowTips_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.IsShowLocationOnMap
	 * 		Flags  -> ()
	 */
	bool UGameDifficultyConfig::IsShowLocationOnMap()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.IsShowLocationOnMap");
		
		UGameDifficultyConfig_IsShowLocationOnMap_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.IsNoEnemies
	 * 		Flags  -> ()
	 */
	bool UGameDifficultyConfig::IsNoEnemies()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.IsNoEnemies");
		
		UGameDifficultyConfig_IsNoEnemies_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.IsNoAnomalies
	 * 		Flags  -> ()
	 */
	bool UGameDifficultyConfig::IsNoAnomalies()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.IsNoAnomalies");
		
		UGameDifficultyConfig_IsNoAnomalies_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetWeaponShotDamageMultiplier
	 * 		Flags  -> ()
	 */
	float UGameDifficultyConfig::GetWeaponShotDamageMultiplier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetWeaponShotDamageMultiplier");
		
		UGameDifficultyConfig_GetWeaponShotDamageMultiplier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetTracersShowType
	 * 		Flags  -> ()
	 */
	ETracersShowType UGameDifficultyConfig::GetTracersShowType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetTracersShowType");
		
		UGameDifficultyConfig_GetTracersShowType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetTideTimeMultiplier
	 * 		Flags  -> ()
	 */
	float UGameDifficultyConfig::GetTideTimeMultiplier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetTideTimeMultiplier");
		
		UGameDifficultyConfig_GetTideTimeMultiplier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetMissionMoneyRewardMultiplier
	 * 		Flags  -> ()
	 */
	float UGameDifficultyConfig::GetMissionMoneyRewardMultiplier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetMissionMoneyRewardMultiplier");
		
		UGameDifficultyConfig_GetMissionMoneyRewardMultiplier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetItemSellPriceMultiplier
	 * 		Flags  -> ()
	 */
	float UGameDifficultyConfig::GetItemSellPriceMultiplier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetItemSellPriceMultiplier");
		
		UGameDifficultyConfig_GetItemSellPriceMultiplier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetItemsDropType
	 * 		Flags  -> ()
	 */
	EItemsDropType UGameDifficultyConfig::GetItemsDropType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetItemsDropType");
		
		UGameDifficultyConfig_GetItemsDropType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetHungerMultiplier
	 * 		Flags  -> ()
	 */
	float UGameDifficultyConfig::GetHungerMultiplier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetHungerMultiplier");
		
		UGameDifficultyConfig_GetHungerMultiplier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetGameDifficultyConfig
	 * 		Flags  -> ()
	 */
	class UGameDifficultyConfig* UGameDifficultyConfig::GetGameDifficultyConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetGameDifficultyConfig");
		
		UGameDifficultyConfig_GetGameDifficultyConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetEnemySense
	 * 		Flags  -> ()
	 */
	struct FEnemySenseMultiplier UGameDifficultyConfig::GetEnemySense()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetEnemySense");
		
		UGameDifficultyConfig_GetEnemySense_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetEnemyHealthMultiplier
	 * 		Flags  -> ()
	 */
	float UGameDifficultyConfig::GetEnemyHealthMultiplier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetEnemyHealthMultiplier");
		
		UGameDifficultyConfig_GetEnemyHealthMultiplier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetEnemyDamageMultiplier
	 * 		Flags  -> ()
	 */
	float UGameDifficultyConfig::GetEnemyDamageMultiplier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetEnemyDamageMultiplier");
		
		UGameDifficultyConfig_GetEnemyDamageMultiplier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetEnemyCountModifier
	 * 		Flags  -> ()
	 */
	int32_t UGameDifficultyConfig::GetEnemyCountModifier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetEnemyCountModifier");
		
		UGameDifficultyConfig_GetEnemyCountModifier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetAnomalyDamageMultiplier
	 * 		Flags  -> ()
	 */
	float UGameDifficultyConfig::GetAnomalyDamageMultiplier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetAnomalyDamageMultiplier");
		
		UGameDifficultyConfig_GetAnomalyDamageMultiplier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameDifficultyConfig.GetAnomalyAmountModifier
	 * 		Flags  -> ()
	 */
	int32_t UGameDifficultyConfig::GetAnomalyAmountModifier()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameDifficultyConfig.GetAnomalyAmountModifier");
		
		UGameDifficultyConfig_GetAnomalyAmountModifier_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UGameDifficultyConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UGameDifficultyConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.GameDifficultyConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AGameEnvironment.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AGameEnvironment::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.GameEnvironment");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AGripSelectorsController.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AGripSelectorsController::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.GripSelectorsController");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GripSelectorsControllerInterface.ShowSelector
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHand                                            hand                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Distance                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UGripSelectorsControllerInterface::ShowSelector(EPRHand hand, bool Distance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GripSelectorsControllerInterface.ShowSelector");
		
		UGripSelectorsControllerInterface_ShowSelector_Params params {};
		params.hand = hand;
		params.Distance = Distance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GripSelectorsControllerInterface.HideSelector
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHand                                            hand                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UGripSelectorsControllerInterface::HideSelector(EPRHand hand)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GripSelectorsControllerInterface.HideSelector");
		
		UGripSelectorsControllerInterface_HideSelector_Params params {};
		params.hand = hand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GripSelectorsControllerInterface.HideAllSelectors
	 * 		Flags  -> ()
	 */
	void UGripSelectorsControllerInterface::HideAllSelectors()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GripSelectorsControllerInterface.HideAllSelectors");
		
		UGripSelectorsControllerInterface_HideAllSelectors_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UGripSelectorsControllerInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UGripSelectorsControllerInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.GripSelectorsControllerInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.HolsterComponent.CheckInteractionMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EInventoryMode                                     Mode                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               allow                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UHolsterComponent::CheckInteractionMode(EInventoryMode Mode, bool* allow)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.HolsterComponent.CheckInteractionMode");
		
		UHolsterComponent_CheckInteractionMode_Params params {};
		params.Mode = Mode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (allow != nullptr)
			*allow = params.allow;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.HolsterComponent.CalcDistance
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      targetActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bInRange                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Distance                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UHolsterComponent::CalcDistance(class AActor* targetActor, bool* bInRange, float* Distance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.HolsterComponent.CalcDistance");
		
		UHolsterComponent_CalcDistance_Params params {};
		params.targetActor = targetActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bInRange != nullptr)
			*bInRange = params.bInRange;
		if (Distance != nullptr)
			*Distance = params.Distance;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.HolsterComponent.AttachAndLerpHold
	 * 		Flags  -> ()
	 */
	void UHolsterComponent::AttachAndLerpHold()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.HolsterComponent.AttachAndLerpHold");
		
		UHolsterComponent_AttachAndLerpHold_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UHolsterComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UHolsterComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.HolsterComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSAnimation.SetOverlayOverrideState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            NewOverlayOverrideState                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSAnimation::SetOverlayOverrideState(int32_t NewOverlayOverrideState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSAnimation.SetOverlayOverrideState");
		
		UIALSAnimation_SetOverlayOverrideState_Params params {};
		params.NewOverlayOverrideState = NewOverlayOverrideState;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSAnimation.SetGroundedEntryState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EGroundedEntryState                                NewGroundedEntryState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSAnimation::SetGroundedEntryState(EGroundedEntryState NewGroundedEntryState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSAnimation.SetGroundedEntryState");
		
		UIALSAnimation_SetGroundedEntryState_Params params {};
		params.NewGroundedEntryState = NewGroundedEntryState;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSAnimation.ReloadWeapon
	 * 		Flags  -> ()
	 */
	void UIALSAnimation::ReloadWeapon()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSAnimation.ReloadWeapon");
		
		UIALSAnimation_ReloadWeapon_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSAnimation.OnJumped
	 * 		Flags  -> ()
	 */
	void UIALSAnimation::OnJumped()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSAnimation.OnJumped");
		
		UIALSAnimation_OnJumped_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIALSAnimation.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIALSAnimation::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IALSAnimation");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSCharacter.SetViewMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EViewMode                                          ViewMode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSCharacter::SetViewMode(EViewMode ViewMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSCharacter.SetViewMode");
		
		UIALSCharacter_SetViewMode_Params params {};
		params.ViewMode = ViewMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSCharacter.SetStance
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EStance                                            NewStance                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSCharacter::SetStance(EStance NewStance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSCharacter.SetStance");
		
		UIALSCharacter_SetStance_Params params {};
		params.NewStance = NewStance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSCharacter.SetRotationMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ERotationMode                                      NewRotationMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSCharacter::SetRotationMode(ERotationMode NewRotationMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSCharacter.SetRotationMode");
		
		UIALSCharacter_SetRotationMode_Params params {};
		params.NewRotationMode = NewRotationMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSCharacter.SetOverlayState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EOverlayState                                      NewOverLayState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSCharacter::SetOverlayState(EOverlayState NewOverLayState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSCharacter.SetOverlayState");
		
		UIALSCharacter_SetOverlayState_Params params {};
		params.NewOverLayState = NewOverLayState;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSCharacter.SetMovementState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EMovementState                                     NewMovementState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSCharacter::SetMovementState(EMovementState NewMovementState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSCharacter.SetMovementState");
		
		UIALSCharacter_SetMovementState_Params params {};
		params.NewMovementState = NewMovementState;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSCharacter.SetMovementAction
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EMovementAction                                    NewMovementAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSCharacter::SetMovementAction(EMovementAction NewMovementAction)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSCharacter.SetMovementAction");
		
		UIALSCharacter_SetMovementAction_Params params {};
		params.NewMovementAction = NewMovementAction;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSCharacter.SetGait
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EGait                                              NewGait                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSCharacter::SetGait(EGait NewGait)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSCharacter.SetGait");
		
		UIALSCharacter_SetGait_Params params {};
		params.NewGait = NewGait;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSCharacter.GetEssentialValues
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     OutVelocity                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     OutAcceleration                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     OutMovementInput                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               OutIsMoving                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               OutHasMovementInput                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              OutSpeed                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              OutMovementInputAmount                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FRotator                                    OutRotator                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		float                                              OutAimYawRate                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSCharacter::GetEssentialValues(struct FVector* OutVelocity, struct FVector* OutAcceleration, struct FVector* OutMovementInput, bool* OutIsMoving, bool* OutHasMovementInput, float* OutSpeed, float* OutMovementInputAmount, struct FRotator* OutRotator, float* OutAimYawRate)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSCharacter.GetEssentialValues");
		
		UIALSCharacter_GetEssentialValues_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (OutVelocity != nullptr)
			*OutVelocity = params.OutVelocity;
		if (OutAcceleration != nullptr)
			*OutAcceleration = params.OutAcceleration;
		if (OutMovementInput != nullptr)
			*OutMovementInput = params.OutMovementInput;
		if (OutIsMoving != nullptr)
			*OutIsMoving = params.OutIsMoving;
		if (OutHasMovementInput != nullptr)
			*OutHasMovementInput = params.OutHasMovementInput;
		if (OutSpeed != nullptr)
			*OutSpeed = params.OutSpeed;
		if (OutMovementInputAmount != nullptr)
			*OutMovementInputAmount = params.OutMovementInputAmount;
		if (OutRotator != nullptr)
			*OutRotator = params.OutRotator;
		if (OutAimYawRate != nullptr)
			*OutAimYawRate = params.OutAimYawRate;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IALSCharacter.GetCurrentStates
	 * 		Flags  -> ()
	 * Parameters:
	 * 		Engine_EMovementMode                               OutPawnMovementMode                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EMovementState                                     OutMovementState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EMovementState                                     OutPrevMovementState                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EMovementAction                                    OutMovementAction                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		ERotationMode                                      OutRotationMode                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EGait                                              OutActualGait                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EStance                                            OutActualStance                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EViewMode                                          OutViewMode                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EOverlayState                                      OutOverlayState                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIALSCharacter::GetCurrentStates(Engine_EMovementMode* OutPawnMovementMode, EMovementState* OutMovementState, EMovementState* OutPrevMovementState, EMovementAction* OutMovementAction, ERotationMode* OutRotationMode, EGait* OutActualGait, EStance* OutActualStance, EViewMode* OutViewMode, EOverlayState* OutOverlayState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IALSCharacter.GetCurrentStates");
		
		UIALSCharacter_GetCurrentStates_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (OutPawnMovementMode != nullptr)
			*OutPawnMovementMode = params.OutPawnMovementMode;
		if (OutMovementState != nullptr)
			*OutMovementState = params.OutMovementState;
		if (OutPrevMovementState != nullptr)
			*OutPrevMovementState = params.OutPrevMovementState;
		if (OutMovementAction != nullptr)
			*OutMovementAction = params.OutMovementAction;
		if (OutRotationMode != nullptr)
			*OutRotationMode = params.OutRotationMode;
		if (OutActualGait != nullptr)
			*OutActualGait = params.OutActualGait;
		if (OutActualStance != nullptr)
			*OutActualStance = params.OutActualStance;
		if (OutViewMode != nullptr)
			*OutViewMode = params.OutViewMode;
		if (OutOverlayState != nullptr)
			*OutOverlayState = params.OutOverlayState;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIALSCharacter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIALSCharacter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IALSCharacter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAmmo.GetAmmoInfo
	 * 		Flags  -> ()
	 */
	struct FAmmoInfo UIAmmo::GetAmmoInfo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAmmo.GetAmmoInfo");
		
		UIAmmo_GetAmmoInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIAmmo.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIAmmo::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IAmmo");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAmmoContainer.SetLoadingLock
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               lock                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIAmmoContainer::SetLoadingLock(bool lock)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAmmoContainer.SetLoadingLock");
		
		UIAmmoContainer_SetLoadingLock_Params params {};
		params.lock = lock;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAmmoContainer.OnAmmoRemoved
	 * 		Flags  -> ()
	 */
	void UIAmmoContainer::OnAmmoRemoved()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAmmoContainer.OnAmmoRemoved");
		
		UIAmmoContainer_OnAmmoRemoved_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAmmoContainer.OnAmmoAdded
	 * 		Flags  -> ()
	 */
	void UIAmmoContainer::OnAmmoAdded()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAmmoContainer.OnAmmoAdded");
		
		UIAmmoContainer_OnAmmoAdded_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAmmoContainer.IsLoadingLocked
	 * 		Flags  -> ()
	 */
	bool UIAmmoContainer::IsLoadingLocked()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAmmoContainer.IsLoadingLocked");
		
		UIAmmoContainer_IsLoadingLocked_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAmmoContainer.GetAmmoContainerInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FPRAmmoContainerInfo                        Info                                                       (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void UIAmmoContainer::GetAmmoContainerInfo(struct FPRAmmoContainerInfo* Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAmmoContainer.GetAmmoContainerInfo");
		
		UIAmmoContainer_GetAmmoContainerInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Info != nullptr)
			*Info = params.Info;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAmmoContainer.GetAmmoContainerData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FAmmoContainerData                          Data                                                       (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void UIAmmoContainer::GetAmmoContainerData(struct FAmmoContainerData* Data)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAmmoContainer.GetAmmoContainerData");
		
		UIAmmoContainer_GetAmmoContainerData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Data != nullptr)
			*Data = params.Data;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIAmmoContainer.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIAmmoContainer::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IAmmoContainer");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAnomaly.GetTypeID
	 * 		Flags  -> ()
	 */
	struct FGameplayTag UIAnomaly::GetTypeID()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAnomaly.GetTypeID");
		
		UIAnomaly_GetTypeID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAnomaly.GetRadius
	 * 		Flags  -> ()
	 */
	float UIAnomaly::GetRadius()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAnomaly.GetRadius");
		
		UIAnomaly_GetRadius_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAnomaly.GetBaseDamage
	 * 		Flags  -> ()
	 */
	float UIAnomaly::GetBaseDamage()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAnomaly.GetBaseDamage");
		
		UIAnomaly_GetBaseDamage_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAnomaly.GetAnomalyInfo
	 * 		Flags  -> ()
	 */
	struct FPRAnomalyInfo UIAnomaly::GetAnomalyInfo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAnomaly.GetAnomalyInfo");
		
		UIAnomaly_GetAnomalyInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIAnomaly.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIAnomaly::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IAnomaly");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttachment.IsAttached
	 * 		Flags  -> ()
	 */
	bool UIAttachment::IsAttached()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttachment.IsAttached");
		
		UIAttachment_IsAttached_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttachment.DetachFrom
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UAttachmentSlotComponent*                    SlotComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIAttachment::DetachFrom(class UAttachmentSlotComponent* SlotComponent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttachment.DetachFrom");
		
		UIAttachment_DetachFrom_Params params {};
		params.SlotComponent = SlotComponent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttachment.AttachTo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UAttachmentSlotComponent*                    SlotComponent                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bMakeSound                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIAttachment::AttachTo(class UAttachmentSlotComponent* SlotComponent, bool bMakeSound)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttachment.AttachTo");
		
		UIAttachment_AttachTo_Params params {};
		params.SlotComponent = SlotComponent;
		params.bMakeSound = bMakeSound;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIAttachment.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIAttachment::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IAttachment");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.StopAttack
	 * 		Flags  -> ()
	 */
	void UIAttack::StopAttack()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.StopAttack");
		
		UIAttack_StopAttack_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.StartAttack
	 * 		Flags  -> ()
	 */
	void UIAttack::StartAttack()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.StartAttack");
		
		UIAttack_StartAttack_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.SetWeaponVisible
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bVisible                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIAttack::SetWeaponVisible(bool bVisible)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.SetWeaponVisible");
		
		UIAttack_SetWeaponVisible_Params params {};
		params.bVisible = bVisible;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.Reload
	 * 		Flags  -> ()
	 */
	void UIAttack::Reload()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.Reload");
		
		UIAttack_Reload_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.OwnerInitialised
	 * 		Flags  -> ()
	 */
	void UIAttack::OwnerInitialised()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.OwnerInitialised");
		
		UIAttack_OwnerInitialised_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.OnOutOfAmmo
	 * 		Flags  -> ()
	 */
	void UIAttack::OnOutOfAmmo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.OnOutOfAmmo");
		
		UIAttack_OnOutOfAmmo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.OnMeleeAttackHit
	 * 		Flags  -> ()
	 */
	void UIAttack::OnMeleeAttackHit()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.OnMeleeAttackHit");
		
		UIAttack_OnMeleeAttackHit_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.NeedWaitForFinish
	 * 		Flags  -> ()
	 */
	bool UIAttack::NeedWaitForFinish()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.NeedWaitForFinish");
		
		UIAttack_NeedWaitForFinish_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.IsReloading
	 * 		Flags  -> ()
	 */
	bool UIAttack::IsReloading()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.IsReloading");
		
		UIAttack_IsReloading_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.IsReadyToAttack
	 * 		Flags  -> ()
	 */
	bool UIAttack::IsReadyToAttack()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.IsReadyToAttack");
		
		UIAttack_IsReadyToAttack_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.IsAttackValid
	 * 		Flags  -> ()
	 */
	bool UIAttack::IsAttackValid()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.IsAttackValid");
		
		UIAttack_IsAttackValid_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.IsAttacking
	 * 		Flags  -> ()
	 */
	bool UIAttack::IsAttacking()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.IsAttacking");
		
		UIAttack_IsAttacking_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.GetWeaponActor
	 * 		Flags  -> ()
	 */
	class AActor* UIAttack::GetWeaponActor()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.GetWeaponActor");
		
		UIAttack_GetWeaponActor_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.GetFirePointComponent
	 * 		Flags  -> ()
	 */
	class USceneComponent* UIAttack::GetFirePointComponent()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.GetFirePointComponent");
		
		UIAttack_GetFirePointComponent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.GetAttackDistance
	 * 		Flags  -> ()
	 */
	float UIAttack::GetAttackDistance()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.GetAttackDistance");
		
		UIAttack_GetAttackDistance_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IAttack.DestroyWeapon
	 * 		Flags  -> ()
	 */
	void UIAttack::DestroyWeapon()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IAttack.DestroyWeapon");
		
		UIAttack_DestroyWeapon_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIAttack.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIAttack::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IAttack");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotComponent.OwnerInitialized
	 * 		Flags  -> ()
	 */
	void UIBotComponent::OwnerInitialized()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotComponent.OwnerInitialized");
		
		UIBotComponent_OwnerInitialized_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIBotComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIBotComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IBotComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.SetTargetActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Target                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotController::SetTargetActor(class AActor* Target)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.SetTargetActor");
		
		UIBotController_SetTargetActor_Params params {};
		params.Target = Target;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.SetLeader
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class APRBasicActor*                               NewLeader                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotController::SetLeader(class APRBasicActor* NewLeader)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.SetLeader");
		
		UIBotController_SetLeader_Params params {};
		params.NewLeader = NewLeader;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.SetDesiredPosition
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Pos                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotController::SetDesiredPosition(const struct FVector& Pos)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.SetDesiredPosition");
		
		UIBotController_SetDesiredPosition_Params params {};
		params.Pos = Pos;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.ReportEnemyLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Loc                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotController::ReportEnemyLocation(const struct FVector& Loc)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.ReportEnemyLocation");
		
		UIBotController_ReportEnemyLocation_Params params {};
		params.Loc = Loc;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.RemoveSquadMember
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class APawn*                                       Pawn                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotController::RemoveSquadMember(class APawn* Pawn)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.RemoveSquadMember");
		
		UIBotController_RemoveSquadMember_Params params {};
		params.Pawn = Pawn;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.OrderCover
	 * 		Flags  -> ()
	 */
	void UIBotController::OrderCover()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.OrderCover");
		
		UIBotController_OrderCover_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.OrderCompleted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class APawn*                                       Pawn                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotController::OrderCompleted(class APawn* Pawn)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.OrderCompleted");
		
		UIBotController_OrderCompleted_Params params {};
		params.Pawn = Pawn;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.OrderAttack
	 * 		Flags  -> ()
	 */
	void UIBotController::OrderAttack()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.OrderAttack");
		
		UIBotController_OrderAttack_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.GetTargetLocation
	 * 		Flags  -> ()
	 */
	struct FVector UIBotController::GetTargetLocation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.GetTargetLocation");
		
		UIBotController_GetTargetLocation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.GetTargetActor
	 * 		Flags  -> ()
	 */
	class AActor* UIBotController::GetTargetActor()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.GetTargetActor");
		
		UIBotController_GetTargetActor_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.GetSquadMembers
	 * 		Flags  -> ()
	 */
	TArray<class AActor*> UIBotController::GetSquadMembers()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.GetSquadMembers");
		
		UIBotController_GetSquadMembers_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.GetPerception
	 * 		Flags  -> ()
	 */
	class UPRNpcPerceptionComponent* UIBotController::GetPerception()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.GetPerception");
		
		UIBotController_GetPerception_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.GetDesiredPosition
	 * 		Flags  -> ()
	 */
	struct FVector UIBotController::GetDesiredPosition()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.GetDesiredPosition");
		
		UIBotController_GetDesiredPosition_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.GetCommand
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ECharCommand                                       CurrentCommand                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotController::GetCommand(ECharCommand* CurrentCommand)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.GetCommand");
		
		UIBotController_GetCommand_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (CurrentCommand != nullptr)
			*CurrentCommand = params.CurrentCommand;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotController.AddSquadMember
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class APawn*                                       Pawn                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotController::AddSquadMember(class APawn* Pawn)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotController.AddSquadMember");
		
		UIBotController_AddSquadMember_Params params {};
		params.Pawn = Pawn;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIBotController.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIBotController::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IBotController");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.TeleportToNextPos
	 * 		Flags  -> ()
	 */
	void UIBotPawn::TeleportToNextPos()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.TeleportToNextPos");
		
		UIBotPawn_TeleportToNextPos_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.StopMovement
	 * 		Flags  -> ()
	 */
	void UIBotPawn::StopMovement()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.StopMovement");
		
		UIBotPawn_StopMovement_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.SetTargetRotation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRotator                                    TargetRotation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UIBotPawn::SetTargetRotation(const struct FRotator& TargetRotation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.SetTargetRotation");
		
		UIBotPawn_SetTargetRotation_Params params {};
		params.TargetRotation = TargetRotation;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.SetFlyForce
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Force                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotPawn::SetFlyForce(const struct FVector& Force)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.SetFlyForce");
		
		UIBotPawn_SetFlyForce_Params params {};
		params.Force = Force;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.SetBotMovementMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EBotMovementMode                                   MovementMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Changed                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotPawn::SetBotMovementMode(EBotMovementMode MovementMode, bool* Changed)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.SetBotMovementMode");
		
		UIBotPawn_SetBotMovementMode_Params params {};
		params.MovementMode = MovementMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Changed != nullptr)
			*Changed = params.Changed;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.ReportDeath
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      DeadActorRef                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIBotPawn::ReportDeath(class AActor* DeadActorRef)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.ReportDeath");
		
		UIBotPawn_ReportDeath_Params params {};
		params.DeadActorRef = DeadActorRef;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.OnExitPlayerViewport
	 * 		Flags  -> ()
	 */
	void UIBotPawn::OnExitPlayerViewport()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.OnExitPlayerViewport");
		
		UIBotPawn_OnExitPlayerViewport_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.OnEnterPlayerViewport
	 * 		Flags  -> ()
	 */
	void UIBotPawn::OnEnterPlayerViewport()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.OnEnterPlayerViewport");
		
		UIBotPawn_OnEnterPlayerViewport_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetStealth
	 * 		Flags  -> ()
	 */
	float UIBotPawn::GetStealth()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetStealth");
		
		UIBotPawn_GetStealth_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetSelection
	 * 		Flags  -> ()
	 */
	class AActor* UIBotPawn::GetSelection()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetSelection");
		
		UIBotPawn_GetSelection_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetPerception
	 * 		Flags  -> ()
	 */
	class UPRNpcPerceptionComponent* UIBotPawn::GetPerception()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetPerception");
		
		UIBotPawn_GetPerception_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetPatrolTargets
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               IsValidOut                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class AActor*>                              TargetsOut                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UIBotPawn::GetPatrolTargets(bool* IsValidOut, TArray<class AActor*>* TargetsOut)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetPatrolTargets");
		
		UIBotPawn_GetPatrolTargets_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (IsValidOut != nullptr)
			*IsValidOut = params.IsValidOut;
		if (TargetsOut != nullptr)
			*TargetsOut = params.TargetsOut;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetPatrolPath
	 * 		Flags  -> ()
	 */
	class USplineComponent* UIBotPawn::GetPatrolPath()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetPatrolPath");
		
		UIBotPawn_GetPatrolPath_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetOptimalRange
	 * 		Flags  -> ()
	 */
	float UIBotPawn::GetOptimalRange()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetOptimalRange");
		
		UIBotPawn_GetOptimalRange_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetIdleWalkDistance
	 * 		Flags  -> ()
	 */
	float UIBotPawn::GetIdleWalkDistance()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetIdleWalkDistance");
		
		UIBotPawn_GetIdleWalkDistance_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetBotShootingComponent
	 * 		Flags  -> ()
	 */
	class UActorComponent* UIBotPawn::GetBotShootingComponent()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetBotShootingComponent");
		
		UIBotPawn_GetBotShootingComponent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetBotMovementMode
	 * 		Flags  -> ()
	 */
	EBotMovementMode UIBotPawn::GetBotMovementMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetBotMovementMode");
		
		UIBotPawn_GetBotMovementMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetBoneTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FName                                        BoneName                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FTransform UIBotPawn::GetBoneTransform(const class FName& BoneName)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetBoneTransform");
		
		UIBotPawn_GetBoneTransform_Params params {};
		params.BoneName = BoneName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.GetAliveStats
	 * 		Flags  -> ()
	 */
	class UActorComponent* UIBotPawn::GetAliveStats()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.GetAliveStats");
		
		UIBotPawn_GetAliveStats_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.CcmStopWaitingForCombat
	 * 		Flags  -> ()
	 */
	void UIBotPawn::CcmStopWaitingForCombat()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.CcmStopWaitingForCombat");
		
		UIBotPawn_CcmStopWaitingForCombat_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.CcmStartWaitingForCombat
	 * 		Flags  -> ()
	 */
	void UIBotPawn::CcmStartWaitingForCombat()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.CcmStartWaitingForCombat");
		
		UIBotPawn_CcmStartWaitingForCombat_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IBotPawn.BroadcastEnemyLoc
	 * 		Flags  -> ()
	 */
	void UIBotPawn::BroadcastEnemyLoc()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IBotPawn.BroadcastEnemyLoc");
		
		UIBotPawn_BroadcastEnemyLoc_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIBotPawn.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIBotPawn::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IBotPawn");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ICommandEvents.OnWalkCommandStarted
	 * 		Flags  -> ()
	 */
	void UICommandEvents::OnWalkCommandStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ICommandEvents.OnWalkCommandStarted");
		
		UICommandEvents_OnWalkCommandStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ICommandEvents.OnWalkCommandFinished
	 * 		Flags  -> ()
	 */
	void UICommandEvents::OnWalkCommandFinished()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ICommandEvents.OnWalkCommandFinished");
		
		UICommandEvents_OnWalkCommandFinished_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ICommandEvents.OnIdleCommandStarted
	 * 		Flags  -> ()
	 */
	void UICommandEvents::OnIdleCommandStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ICommandEvents.OnIdleCommandStarted");
		
		UICommandEvents_OnIdleCommandStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ICommandEvents.OnIdleCommandFinished
	 * 		Flags  -> ()
	 */
	void UICommandEvents::OnIdleCommandFinished()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ICommandEvents.OnIdleCommandFinished");
		
		UICommandEvents_OnIdleCommandFinished_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ICommandEvents.OnAttackCommandStarted
	 * 		Flags  -> ()
	 */
	void UICommandEvents::OnAttackCommandStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ICommandEvents.OnAttackCommandStarted");
		
		UICommandEvents_OnAttackCommandStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ICommandEvents.OnAttackCommandFinished
	 * 		Flags  -> ()
	 */
	void UICommandEvents::OnAttackCommandFinished()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ICommandEvents.OnAttackCommandFinished");
		
		UICommandEvents_OnAttackCommandFinished_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UICommandEvents.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UICommandEvents::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ICommandEvents");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ComputerPage.ShowPage
	 * 		Flags  -> ()
	 */
	void UComputerPage::ShowPage()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ComputerPage.ShowPage");
		
		UComputerPage_ShowPage_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ComputerPage.PageTick
	 * 		Flags  -> ()
	 */
	void UComputerPage::PageTick()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ComputerPage.PageTick");
		
		UComputerPage_PageTick_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ComputerPage.InitializeByActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UComputerPage::InitializeByActor(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ComputerPage.InitializeByActor");
		
		UComputerPage_InitializeByActor_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ComputerPage.HidePage
	 * 		Flags  -> ()
	 */
	void UComputerPage::HidePage()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ComputerPage.HidePage");
		
		UComputerPage_HidePage_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UComputerPage.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UComputerPage::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ComputerPage");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IDamageCategory.GetDamageCategory
	 * 		Flags  -> ()
	 */
	EDamageCategory UIDamageCategory::GetDamageCategory()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IDamageCategory.GetDamageCategory");
		
		UIDamageCategory_GetDamageCategory_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIDamageCategory.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIDamageCategory::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IDamageCategory");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DebugAndCheats.SwitchCheatInvisibility
	 * 		Flags  -> ()
	 */
	void UDebugAndCheats::SwitchCheatInvisibility()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DebugAndCheats.SwitchCheatInvisibility");
		
		UDebugAndCheats_SwitchCheatInvisibility_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DebugAndCheats.SwitchCheatGodMode
	 * 		Flags  -> ()
	 */
	void UDebugAndCheats::SwitchCheatGodMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DebugAndCheats.SwitchCheatGodMode");
		
		UDebugAndCheats_SwitchCheatGodMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DebugAndCheats.SetCheatInvisibility
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDebugAndCheats::SetCheatInvisibility(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DebugAndCheats.SetCheatInvisibility");
		
		UDebugAndCheats_SetCheatInvisibility_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DebugAndCheats.SetCheatGodMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDebugAndCheats::SetCheatGodMode(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DebugAndCheats.SetCheatGodMode");
		
		UDebugAndCheats_SetCheatGodMode_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DebugAndCheats.GetCheatSpeed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Value                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UDebugAndCheats::GetCheatSpeed(bool* Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DebugAndCheats.GetCheatSpeed");
		
		UDebugAndCheats_GetCheatSpeed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Value != nullptr)
			*Value = params.Value;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DebugAndCheats.GetCheatInvisibility
	 * 		Flags  -> ()
	 */
	bool UDebugAndCheats::GetCheatInvisibility()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DebugAndCheats.GetCheatInvisibility");
		
		UDebugAndCheats_GetCheatInvisibility_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.DebugAndCheats.GetCheatGodMode
	 * 		Flags  -> ()
	 */
	bool UDebugAndCheats::GetCheatGodMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.DebugAndCheats.GetCheatGodMode");
		
		UDebugAndCheats_GetCheatGodMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UDebugAndCheats.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UDebugAndCheats::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.DebugAndCheats");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IHandPoser.GetPoseConfig
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FPRHandPoseInfo                             Info                                                       (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void UIHandPoser::GetPoseConfig(struct FPRHandPoseInfo* Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IHandPoser.GetPoseConfig");
		
		UIHandPoser_GetPoseConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Info != nullptr)
			*Info = params.Info;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IHandPoser.GetItemShift
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Shift                                                      (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UIHandPoser::GetItemShift(struct FTransform* Shift)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IHandPoser.GetItemShift");
		
		UIHandPoser_GetItemShift_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Shift != nullptr)
			*Shift = params.Shift;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIHandPoser.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIHandPoser::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IHandPoser");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IHealthStatus.IsAlive
	 * 		Flags  -> ()
	 */
	bool UIHealthStatus::IsAlive()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IHealthStatus.IsAlive");
		
		UIHealthStatus_IsAlive_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IHealthStatus.GetHealthPercent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              HealthPercent                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIHealthStatus::GetHealthPercent(float* HealthPercent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IHealthStatus.GetHealthPercent");
		
		UIHealthStatus_GetHealthPercent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (HealthPercent != nullptr)
			*HealthPercent = params.HealthPercent;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IHealthStatus.GetHealth
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Health                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIHealthStatus::GetHealth(float* Health)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IHealthStatus.GetHealth");
		
		UIHealthStatus_GetHealth_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Health != nullptr)
			*Health = params.Health;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IHealthStatus.ChangeHealth
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              HealthDelta                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIHealthStatus::ChangeHealth(float HealthDelta)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IHealthStatus.ChangeHealth");
		
		UIHealthStatus_ChangeHealth_Params params {};
		params.HealthDelta = HealthDelta;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIHealthStatus.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIHealthStatus::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IHealthStatus");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IInstanceID.GetInstanceID
	 * 		Flags  -> ()
	 */
	class FString UIInstanceID::GetInstanceID()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IInstanceID.GetInstanceID");
		
		UIInstanceID_GetInstanceID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIInstanceID.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIInstanceID::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IInstanceID");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IItemHolder.SpawnContent
	 * 		Flags  -> ()
	 */
	void UIItemHolder::SpawnContent()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IItemHolder.SpawnContent");
		
		UIItemHolder_SpawnContent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IItemHolder.SetHolderVisibility
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Visible                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIItemHolder::SetHolderVisibility(bool Visible)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IItemHolder.SetHolderVisibility");
		
		UIItemHolder_SetHolderVisibility_Params params {};
		params.Visible = Visible;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IItemHolder.SetContentVisibility
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Visible                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIItemHolder::SetContentVisibility(bool Visible)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IItemHolder.SetContentVisibility");
		
		UIItemHolder_SetContentVisibility_Params params {};
		params.Visible = Visible;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IItemHolder.RefreshHolder
	 * 		Flags  -> ()
	 */
	void UIItemHolder::RefreshHolder()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IItemHolder.RefreshHolder");
		
		UIItemHolder_RefreshHolder_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IItemHolder.IsSnapHolder
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               snapHolder                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIItemHolder::IsSnapHolder(bool* snapHolder)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IItemHolder.IsSnapHolder");
		
		UIItemHolder_IsSnapHolder_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (snapHolder != nullptr)
			*snapHolder = params.snapHolder;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IItemHolder.IsAcceptItemActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      itemActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               onlyIfFree                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               accept                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIItemHolder::IsAcceptItemActor(class AActor* itemActor, bool onlyIfFree, bool* accept)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IItemHolder.IsAcceptItemActor");
		
		UIItemHolder_IsAcceptItemActor_Params params {};
		params.itemActor = itemActor;
		params.onlyIfFree = onlyIfFree;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (accept != nullptr)
			*accept = params.accept;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IItemHolder.GetHolderID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                holderID                                                   (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIItemHolder::GetHolderID(struct FGameplayTag* holderID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IItemHolder.GetHolderID");
		
		UIItemHolder_GetHolderID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (holderID != nullptr)
			*holderID = params.holderID;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIItemHolder.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIItemHolder::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IItemHolder");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ILevelPreparator.IsPreparing
	 * 		Flags  -> ()
	 */
	bool UILevelPreparator::IsPreparing()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ILevelPreparator.IsPreparing");
		
		UILevelPreparator_IsPreparing_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ILevelPreparator.CheckPreparator
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UILevelPreparator::CheckPreparator(const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ILevelPreparator.CheckPreparator");
		
		UILevelPreparator_CheckPreparator_Params params {};
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UILevelPreparator.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UILevelPreparator::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ILevelPreparator");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ILootSpawner.SpawnLoot
	 * 		Flags  -> ()
	 */
	void UILootSpawner::SpawnLoot()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ILootSpawner.SpawnLoot");
		
		UILootSpawner_SpawnLoot_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ILootSpawner.GenerateLoot
	 * 		Flags  -> ()
	 */
	void UILootSpawner::GenerateLoot()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ILootSpawner.GenerateLoot");
		
		UILootSpawner_GenerateLoot_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UILootSpawner.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UILootSpawner::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ILootSpawner");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.SetItemProxyClass
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UClass*                                      ProxyClass                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInfosConfig::SetItemProxyClass(const struct FGameplayTag& ItemTypeID, class UClass* ProxyClass)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.SetItemProxyClass");
		
		UInfosConfig_SetItemProxyClass_Params params {};
		params.ItemTypeID = ItemTypeID;
		params.ProxyClass = ProxyClass;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.ResolveItemTypeID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FGameplayTag UInfosConfig::ResolveItemTypeID(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.ResolveItemTypeID");
		
		UInfosConfig_ResolveItemTypeID_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.IsValidNPC
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                npcTypeID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInfosConfig::IsValidNPC(const struct FGameplayTag& npcTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.IsValidNPC");
		
		UInfosConfig_IsValidNPC_Params params {};
		params.npcTypeID = npcTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.IsValidAnomaly
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                anomalyTypeID                                              (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInfosConfig::IsValidAnomaly(const struct FGameplayTag& anomalyTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.IsValidAnomaly");
		
		UInfosConfig_IsValidAnomaly_Params params {};
		params.anomalyTypeID = anomalyTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.IsAmmoContainer
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInfosConfig::IsAmmoContainer(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.IsAmmoContainer");
		
		UInfosConfig_IsAmmoContainer_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetUpgradeInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                UpgradeID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FUpgradeInfo UInfosConfig::GetUpgradeInfo(const struct FGameplayTag& UpgradeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetUpgradeInfo");
		
		UInfosConfig_GetUpgradeInfo_Params params {};
		params.UpgradeID = UpgradeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetTypeSellPrice
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UInfosConfig::GetTypeSellPrice(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetTypeSellPrice");
		
		UInfosConfig_GetTypeSellPrice_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetTypeLevelRequirement
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UInfosConfig::GetTypeLevelRequirement(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetTypeLevelRequirement");
		
		UInfosConfig_GetTypeLevelRequirement_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetTypeBuyPrice
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UInfosConfig::GetTypeBuyPrice(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetTypeBuyPrice");
		
		UInfosConfig_GetTypeBuyPrice_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetSlotInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TypeID                                                     (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FAttachmentSlotInfo UInfosConfig::GetSlotInfo(const struct FGameplayTag& TypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetSlotInfo");
		
		UInfosConfig_GetSlotInfo_Params params {};
		params.TypeID = TypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetNPCsListByCores
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FGameplayTag>                        coreTags                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	TArray<struct FGameplayTag> UInfosConfig::GetNPCsListByCores(TArray<struct FGameplayTag> coreTags)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetNPCsListByCores");
		
		UInfosConfig_GetNPCsListByCores_Params params {};
		params.coreTags = coreTags;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetNPCInfos
	 * 		Flags  -> ()
	 */
	TMap<struct FGameplayTag, struct FPRNPCInfo> UInfosConfig::GetNPCInfos()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetNPCInfos");
		
		UInfosConfig_GetNPCInfos_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetNPCInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                npcTypeID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRNPCInfo UInfosConfig::GetNPCInfo(const struct FGameplayTag& npcTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetNPCInfo");
		
		UInfosConfig_GetNPCInfo_Params params {};
		params.npcTypeID = npcTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetNPCClass
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                npcTypeID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UClass* UInfosConfig::GetNPCClass(const struct FGameplayTag& npcTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetNPCClass");
		
		UInfosConfig_GetNPCClass_Params params {};
		params.npcTypeID = npcTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetNPCByCore
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                coreTag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FGameplayTag UInfosConfig::GetNPCByCore(const struct FGameplayTag& coreTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetNPCByCore");
		
		UInfosConfig_GetNPCByCore_Params params {};
		params.coreTag = coreTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetItemProxyClass
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UClass* UInfosConfig::GetItemProxyClass(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetItemProxyClass");
		
		UInfosConfig_GetItemProxyClass_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetItemClass
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UClass* UInfosConfig::GetItemClass(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetItemClass");
		
		UInfosConfig_GetItemClass_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetInfosConfig
	 * 		Flags  -> ()
	 */
	class UInfosConfig* UInfosConfig::GetInfosConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetInfosConfig");
		
		UInfosConfig_GetInfosConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetContainersForAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                AmmoTypeID                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<struct FPRAmmoContainerInfo> UInfosConfig::GetContainersForAmmo(const struct FGameplayTag& AmmoTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetContainersForAmmo");
		
		UInfosConfig_GetContainersForAmmo_Params params {};
		params.AmmoTypeID = AmmoTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetBasicWeaponInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FWeaponInfo UInfosConfig::GetBasicWeaponInfo(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetBasicWeaponInfo");
		
		UInfosConfig_GetBasicWeaponInfo_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetBasicItemInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRItemInfo UInfosConfig::GetBasicItemInfo(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetBasicItemInfo");
		
		UInfosConfig_GetBasicItemInfo_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetBasicAmmoContainerInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRAmmoContainerInfo UInfosConfig::GetBasicAmmoContainerInfo(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetBasicAmmoContainerInfo");
		
		UInfosConfig_GetBasicAmmoContainerInfo_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetAnotherItemTypeID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               prev                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FGameplayTag UInfosConfig::GetAnotherItemTypeID(const struct FGameplayTag& ItemTypeID, bool prev)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetAnotherItemTypeID");
		
		UInfosConfig_GetAnotherItemTypeID_Params params {};
		params.ItemTypeID = ItemTypeID;
		params.prev = prev;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetAnomalyInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                anomalyTypeID                                              (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRAnomalyInfo UInfosConfig::GetAnomalyInfo(const struct FGameplayTag& anomalyTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetAnomalyInfo");
		
		UInfosConfig_GetAnomalyInfo_Params params {};
		params.anomalyTypeID = anomalyTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetAnomalyClass
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                anomalyTypeID                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UClass* UInfosConfig::GetAnomalyClass(const struct FGameplayTag& anomalyTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetAnomalyClass");
		
		UInfosConfig_GetAnomalyClass_Params params {};
		params.anomalyTypeID = anomalyTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetAmmoTypeName
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TypeID                                                     (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FText UInfosConfig::GetAmmoTypeName(const struct FGameplayTag& TypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetAmmoTypeName");
		
		UInfosConfig_GetAmmoTypeName_Params params {};
		params.TypeID = TypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetAmmoInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FAmmoInfo UInfosConfig::GetAmmoInfo(const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetAmmoInfo");
		
		UInfosConfig_GetAmmoInfo_Params params {};
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InfosConfig.GetAmmoCaliberName
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                CaliberID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FText UInfosConfig::GetAmmoCaliberName(const struct FGameplayTag& CaliberID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InfosConfig.GetAmmoCaliberName");
		
		UInfosConfig_GetAmmoCaliberName_Params params {};
		params.CaliberID = CaliberID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UInfosConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UInfosConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.InfosConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IngameMenuController.OnIngameMenuDeactivated
	 * 		Flags  -> ()
	 */
	void AIngameMenuController::OnIngameMenuDeactivated()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IngameMenuController.OnIngameMenuDeactivated");
		
		AIngameMenuController_OnIngameMenuDeactivated_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IngameMenuController.OnIngameMenuActivated
	 * 		Flags  -> ()
	 */
	void AIngameMenuController::OnIngameMenuActivated()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IngameMenuController.OnIngameMenuActivated");
		
		AIngameMenuController_OnIngameMenuActivated_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AIngameMenuController.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AIngameMenuController::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IngameMenuController");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IngameMenuControllerInterface.SwitchIngameMenu
	 * 		Flags  -> ()
	 */
	void UIngameMenuControllerInterface::SwitchIngameMenu()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IngameMenuControllerInterface.SwitchIngameMenu");
		
		UIngameMenuControllerInterface_SwitchIngameMenu_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IngameMenuControllerInterface.IsIngameMenuActive
	 * 		Flags  -> ()
	 */
	bool UIngameMenuControllerInterface::IsIngameMenuActive()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IngameMenuControllerInterface.IsIngameMenuActive");
		
		UIngameMenuControllerInterface_IsIngameMenuActive_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IngameMenuControllerInterface.GetPreMenuParameters
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  preMenuTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     preMenuVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIngameMenuControllerInterface::GetPreMenuParameters(struct FTransform* preMenuTransform, struct FVector* preMenuVelocity)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IngameMenuControllerInterface.GetPreMenuParameters");
		
		UIngameMenuControllerInterface_GetPreMenuParameters_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (preMenuTransform != nullptr)
			*preMenuTransform = params.preMenuTransform;
		if (preMenuVelocity != nullptr)
			*preMenuVelocity = params.preMenuVelocity;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IngameMenuControllerInterface.CloseIngameMenu
	 * 		Flags  -> ()
	 */
	void UIngameMenuControllerInterface::CloseIngameMenu()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IngameMenuControllerInterface.CloseIngameMenu");
		
		UIngameMenuControllerInterface_CloseIngameMenu_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIngameMenuControllerInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIngameMenuControllerInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IngameMenuControllerInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TrySetVector
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UINIManager::TrySetVector(const class FString& Filename, const class FString& Section, const class FString& Key, const struct FVector& Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TrySetVector");
		
		UINIManager_TrySetVector_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TrySetString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Value                                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UINIManager::TrySetString(const class FString& Filename, const class FString& Section, const class FString& Key, const class FString& Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TrySetString");
		
		UINIManager_TrySetString_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TrySetInt
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UINIManager::TrySetInt(const class FString& Filename, const class FString& Section, const class FString& Key, int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TrySetInt");
		
		UINIManager_TrySetInt_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TrySetFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UINIManager::TrySetFloat(const class FString& Filename, const class FString& Section, const class FString& Key, float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TrySetFloat");
		
		UINIManager_TrySetFloat_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TrySetBool
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UINIManager::TrySetBool(const class FString& Filename, const class FString& Section, const class FString& Key, bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TrySetBool");
		
		UINIManager_TrySetBool_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TryGetVector
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector UINIManager::TryGetVector(const class FString& Filename, const class FString& Section, const class FString& Key)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TryGetVector");
		
		UINIManager_TryGetVector_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TryGetString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UINIManager::TryGetString(const class FString& Filename, const class FString& Section, const class FString& Key)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TryGetString");
		
		UINIManager_TryGetString_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TryGetInt
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UINIManager::TryGetInt(const class FString& Filename, const class FString& Section, const class FString& Key)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TryGetInt");
		
		UINIManager_TryGetInt_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TryGetFloat
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UINIManager::TryGetFloat(const class FString& Filename, const class FString& Section, const class FString& Key)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TryGetFloat");
		
		UINIManager_TryGetFloat_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.TryGetBool
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UINIManager::TryGetBool(const class FString& Filename, const class FString& Section, const class FString& Key)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.TryGetBool");
		
		UINIManager_TryGetBool_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.StoreInUserSave
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UINIManager::StoreInUserSave(const class FString& Filename)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.StoreInUserSave");
		
		UINIManager_StoreInUserSave_Params params {};
		params.Filename = Filename;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.GetStringSilent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UINIManager::GetStringSilent(const class FString& Filename, const class FString& Section, const class FString& Key)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.GetStringSilent");
		
		UINIManager_GetStringSilent_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.GetINIManager
	 * 		Flags  -> ()
	 */
	class UINIManager* UINIManager::GetINIManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.GetINIManager");
		
		UINIManager_GetINIManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INIManager.Exists
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Filename                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Section                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Key                                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UINIManager::Exists(const class FString& Filename, const class FString& Section, const class FString& Key)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INIManager.Exists");
		
		UINIManager_Exists_Params params {};
		params.Filename = Filename;
		params.Section = Section;
		params.Key = Key;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UINIManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UINIManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.INIManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INPC.SetDebug
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               NewDebug                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UINPC::SetDebug(bool NewDebug)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INPC.SetDebug");
		
		UINPC_SetDebug_Params params {};
		params.NewDebug = NewDebug;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INPC.IsCriticalHit
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPrimitiveComponent*                         HitComponent                                               (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FName                                        BoneName                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UINPC::IsCriticalHit(class UPrimitiveComponent* HitComponent, const class FName& BoneName)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INPC.IsCriticalHit");
		
		UINPC_IsCriticalHit_Params params {};
		params.HitComponent = HitComponent;
		params.BoneName = BoneName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INPC.IsAttacksLocked
	 * 		Flags  -> ()
	 */
	bool UINPC::IsAttacksLocked()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INPC.IsAttacksLocked");
		
		UINPC_IsAttacksLocked_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INPC.IsArmored
	 * 		Flags  -> ()
	 */
	bool UINPC::IsArmored()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INPC.IsArmored");
		
		UINPC_IsArmored_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INPC.GetNPCInfo
	 * 		Flags  -> ()
	 */
	struct FPRNPCInfo UINPC::GetNPCInfo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INPC.GetNPCInfo");
		
		UINPC_GetNPCInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INPC.GetIDs
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TypeID                                                     (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      InstanceId                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UINPC::GetIDs(struct FGameplayTag* TypeID, class FString* InstanceId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INPC.GetIDs");
		
		UINPC_GetIDs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (TypeID != nullptr)
			*TypeID = params.TypeID;
		if (InstanceId != nullptr)
			*InstanceId = params.InstanceId;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.INPC.Alert
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Target                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Location                                                   (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UINPC::Alert(class AActor* Target, const struct FTransform& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.INPC.Alert");
		
		UINPC_Alert_Params params {};
		params.Target = Target;
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UINPC.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UINPC::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.INPC");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UInventoryItemsCollection.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UInventoryItemsCollection::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.InventoryItemsCollection");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UOpenedStashIDs.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UOpenedStashIDs::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.OpenedStashIDs");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameInventory.SetAmmoBeltContent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FGameplayTag>                        beltContent                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UGameInventory::SetAmmoBeltContent(const class FString& InstanceId, TArray<struct FGameplayTag> beltContent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameInventory.SetAmmoBeltContent");
		
		UGameInventory_SetAmmoBeltContent_Params params {};
		params.InstanceId = InstanceId;
		params.beltContent = beltContent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameInventory.GetItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UInventoryItem* UGameInventory::GetItem(const class FString& InstanceId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameInventory.GetItem");
		
		UGameInventory_GetItem_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameInventory.GetAmmoBeltContent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FGameplayTag>                        beltContent                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UGameInventory::GetAmmoBeltContent(const class FString& InstanceId, TArray<struct FGameplayTag>* beltContent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameInventory.GetAmmoBeltContent");
		
		UGameInventory_GetAmmoBeltContent_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (beltContent != nullptr)
			*beltContent = params.beltContent;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UGameInventory.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UGameInventory::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.GameInventory");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.UpdateUpgrades
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FGameplayTag>                        UpgradeIDs                                                 (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bChangeMoney                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryItem::UpdateUpgrades(TArray<struct FGameplayTag> UpgradeIDs, bool bChangeMoney)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.UpdateUpgrades");
		
		UInventoryItem_UpdateUpgrades_Params params {};
		params.UpgradeIDs = UpgradeIDs;
		params.bChangeMoney = bChangeMoney;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.UpdateDurabilityByUpgrade
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                UpgradeID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::UpdateDurabilityByUpgrade(const struct FGameplayTag& UpgradeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.UpdateDurabilityByUpgrade");
		
		UInventoryItem_UpdateDurabilityByUpgrade_Params params {};
		params.UpgradeID = UpgradeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.SwitchFireMode
	 * 		Flags  -> ()
	 */
	bool UInventoryItem::SwitchFireMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.SwitchFireMode");
		
		UInventoryItem_SwitchFireMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.SetFireMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EWeaponFireMode                                    FireMode                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryItem::SetFireMode(EWeaponFireMode FireMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.SetFireMode");
		
		UInventoryItem_SetFireMode_Params params {};
		params.FireMode = FireMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.SetDurability
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::SetDurability(float Value, bool* bSuccess)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.SetDurability");
		
		UInventoryItem_SetDurability_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.SetChamberAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ChamberAmmo                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::SetChamberAmmo(const struct FGameplayTag& ChamberAmmo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.SetChamberAmmo");
		
		UInventoryItem_SetChamberAmmo_Params params {};
		params.ChamberAmmo = ChamberAmmo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.SetBoltState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EWeaponBoltState                                   BoltState                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::SetBoltState(EWeaponBoltState BoltState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.SetBoltState");
		
		UInventoryItem_SetBoltState_Params params {};
		params.BoltState = BoltState;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.SetAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FGameplayTag>                        Ammo                                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::SetAmmo(TArray<struct FGameplayTag> Ammo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.SetAmmo");
		
		UInventoryItem_SetAmmo_Params params {};
		params.Ammo = Ammo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.RemoveUpgrade
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                UpgradeID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryItem::RemoveUpgrade(const struct FGameplayTag& UpgradeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.RemoveUpgrade");
		
		UInventoryItem_RemoveUpgrade_Params params {};
		params.UpgradeID = UpgradeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.RemoveExactAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Index                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                Ammo                                                       (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::RemoveExactAmmo(int32_t Index, bool* bSuccess, struct FGameplayTag* Ammo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.RemoveExactAmmo");
		
		UInventoryItem_RemoveExactAmmo_Params params {};
		params.Index = Index;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (Ammo != nullptr)
			*Ammo = params.Ammo;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.RemoveAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                Ammo                                                       (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::RemoveAmmo(bool* bSuccess, struct FGameplayTag* Ammo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.RemoveAmmo");
		
		UInventoryItem_RemoveAmmo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (Ammo != nullptr)
			*Ammo = params.Ammo;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.PrintItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::PrintItem(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.PrintItem");
		
		UInventoryItem_PrintItem_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.IsUpgradeAvailable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                UpgradeID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bMoneyCheck                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryItem::IsUpgradeAvailable(const struct FGameplayTag& UpgradeID, bool bMoneyCheck)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.IsUpgradeAvailable");
		
		UInventoryItem_IsUpgradeAvailable_Params params {};
		params.UpgradeID = UpgradeID;
		params.bMoneyCheck = bMoneyCheck;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.IsRepairable
	 * 		Flags  -> ()
	 */
	bool UInventoryItem::IsRepairable()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.IsRepairable");
		
		UInventoryItem_IsRepairable_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.IsArmorItem
	 * 		Flags  -> ()
	 */
	bool UInventoryItem::IsArmorItem()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.IsArmorItem");
		
		UInventoryItem_IsArmorItem_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.IsAmmoTypeAcceptable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                AmmoTag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryItem::IsAmmoTypeAcceptable(const struct FGameplayTag& AmmoTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.IsAmmoTypeAcceptable");
		
		UInventoryItem_IsAmmoTypeAcceptable_Params params {};
		params.AmmoTag = AmmoTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.IsActorOfAcceptableAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      AmmoActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bAcceptable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                AmmoTag                                                    (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::IsActorOfAcceptableAmmo(class AActor* AmmoActor, bool* bAcceptable, struct FGameplayTag* AmmoTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.IsActorOfAcceptableAmmo");
		
		UInventoryItem_IsActorOfAcceptableAmmo_Params params {};
		params.AmmoActor = AmmoActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bAcceptable != nullptr)
			*bAcceptable = params.bAcceptable;
		if (AmmoTag != nullptr)
			*AmmoTag = params.AmmoTag;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.InstallUpgrade
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                UpgradeID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bChangeMoney                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryItem::InstallUpgrade(const struct FGameplayTag& UpgradeID, bool bChangeMoney)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.InstallUpgrade");
		
		UInventoryItem_InstallUpgrade_Params params {};
		params.UpgradeID = UpgradeID;
		params.bChangeMoney = bChangeMoney;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.HasFireMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EWeaponFireMode                                    FireMode                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryItem::HasFireMode(EWeaponFireMode FireMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.HasFireMode");
		
		UInventoryItem_HasFireMode_Params params {};
		params.FireMode = FireMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.HasDamageCategoryArmor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EDamageCategory                                    DamageCategory                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryItem::HasDamageCategoryArmor(EDamageCategory DamageCategory)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.HasDamageCategoryArmor");
		
		UInventoryItem_HasDamageCategoryArmor_Params params {};
		params.DamageCategory = DamageCategory;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetWeaponInfo
	 * 		Flags  -> ()
	 */
	struct FWeaponInfo UInventoryItem::GetWeaponInfo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetWeaponInfo");
		
		UInventoryItem_GetWeaponInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetSilencerAttachment
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              AttachItem                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::GetSilencerAttachment(class UInventoryItem** AttachItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetSilencerAttachment");
		
		UInventoryItem_GetSilencerAttachment_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (AttachItem != nullptr)
			*AttachItem = params.AttachItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetSellPrice
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIgnoreIfAttached                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bItemOnly                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UInventoryItem::GetSellPrice(bool bIgnoreIfAttached, bool bItemOnly)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetSellPrice");
		
		UInventoryItem_GetSellPrice_Params params {};
		params.bIgnoreIfAttached = bIgnoreIfAttached;
		params.bItemOnly = bItemOnly;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetRepairTime
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIgnoreIfAttached                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UInventoryItem::GetRepairTime(bool bIgnoreIfAttached)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetRepairTime");
		
		UInventoryItem_GetRepairTime_Params params {};
		params.bIgnoreIfAttached = bIgnoreIfAttached;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetRepairPrice
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIgnoreIfAttached                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UInventoryItem::GetRepairPrice(bool bIgnoreIfAttached)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetRepairPrice");
		
		UInventoryItem_GetRepairPrice_Params params {};
		params.bIgnoreIfAttached = bIgnoreIfAttached;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetPossibleUpgrades
	 * 		Flags  -> ()
	 */
	TArray<struct FGameplayTag> UInventoryItem::GetPossibleUpgrades()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetPossibleUpgrades");
		
		UInventoryItem_GetPossibleUpgrades_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetNextAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                NextAmmoTag                                                (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::GetNextAmmo(struct FGameplayTag* NextAmmoTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetNextAmmo");
		
		UInventoryItem_GetNextAmmo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (NextAmmoTag != nullptr)
			*NextAmmoTag = params.NextAmmoTag;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetMaxDurability
	 * 		Flags  -> ()
	 */
	float UInventoryItem::GetMaxDurability()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetMaxDurability");
		
		UInventoryItem_GetMaxDurability_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetMaxAmmoCapacity
	 * 		Flags  -> ()
	 */
	int32_t UInventoryItem::GetMaxAmmoCapacity()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetMaxAmmoCapacity");
		
		UInventoryItem_GetMaxAmmoCapacity_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetMagAttachment
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              AttachItem                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::GetMagAttachment(class UInventoryItem** AttachItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetMagAttachment");
		
		UInventoryItem_GetMagAttachment_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (AttachItem != nullptr)
			*AttachItem = params.AttachItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetItemWeight
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIgnoreAttachments                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UInventoryItem::GetItemWeight(bool bIgnoreAttachments)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetItemWeight");
		
		UInventoryItem_GetItemWeight_Params params {};
		params.bIgnoreAttachments = bIgnoreAttachments;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetItemInfo
	 * 		Flags  -> ()
	 */
	struct FPRItemInfo UInventoryItem::GetItemInfo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetItemInfo");
		
		UInventoryItem_GetItemInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetFireMode
	 * 		Flags  -> ()
	 */
	EWeaponFireMode UInventoryItem::GetFireMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetFireMode");
		
		UInventoryItem_GetFireMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetDurabilityRatio
	 * 		Flags  -> ()
	 */
	float UInventoryItem::GetDurabilityRatio()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetDurabilityRatio");
		
		UInventoryItem_GetDurabilityRatio_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetDamageCategoryArmor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EDamageCategory                                    DamageCategory                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UInventoryItem::GetDamageCategoryArmor(EDamageCategory DamageCategory)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetDamageCategoryArmor");
		
		UInventoryItem_GetDamageCategoryArmor_Params params {};
		params.DamageCategory = DamageCategory;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetBoltState
	 * 		Flags  -> ()
	 */
	EWeaponBoltState UInventoryItem::GetBoltState()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetBoltState");
		
		UInventoryItem_GetBoltState_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetAttachments
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TypeTag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      AttachItems                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::GetAttachments(const struct FGameplayTag& TypeTag, TArray<class UInventoryItem*>* AttachItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetAttachments");
		
		UInventoryItem_GetAttachments_Params params {};
		params.TypeTag = TypeTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (AttachItems != nullptr)
			*AttachItems = params.AttachItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetAmmoTypeName
	 * 		Flags  -> ()
	 */
	class FString UInventoryItem::GetAmmoTypeName()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetAmmoTypeName");
		
		UInventoryItem_GetAmmoTypeName_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetAmmoString
	 * 		Flags  -> ()
	 */
	class FString UInventoryItem::GetAmmoString()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetAmmoString");
		
		UInventoryItem_GetAmmoString_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetAmmoContainerInfo
	 * 		Flags  -> ()
	 */
	struct FPRAmmoContainerInfo UInventoryItem::GetAmmoContainerInfo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetAmmoContainerInfo");
		
		UInventoryItem_GetAmmoContainerInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.GetAllAttachments
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UInventoryItem*>                      AttachItems                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::GetAllAttachments(TArray<class UInventoryItem*>* AttachItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.GetAllAttachments");
		
		UInventoryItem_GetAllAttachments_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (AttachItems != nullptr)
			*AttachItems = params.AttachItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.ChangeDurabilityByRatio
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Ratio                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EDamageCategory                                    DamageCategory                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              ChangedBy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::ChangeDurabilityByRatio(float Ratio, EDamageCategory DamageCategory, bool* bSuccess, float* ChangedBy)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.ChangeDurabilityByRatio");
		
		UInventoryItem_ChangeDurabilityByRatio_Params params {};
		params.Ratio = Ratio;
		params.DamageCategory = DamageCategory;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (ChangedBy != nullptr)
			*ChangedBy = params.ChangedBy;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.ChangeDurability
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              bY                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EDamageCategory                                    DamageCategory                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              ChangedBy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::ChangeDurability(float bY, EDamageCategory DamageCategory, bool* bSuccess, float* ChangedBy)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.ChangeDurability");
		
		UInventoryItem_ChangeDurability_Params params {};
		params.bY = bY;
		params.DamageCategory = DamageCategory;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (ChangedBy != nullptr)
			*ChangedBy = params.ChangedBy;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.ChangeAmmoContainerDurability
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              ChangedBy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::ChangeAmmoContainerDurability(bool* bSuccess, float* ChangedBy)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.ChangeAmmoContainerDurability");
		
		UInventoryItem_ChangeAmmoContainerDurability_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (ChangedBy != nullptr)
			*ChangedBy = params.ChangedBy;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.ChamberNextAmmo
	 * 		Flags  -> ()
	 */
	void UInventoryItem::ChamberNextAmmo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.ChamberNextAmmo");
		
		UInventoryItem_ChamberNextAmmo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryItem.AddAmmo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                AmmoTag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryItem::AddAmmo(const struct FGameplayTag& AmmoTag, bool* bSuccess)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryItem.AddAmmo");
		
		UInventoryItem_AddAmmo_Params params {};
		params.AmmoTag = AmmoTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UInventoryItem.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UInventoryItem::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.InventoryItem");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.TakeActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                holderID                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::TakeActor(class AActor* Actor, const struct FGameplayTag& holderID, bool* success, class UInventoryItem** InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.TakeActor");
		
		UInventoryManager_TakeActor_Params params {};
		params.Actor = Actor;
		params.holderID = holderID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (InventoryItem != nullptr)
			*InventoryItem = params.InventoryItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.SellItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class AActor*>                              Items                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		float                                              PriceMultiplier                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::SellItems(TArray<class AActor*> Items, float PriceMultiplier)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.SellItems");
		
		UInventoryManager_SellItems_Params params {};
		params.Items = Items;
		params.PriceMultiplier = PriceMultiplier;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.RepairItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UInventoryItem*>                      Items                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::RepairItems(TArray<class UInventoryItem*> Items, bool* bSuccess)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.RepairItems");
		
		UInventoryManager_RepairItems_Params params {};
		params.Items = Items;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.RemovePlayerItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bDestroyActors                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::RemovePlayerItems(bool bDestroyActors)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.RemovePlayerItems");
		
		UInventoryManager_RemovePlayerItems_Params params {};
		params.bDestroyActors = bDestroyActors;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.RemoveItemByRef
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::RemoveItemByRef(class AActor* Actor, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.RemoveItemByRef");
		
		UInventoryManager_RemoveItemByRef_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.RemoveItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryManager::RemoveItem(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.RemoveItem");
		
		UInventoryManager_RemoveItem_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.RecordUniqueItemSpawn
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::RecordUniqueItemSpawn(const class FString& InstanceId, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.RecordUniqueItemSpawn");
		
		UInventoryManager_RecordUniqueItemSpawn_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.RecordStashOpen
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                stashType                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      stashID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::RecordStashOpen(const struct FGameplayTag& stashType, const class FString& stashID, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.RecordStashOpen");
		
		UInventoryManager_RecordStashOpen_Params params {};
		params.stashType = stashType;
		params.stashID = stashID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.OnSecondsAddedToTime
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Seconds                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::OnSecondsAddedToTime(float Seconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.OnSecondsAddedToTime");
		
		UInventoryManager_OnSecondsAddedToTime_Params params {};
		params.Seconds = Seconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.KillPlayerItems
	 * 		Flags  -> ()
	 */
	void UInventoryManager::KillPlayerItems()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.KillPlayerItems");
		
		UInventoryManager_KillPlayerItems_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.KillAllInventoryItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               fullClear                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::KillAllInventoryItems(bool fullClear)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.KillAllInventoryItems");
		
		UInventoryManager_KillAllInventoryItems_Params params {};
		params.fullClear = fullClear;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.IsUniqueItemSpawned
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               spawned                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::IsUniqueItemSpawned(const class FString& InstanceId, bool* spawned)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.IsUniqueItemSpawned");
		
		UInventoryManager_IsUniqueItemSpawned_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (spawned != nullptr)
			*spawned = params.spawned;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.IsStashOpened
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                stashType                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      stashID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               opened                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::IsStashOpened(const struct FGameplayTag& stashType, const class FString& stashID, bool* opened)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.IsStashOpened");
		
		UInventoryManager_IsStashOpened_Params params {};
		params.stashType = stashType;
		params.stashID = stashID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (opened != nullptr)
			*opened = params.opened;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.IsNeedRepair
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryManager::IsNeedRepair(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.IsNeedRepair");
		
		UInventoryManager_IsNeedRepair_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.IsInPlayerInventory
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryManager::IsInPlayerInventory(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.IsInPlayerInventory");
		
		UInventoryManager_IsInPlayerInventory_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.IsInLevelsInventory
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryManager::IsInLevelsInventory(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.IsInLevelsInventory");
		
		UInventoryManager_IsInLevelsInventory_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.IsInHubInventory
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryManager::IsInHubInventory(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.IsInHubInventory");
		
		UInventoryManager_IsInHubInventory_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.IsActorInPlayerInventory
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      itemActor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryManager::IsActorInPlayerInventory(class AActor* itemActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.IsActorInPlayerInventory");
		
		UInventoryManager_IsActorInPlayerInventory_Params params {};
		params.itemActor = itemActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetSilencerAttachment
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              parentItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              AttachItem                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetSilencerAttachment(class UInventoryItem* parentItem, class UInventoryItem** AttachItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetSilencerAttachment");
		
		UInventoryManager_GetSilencerAttachment_Params params {};
		params.parentItem = parentItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (AttachItem != nullptr)
			*AttachItem = params.AttachItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetRepairStatus
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bEmpty                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bReady                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      RepairItems                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetRepairStatus(bool* bEmpty, bool* bReady, TArray<class UInventoryItem*>* RepairItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetRepairStatus");
		
		UInventoryManager_GetRepairStatus_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bEmpty != nullptr)
			*bEmpty = params.bEmpty;
		if (bReady != nullptr)
			*bReady = params.bReady;
		if (RepairItems != nullptr)
			*RepairItems = params.RepairItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetPlayerItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UInventoryItem*>                      inventoryItems                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetPlayerItems(TArray<class UInventoryItem*>* inventoryItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetPlayerItems");
		
		UInventoryManager_GetPlayerItems_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (inventoryItems != nullptr)
			*inventoryItems = params.inventoryItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetPlayerInventoryCollection
	 * 		Flags  -> ()
	 */
	class UInventoryItemsCollection* UInventoryManager::GetPlayerInventoryCollection()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetPlayerInventoryCollection");
		
		UInventoryManager_GetPlayerInventoryCollection_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetMagAttachment
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              parentItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              AttachItem                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetMagAttachment(class UInventoryItem* parentItem, class UInventoryItem** AttachItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetMagAttachment");
		
		UInventoryManager_GetMagAttachment_Params params {};
		params.parentItem = parentItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (AttachItem != nullptr)
			*AttachItem = params.AttachItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetLevelsItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TMap<struct FGameplayTag, class UInventoryItemsCollection*> levelsItems                                                (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetLevelsItems(TMap<struct FGameplayTag, class UInventoryItemsCollection*>* levelsItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetLevelsItems");
		
		UInventoryManager_GetLevelsItems_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (levelsItems != nullptr)
			*levelsItems = params.levelsItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetItemLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FGameplayTag UInventoryManager::GetItemLevel(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetItemLevel");
		
		UInventoryManager_GetItemLevel_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetItemBP
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetItemBP(const class FString& InstanceId, class UInventoryItem** InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetItemBP");
		
		UInventoryManager_GetItemBP_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (InventoryItem != nullptr)
			*InventoryItem = params.InventoryItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetInventoryWeight
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                inHolderID                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              TotalWeight                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetInventoryWeight(const struct FGameplayTag& inHolderID, float* TotalWeight)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetInventoryWeight");
		
		UInventoryManager_GetInventoryWeight_Params params {};
		params.inHolderID = inHolderID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (TotalWeight != nullptr)
			*TotalWeight = params.TotalWeight;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetInventoryManager
	 * 		Flags  -> ()
	 */
	class UInventoryManager* UInventoryManager::GetInventoryManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetInventoryManager");
		
		UInventoryManager_GetInventoryManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetCurrentLevelItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UInventoryItem*>                      inventoryItems                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetCurrentLevelItems(TArray<class UInventoryItem*>* inventoryItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetCurrentLevelItems");
		
		UInventoryManager_GetCurrentLevelItems_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (inventoryItems != nullptr)
			*inventoryItems = params.inventoryItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetAttachments
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              parentItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                TypeTag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      AttachItems                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetAttachments(class UInventoryItem* parentItem, const struct FGameplayTag& TypeTag, TArray<class UInventoryItem*>* AttachItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetAttachments");
		
		UInventoryManager_GetAttachments_Params params {};
		params.parentItem = parentItem;
		params.TypeTag = TypeTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (AttachItems != nullptr)
			*AttachItems = params.AttachItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetAttachedToSlot
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              parentItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EItemSlot                                          Slot                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              AttachItem                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetAttachedToSlot(class UInventoryItem* parentItem, EItemSlot Slot, class UInventoryItem** AttachItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetAttachedToSlot");
		
		UInventoryManager_GetAttachedToSlot_Params params {};
		params.parentItem = parentItem;
		params.Slot = Slot;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (AttachItem != nullptr)
			*AttachItem = params.AttachItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.GetAllAttachments
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              parentItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      AttachItems                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::GetAllAttachments(class UInventoryItem* parentItem, TArray<class UInventoryItem*>* AttachItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.GetAllAttachments");
		
		UInventoryManager_GetAllAttachments_Params params {};
		params.parentItem = parentItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (AttachItems != nullptr)
			*AttachItems = params.AttachItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.FindItemsByTagInPlayer
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               strict                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      inventoryItems                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::FindItemsByTagInPlayer(const struct FGameplayTag& Tag, bool strict, bool* success, TArray<class UInventoryItem*>* inventoryItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.FindItemsByTagInPlayer");
		
		UInventoryManager_FindItemsByTagInPlayer_Params params {};
		params.Tag = Tag;
		params.strict = strict;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (inventoryItems != nullptr)
			*inventoryItems = params.inventoryItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.FindItemsByTagInLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Level                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                Tag                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               strict                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      inventoryItems                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::FindItemsByTagInLevel(const struct FGameplayTag& Level, const struct FGameplayTag& Tag, bool strict, bool* success, TArray<class UInventoryItem*>* inventoryItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.FindItemsByTagInLevel");
		
		UInventoryManager_FindItemsByTagInLevel_Params params {};
		params.Level = Level;
		params.Tag = Tag;
		params.strict = strict;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (inventoryItems != nullptr)
			*inventoryItems = params.inventoryItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.FindItemsByTag
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               strict                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      inventoryItems                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::FindItemsByTag(const struct FGameplayTag& Tag, bool strict, bool* success, TArray<class UInventoryItem*>* inventoryItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.FindItemsByTag");
		
		UInventoryManager_FindItemsByTag_Params params {};
		params.Tag = Tag;
		params.strict = strict;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (inventoryItems != nullptr)
			*inventoryItems = params.inventoryItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.FindItemsByHolderID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                holderID                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      inventoryItems                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::FindItemsByHolderID(const struct FGameplayTag& holderID, bool* success, TArray<class UInventoryItem*>* inventoryItems)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.FindItemsByHolderID");
		
		UInventoryManager_FindItemsByHolderID_Params params {};
		params.holderID = holderID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (inventoryItems != nullptr)
			*inventoryItems = params.inventoryItems;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.FindItemByRefInPlayer
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::FindItemByRefInPlayer(class AActor* Actor, bool* success, class UInventoryItem** InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.FindItemByRefInPlayer");
		
		UInventoryManager_FindItemByRefInPlayer_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (InventoryItem != nullptr)
			*InventoryItem = params.InventoryItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.FindItemByRef
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::FindItemByRef(class AActor* Actor, bool* success, class UInventoryItem** InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.FindItemByRef");
		
		UInventoryManager_FindItemByRef_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (InventoryItem != nullptr)
			*InventoryItem = params.InventoryItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.DropPlayerInventory
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bKillActors                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bDropOnGround                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                FromHolderID                                               (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     LocationOffset                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::DropPlayerInventory(bool bKillActors, bool bDropOnGround, const struct FGameplayTag& FromHolderID, const struct FVector& LocationOffset)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.DropPlayerInventory");
		
		UInventoryManager_DropPlayerInventory_Params params {};
		params.bKillActors = bKillActors;
		params.bDropOnGround = bDropOnGround;
		params.FromHolderID = FromHolderID;
		params.LocationOffset = LocationOffset;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.DropItemActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bForceBackpackDrop                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::DropItemActor(class AActor* Actor, bool bForceBackpackDrop, bool* bSuccess, class UInventoryItem** InventoryItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.DropItemActor");
		
		UInventoryManager_DropItemActor_Params params {};
		params.Actor = Actor;
		params.bForceBackpackDrop = bForceBackpackDrop;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (InventoryItem != nullptr)
			*InventoryItem = params.InventoryItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.DetachItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              itemParent                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              itemAttach                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::DetachItems(class UInventoryItem* itemParent, class UInventoryItem* itemAttach, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.DetachItems");
		
		UInventoryManager_DetachItems_Params params {};
		params.itemParent = itemParent;
		params.itemAttach = itemAttach;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.DetachItemActors
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Parent                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      attach                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::DetachItemActors(class AActor* Parent, class AActor* attach, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.DetachItemActors");
		
		UInventoryManager_DetachItemActors_Params params {};
		params.Parent = Parent;
		params.attach = attach;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.ClearAllItemReferences
	 * 		Flags  -> ()
	 */
	void UInventoryManager::ClearAllItemReferences()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.ClearAllItemReferences");
		
		UInventoryManager_ClearAllItemReferences_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.CheckPlayerItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemType                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               strictItemType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                holderID                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               strictHolderID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::CheckPlayerItem(const struct FGameplayTag& ItemType, bool strictItemType, const struct FGameplayTag& holderID, bool strictHolderID, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.CheckPlayerItem");
		
		UInventoryManager_CheckPlayerItem_Params params {};
		params.ItemType = ItemType;
		params.strictItemType = strictItemType;
		params.holderID = holderID;
		params.strictHolderID = strictHolderID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.CheckItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      itemInstanceID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               pick                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                holderID                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               strictHolderID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UInventoryManager::CheckItem(const class FString& itemInstanceID, bool pick, const struct FGameplayTag& holderID, bool strictHolderID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.CheckItem");
		
		UInventoryManager_CheckItem_Params params {};
		params.itemInstanceID = itemInstanceID;
		params.pick = pick;
		params.holderID = holderID;
		params.strictHolderID = strictHolderID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.CheckAttachments
	 * 		Flags  -> ()
	 */
	void UInventoryManager::CheckAttachments()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.CheckAttachments");
		
		UInventoryManager_CheckAttachments_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.AttachItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              itemParent                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              itemAttach                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EItemSlot                                          attachSlot                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::AttachItems(class UInventoryItem* itemParent, class UInventoryItem* itemAttach, EItemSlot attachSlot, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.AttachItems");
		
		UInventoryManager_AttachItems_Params params {};
		params.itemParent = itemParent;
		params.itemAttach = itemAttach;
		params.attachSlot = attachSlot;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.AttachItemActors
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Parent                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      attach                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EItemSlot                                          attachToSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::AttachItemActors(class AActor* Parent, class AActor* attach, EItemSlot attachToSlot, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.AttachItemActors");
		
		UInventoryManager_AttachItemActors_Params params {};
		params.Parent = Parent;
		params.attach = attach;
		params.attachToSlot = attachToSlot;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.AddItemToPlayer
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::AddItemToPlayer(class UInventoryItem* Item, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.AddItemToPlayer");
		
		UInventoryManager_AddItemToPlayer_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.AddItemToLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               noAttachmentsCheck                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::AddItemToLevel(class UInventoryItem* Item, bool noAttachmentsCheck, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.AddItemToLevel");
		
		UInventoryManager_AddItemToLevel_Params params {};
		params.Item = Item;
		params.noAttachmentsCheck = noAttachmentsCheck;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.AddDefaultItemToLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               noAttachmentsCheck                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UInventoryManager::AddDefaultItemToLevel(const struct FGameplayTag& ItemTag, const struct FTransform& Transform, bool noAttachmentsCheck, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.AddDefaultItemToLevel");
		
		UInventoryManager_AddDefaultItemToLevel_Params params {};
		params.ItemTag = ItemTag;
		params.Transform = Transform;
		params.noAttachmentsCheck = noAttachmentsCheck;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.InventoryManager.AddConfigItemToLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPRItemConfig*                               itemConfig                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               noAttachmentsCheck                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UInventoryItem* UInventoryManager::AddConfigItemToLevel(class UPRItemConfig* itemConfig, const struct FTransform& Transform, bool noAttachmentsCheck, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.InventoryManager.AddConfigItemToLevel");
		
		UInventoryManager_AddConfigItemToLevel_Params params {};
		params.itemConfig = itemConfig;
		params.Transform = Transform;
		params.noAttachmentsCheck = noAttachmentsCheck;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UInventoryManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UInventoryManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.InventoryManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPhysicsActor.GetPhysicsRootComponent
	 * 		Flags  -> ()
	 */
	class UPrimitiveComponent* UIPhysicsActor::GetPhysicsRootComponent()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPhysicsActor.GetPhysicsRootComponent");
		
		UIPhysicsActor_GetPhysicsRootComponent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIPhysicsActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIPhysicsActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IPhysicsActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPlayFootstepSounds.StopFootstepLoop
	 * 		Flags  -> ()
	 */
	void UIPlayFootstepSounds::StopFootstepLoop()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPlayFootstepSounds.StopFootstepLoop");
		
		UIPlayFootstepSounds_StopFootstepLoop_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPlayFootstepSounds.StartFootstepLoop
	 * 		Flags  -> ()
	 */
	void UIPlayFootstepSounds::StartFootstepLoop()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPlayFootstepSounds.StartFootstepLoop");
		
		UIPlayFootstepSounds_StartFootstepLoop_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPlayFootstepSounds.PlayFootstepSound
	 * 		Flags  -> ()
	 */
	void UIPlayFootstepSounds::PlayFootstepSound()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPlayFootstepSounds.PlayFootstepSound");
		
		UIPlayFootstepSounds_PlayFootstepSound_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIPlayFootstepSounds.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIPlayFootstepSounds::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IPlayFootstepSounds");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPooledActor.PushToPoolActor
	 * 		Flags  -> ()
	 */
	void UIPooledActor::PushToPoolActor()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPooledActor.PushToPoolActor");
		
		UIPooledActor_PushToPoolActor_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPooledActor.PopFromPoolActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UIPooledActor::PopFromPoolActor(const struct FTransform& Transform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPooledActor.PopFromPoolActor");
		
		UIPooledActor_PopFromPoolActor_Params params {};
		params.Transform = Transform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPooledActor.IsExcludedFromPool
	 * 		Flags  -> ()
	 */
	bool UIPooledActor::IsExcludedFromPool()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPooledActor.IsExcludedFromPool");
		
		UIPooledActor_IsExcludedFromPool_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIPooledActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIPooledActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IPooledActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.TransferToLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                LocationTag                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UIPRGameMode::TransferToLevel(const struct FGameplayTag& LevelTag, const struct FGameplayTag& LocationTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.TransferToLevel");
		
		UIPRGameMode_TransferToLevel_Params params {};
		params.LevelTag = LevelTag;
		params.LocationTag = LocationTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.SpawnSavedNPC
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FNPCGameData                                Data                                                       (ConstParm, Parm, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      SpawnerActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Radius                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bCanWalkAway                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               SnipingMode                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UIPRGameMode::SpawnSavedNPC(const struct FNPCGameData& Data, class AActor* SpawnerActor, float Radius, bool bCanWalkAway, bool SnipingMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.SpawnSavedNPC");
		
		UIPRGameMode_SpawnSavedNPC_Params params {};
		params.Data = Data;
		params.SpawnerActor = SpawnerActor;
		params.Radius = Radius;
		params.bCanWalkAway = bCanWalkAway;
		params.SnipingMode = SnipingMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.SpawnNPC
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                npcTypeID                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      SpawnerActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Radius                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bCanWalkAway                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               SnipingMode                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UIPRGameMode::SpawnNPC(const struct FGameplayTag& npcTypeID, class AActor* SpawnerActor, float Radius, bool bCanWalkAway, bool SnipingMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.SpawnNPC");
		
		UIPRGameMode_SpawnNPC_Params params {};
		params.npcTypeID = npcTypeID;
		params.SpawnerActor = SpawnerActor;
		params.Radius = Radius;
		params.bCanWalkAway = bCanWalkAway;
		params.SnipingMode = SnipingMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.SpawnItemConfig
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPRItemConfig*                               itemConfig                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bProjectOnGround                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSimulate                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bAddToPlayer                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UIPRGameMode::SpawnItemConfig(class UPRItemConfig* itemConfig, const struct FTransform& Transform, bool bProjectOnGround, bool bSimulate, bool bAddToPlayer)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.SpawnItemConfig");
		
		UIPRGameMode_SpawnItemConfig_Params params {};
		params.itemConfig = itemConfig;
		params.Transform = Transform;
		params.bProjectOnGround = bProjectOnGround;
		params.bSimulate = bSimulate;
		params.bAddToPlayer = bAddToPlayer;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.SpawnItemByType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemTypeID                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      InstanceId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bProjectOnGround                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSimulate                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UIPRGameMode::SpawnItemByType(const struct FGameplayTag& ItemTypeID, const class FString& InstanceId, const struct FTransform& Transform, bool bProjectOnGround, bool bSimulate)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.SpawnItemByType");
		
		UIPRGameMode_SpawnItemByType_Params params {};
		params.ItemTypeID = ItemTypeID;
		params.InstanceId = InstanceId;
		params.Transform = Transform;
		params.bProjectOnGround = bProjectOnGround;
		params.bSimulate = bSimulate;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.SpawnItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bProjectOnGround                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSimulate                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UIPRGameMode::SpawnItem(class UInventoryItem* InventoryItem, const struct FTransform& Transform, bool bProjectOnGround, bool bSimulate)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.SpawnItem");
		
		UIPRGameMode_SpawnItem_Params params {};
		params.InventoryItem = InventoryItem;
		params.Transform = Transform;
		params.bProjectOnGround = bProjectOnGround;
		params.bSimulate = bSimulate;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.SpawnAnomaly
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      AnomalyName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UClass*                                      AnomalyClass                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  AnomalyTransform                                           (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bProjectOnGround                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AnomalyRadius                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class APRAnomaly* UIPRGameMode::SpawnAnomaly(const class FString& AnomalyName, class UClass* AnomalyClass, const struct FTransform& AnomalyTransform, bool bProjectOnGround, float AnomalyRadius)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.SpawnAnomaly");
		
		UIPRGameMode_SpawnAnomaly_Params params {};
		params.AnomalyName = AnomalyName;
		params.AnomalyClass = AnomalyClass;
		params.AnomalyTransform = AnomalyTransform;
		params.bProjectOnGround = bProjectOnGround;
		params.AnomalyRadius = AnomalyRadius;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.SleepAllowed
	 * 		Flags  -> ()
	 */
	bool UIPRGameMode::SleepAllowed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.SleepAllowed");
		
		UIPRGameMode_SleepAllowed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.SetSleepAllowed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bAllow                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRGameMode::SetSleepAllowed(bool bAllow)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.SetSleepAllowed");
		
		UIPRGameMode_SetSleepAllowed_Params params {};
		params.bAllow = bAllow;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.ResetPlayerAndItems
	 * 		Flags  -> ()
	 */
	void UIPRGameMode::ResetPlayerAndItems()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.ResetPlayerAndItems");
		
		UIPRGameMode_ResetPlayerAndItems_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.ReprojectLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector UIPRGameMode::ReprojectLocation(const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.ReprojectLocation");
		
		UIPRGameMode_ReprojectLocation_Params params {};
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.ReEnterCurrentLevel
	 * 		Flags  -> ()
	 */
	void UIPRGameMode::ReEnterCurrentLevel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.ReEnterCurrentLevel");
		
		UIPRGameMode_ReEnterCurrentLevel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.LaunchMainMenu
	 * 		Flags  -> ()
	 */
	void UIPRGameMode::LaunchMainMenu()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.LaunchMainMenu");
		
		UIPRGameMode_LaunchMainMenu_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.LaunchGame
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bStart                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRGameMode::LaunchGame(bool bStart)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.LaunchGame");
		
		UIPRGameMode_LaunchGame_Params params {};
		params.bStart = bStart;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.GetNoiseAwarenessValue
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FName                                        Tag                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UIPRGameMode::GetNoiseAwarenessValue(const class FName& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.GetNoiseAwarenessValue");
		
		UIPRGameMode_GetNoiseAwarenessValue_Params params {};
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.GetDamageAwarenessValue
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UIPRGameMode::GetDamageAwarenessValue(float Damage)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.GetDamageAwarenessValue");
		
		UIPRGameMode_GetDamageAwarenessValue_Params params {};
		params.Damage = Damage;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.GetCurrentPlayerTransform
	 * 		Flags  -> ()
	 */
	struct FTransform UIPRGameMode::GetCurrentPlayerTransform()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.GetCurrentPlayerTransform");
		
		UIPRGameMode_GetCurrentPlayerTransform_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.FinishTutorial
	 * 		Flags  -> ()
	 */
	void UIPRGameMode::FinishTutorial()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.FinishTutorial");
		
		UIPRGameMode_FinishTutorial_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.FindSpawnLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     nearby                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              InRadius                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bReachable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRGameMode::FindSpawnLocation(const struct FVector& nearby, float InRadius, bool bReachable, bool* bSuccess, struct FVector* Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.FindSpawnLocation");
		
		UIPRGameMode_FindSpawnLocation_Params params {};
		params.nearby = nearby;
		params.InRadius = InRadius;
		params.bReachable = bReachable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (Location != nullptr)
			*Location = params.Location;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.ContinueAsFreeGame
	 * 		Flags  -> ()
	 */
	void UIPRGameMode::ContinueAsFreeGame()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.ContinueAsFreeGame");
		
		UIPRGameMode_ContinueAsFreeGame_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameMode.ApplySoundVolumes
	 * 		Flags  -> ()
	 */
	void UIPRGameMode::ApplySoundVolumes()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameMode.ApplySoundVolumes");
		
		UIPRGameMode_ApplySoundVolumes_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIPRGameMode.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIPRGameMode::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IPRGameMode");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRGameModeNative.GetIsInTransition
	 * 		Flags  -> ()
	 */
	bool UIPRGameModeNative::GetIsInTransition()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRGameModeNative.GetIsInTransition");
		
		UIPRGameModeNative_GetIsInTransition_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIPRGameModeNative.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIPRGameModeNative::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IPRGameModeNative");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.UpdateInventoryItemLocation
	 * 		Flags  -> ()
	 */
	bool UIPRItem::UpdateInventoryItemLocation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.UpdateInventoryItemLocation");
		
		UIPRItem_UpdateInventoryItemLocation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.UpdateFireMode
	 * 		Flags  -> ()
	 */
	void UIPRItem::UpdateFireMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.UpdateFireMode");
		
		UIPRItem_UpdateFireMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.UpdateAttachmentSlots
	 * 		Flags  -> ()
	 */
	void UIPRItem::UpdateAttachmentSlots()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.UpdateAttachmentSlots");
		
		UIPRItem_UpdateAttachmentSlots_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.StopUse
	 * 		Flags  -> ()
	 */
	void UIPRItem::StopUse()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.StopUse");
		
		UIPRItem_StopUse_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.SetupProxySystem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bStartWithProxy                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bStartVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::SetupProxySystem(bool bStartWithProxy, bool bStartVisible)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.SetupProxySystem");
		
		UIPRItem_SetupProxySystem_Params params {};
		params.bStartWithProxy = bStartWithProxy;
		params.bStartVisible = bStartVisible;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.SetProxyMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bUseProxy                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::SetProxyMode(bool bUseProxy)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.SetProxyMode");
		
		UIPRItem_SetProxyMode_Params params {};
		params.bUseProxy = bUseProxy;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.SetItemVisibility
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bNewVisibility                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::SetItemVisibility(bool bNewVisibility)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.SetItemVisibility");
		
		UIPRItem_SetItemVisibility_Params params {};
		params.bNewVisibility = bNewVisibility;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.SetDistanceGripEnable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               enable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::SetDistanceGripEnable(bool enable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.SetDistanceGripEnable");
		
		UIPRItem_SetDistanceGripEnable_Params params {};
		params.enable = enable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.RegisterMeshComponentsAndOmittableColliders
	 * 		Flags  -> ()
	 */
	void UIPRItem::RegisterMeshComponentsAndOmittableColliders()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.RegisterMeshComponentsAndOmittableColliders");
		
		UIPRItem_RegisterMeshComponentsAndOmittableColliders_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.Reconfigure
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              InventoryItem                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::Reconfigure(class UInventoryItem* InventoryItem, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.Reconfigure");
		
		UIPRItem_Reconfigure_Params params {};
		params.InventoryItem = InventoryItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.OnRemovedFromHolster
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UHolsterComponent*                           Holster                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::OnRemovedFromHolster(class UHolsterComponent* Holster)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.OnRemovedFromHolster");
		
		UIPRItem_OnRemovedFromHolster_Params params {};
		params.Holster = Holster;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.OnProxySystemReady
	 * 		Flags  -> ()
	 */
	void UIPRItem::OnProxySystemReady()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.OnProxySystemReady");
		
		UIPRItem_OnProxySystemReady_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.OnProxyEnabled
	 * 		Flags  -> ()
	 */
	void UIPRItem::OnProxyEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.OnProxyEnabled");
		
		UIPRItem_OnProxyEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.OnProxyDisabled
	 * 		Flags  -> ()
	 */
	void UIPRItem::OnProxyDisabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.OnProxyDisabled");
		
		UIPRItem_OnProxyDisabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.OnAddedToHolster
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UHolsterComponent*                           Holster                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::OnAddedToHolster(class UHolsterComponent* Holster)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.OnAddedToHolster");
		
		UIPRItem_OnAddedToHolster_Params params {};
		params.Holster = Holster;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.IsItemInDelivery
	 * 		Flags  -> ()
	 */
	bool UIPRItem::IsItemInDelivery()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.IsItemInDelivery");
		
		UIPRItem_IsItemInDelivery_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.InitBought
	 * 		Flags  -> ()
	 */
	void UIPRItem::InitBought()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.InitBought");
		
		UIPRItem_InitBought_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetTypeID
	 * 		Flags  -> ()
	 */
	struct FGameplayTag UIPRItem::GetTypeID()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetTypeID");
		
		UIPRItem_GetTypeID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetProxyMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bUseProxy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::GetProxyMode(bool* bUseProxy)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetProxyMode");
		
		UIPRItem_GetProxyMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bUseProxy != nullptr)
			*bUseProxy = params.bUseProxy;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetPreparedItem
	 * 		Flags  -> ()
	 */
	class UInventoryItem* UIPRItem::GetPreparedItem()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetPreparedItem");
		
		UIPRItem_GetPreparedItem_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetPoseShift
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FTransform UIPRItem::GetPoseShift(EPRHandPoseType poseType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetPoseShift");
		
		UIPRItem_GetPoseShift_Params params {};
		params.poseType = poseType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetItemVisibility
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIsVisible                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::GetItemVisibility(bool* bIsVisible)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetItemVisibility");
		
		UIPRItem_GetItemVisibility_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bIsVisible != nullptr)
			*bIsVisible = params.bIsVisible;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetItemInfo
	 * 		Flags  -> ()
	 */
	struct FPRItemInfo UIPRItem::GetItemInfo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetItemInfo");
		
		UIPRItem_GetItemInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetItemCenterTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               socket                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  itemCenterTransform                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::GetItemCenterTransform(bool* socket, struct FTransform* itemCenterTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetItemCenterTransform");
		
		UIPRItem_GetItemCenterTransform_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (socket != nullptr)
			*socket = params.socket;
		if (itemCenterTransform != nullptr)
			*itemCenterTransform = params.itemCenterTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetInventoryItem
	 * 		Flags  -> ()
	 */
	class UInventoryItem* UIPRItem::GetInventoryItem()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetInventoryItem");
		
		UIPRItem_GetInventoryItem_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetDefaultPoseType
	 * 		Flags  -> ()
	 */
	EPRHandPoseType UIPRItem::GetDefaultPoseType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetDefaultPoseType");
		
		UIPRItem_GetDefaultPoseType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetCurrentWeight
	 * 		Flags  -> ()
	 */
	float UIPRItem::GetCurrentWeight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetCurrentWeight");
		
		UIPRItem_GetCurrentWeight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetCurrentCondition
	 * 		Flags  -> ()
	 */
	float UIPRItem::GetCurrentCondition()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetCurrentCondition");
		
		UIPRItem_GetCurrentCondition_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetConditionPercent
	 * 		Flags  -> ()
	 */
	float UIPRItem::GetConditionPercent()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetConditionPercent");
		
		UIPRItem_GetConditionPercent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetAttachmentTypeID
	 * 		Flags  -> ()
	 */
	struct FGameplayTag UIPRItem::GetAttachmentTypeID()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetAttachmentTypeID");
		
		UIPRItem_GetAttachmentTypeID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetAttachmentsList
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class FString>                              Attachments                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UIPRItem::GetAttachmentsList(TArray<class FString>* Attachments)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetAttachmentsList");
		
		UIPRItem_GetAttachmentsList_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Attachments != nullptr)
			*Attachments = params.Attachments;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.GetActorUID
	 * 		Flags  -> ()
	 */
	class FString UIPRItem::GetActorUID()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.GetActorUID");
		
		UIPRItem_GetActorUID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.DropItemOnGround
	 * 		Flags  -> ()
	 */
	bool UIPRItem::DropItemOnGround()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.DropItemOnGround");
		
		UIPRItem_DropItemOnGround_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRItem.DisableItemPhysics
	 * 		Flags  -> ()
	 */
	void UIPRItem::DisableItemPhysics()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRItem.DisableItemPhysics");
		
		UIPRItem_DisableItemPhysics_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIPRItem.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIPRItem::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IPRItem");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.UpdateHolders
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::UpdateHolders()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.UpdateHolders");
		
		UIPRPlayerCharacter_UpdateHolders_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.TeleportPlayer
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Velocity                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               wristMenuHidden                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               ReprojectLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPlayerTeleportAdjustType                          adjust                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::TeleportPlayer(const struct FTransform& Transform, const struct FVector& Velocity, bool wristMenuHidden, bool ReprojectLocation, EPlayerTeleportAdjustType adjust)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.TeleportPlayer");
		
		UIPRPlayerCharacter_TeleportPlayer_Params params {};
		params.Transform = Transform;
		params.Velocity = Velocity;
		params.wristMenuHidden = wristMenuHidden;
		params.ReprojectLocation = ReprojectLocation;
		params.adjust = adjust;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.StopMovement
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::StopMovement()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.StopMovement");
		
		UIPRPlayerCharacter_StopMovement_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.StopHapticses
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::StopHapticses()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.StopHapticses");
		
		UIPRPlayerCharacter_StopHapticses_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.SpawnItemInHand
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               LeftHand                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                ItemTypeID                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::SpawnItemInHand(bool LeftHand, const struct FGameplayTag& ItemTypeID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.SpawnItemInHand");
		
		UIPRPlayerCharacter_SpawnItemInHand_Params params {};
		params.LeftHand = LeftHand;
		params.ItemTypeID = ItemTypeID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.SpawnItemConfigInHand
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bLeftHand                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPRItemConfig*                               itemConfig                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::SpawnItemConfigInHand(bool bLeftHand, class UPRItemConfig* itemConfig)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.SpawnItemConfigInHand");
		
		UIPRPlayerCharacter_SpawnItemConfigInHand_Params params {};
		params.bLeftHand = bLeftHand;
		params.itemConfig = itemConfig;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.SpawnInventory
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::SpawnInventory()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.SpawnInventory");
		
		UIPRPlayerCharacter_SpawnInventory_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.SetWristMenuHidden
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Hidden                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::SetWristMenuHidden(bool Hidden)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.SetWristMenuHidden");
		
		UIPRPlayerCharacter_SetWristMenuHidden_Params params {};
		params.Hidden = Hidden;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.SetPaused
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               paused                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::SetPaused(bool paused)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.SetPaused");
		
		UIPRPlayerCharacter_SetPaused_Params params {};
		params.paused = paused;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.SetInventoryMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EInventoryMode                                     Mode                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UIPRPlayerCharacter::SetInventoryMode(EInventoryMode Mode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.SetInventoryMode");
		
		UIPRPlayerCharacter_SetInventoryMode_Params params {};
		params.Mode = Mode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.SetCurrentVelocity
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Velocity                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::SetCurrentVelocity(const struct FVector& Velocity)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.SetCurrentVelocity");
		
		UIPRPlayerCharacter_SetCurrentVelocity_Params params {};
		params.Velocity = Velocity;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.ReturnBackpack
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               instant                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::ReturnBackpack(bool instant)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.ReturnBackpack");
		
		UIPRPlayerCharacter_ReturnBackpack_Params params {};
		params.instant = instant;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.RefreshHandPose
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              Controller                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::RefreshHandPose(class UGripMotionControllerComponent* Controller)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.RefreshHandPose");
		
		UIPRPlayerCharacter_RefreshHandPose_Params params {};
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.PreTeleport
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::PreTeleport()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.PreTeleport");
		
		UIPRPlayerCharacter_PreTeleport_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.OpenEyes
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::OpenEyes()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.OpenEyes");
		
		UIPRPlayerCharacter_OpenEyes_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.OnTeleported
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::OnTeleported()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.OnTeleported");
		
		UIPRPlayerCharacter_OnTeleported_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.IsTeleporting
	 * 		Flags  -> ()
	 */
	bool UIPRPlayerCharacter::IsTeleporting()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.IsTeleporting");
		
		UIPRPlayerCharacter_IsTeleporting_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.IsItemActorSticked
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UIPRPlayerCharacter::IsItemActorSticked(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.IsItemActorSticked");
		
		UIPRPlayerCharacter_IsItemActorSticked_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.IsImmuneToDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EDamageCategory                                    Type                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UIPRPlayerCharacter::IsImmuneToDamage(EDamageCategory Type)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.IsImmuneToDamage");
		
		UIPRPlayerCharacter_IsImmuneToDamage_Params params {};
		params.Type = Type;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.IsActorLerpingToHand
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     Object                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UIPRPlayerCharacter::IsActorLerpingToHand(class UObject* Object)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.IsActorLerpingToHand");
		
		UIPRPlayerCharacter_IsActorLerpingToHand_Params params {};
		params.Object = Object;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.Initialize
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::Initialize()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.Initialize");
		
		UIPRPlayerCharacter_Initialize_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetTotalEquipmentWeight
	 * 		Flags  -> ()
	 */
	float UIPRPlayerCharacter::GetTotalEquipmentWeight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetTotalEquipmentWeight");
		
		UIPRPlayerCharacter_GetTotalEquipmentWeight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetRootTransform
	 * 		Flags  -> ()
	 */
	struct FTransform UIPRPlayerCharacter::GetRootTransform()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetRootTransform");
		
		UIPRPlayerCharacter_GetRootTransform_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetOneHeldItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHand                                            hand                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               onlyItem                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     itemActorObject                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               SecondaryGrip                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::GetOneHeldItem(EPRHand hand, bool onlyItem, class UObject** itemActorObject, bool* SecondaryGrip)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetOneHeldItem");
		
		UIPRPlayerCharacter_GetOneHeldItem_Params params {};
		params.hand = hand;
		params.onlyItem = onlyItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (itemActorObject != nullptr)
			*itemActorObject = params.itemActorObject;
		if (SecondaryGrip != nullptr)
			*SecondaryGrip = params.SecondaryGrip;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetInventoryMode
	 * 		Flags  -> ()
	 */
	EInventoryMode UIPRPlayerCharacter::GetInventoryMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetInventoryMode");
		
		UIPRPlayerCharacter_GetInventoryMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetHeldItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bOnlyItem                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Left                                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Right                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::GetHeldItems(bool bOnlyItem, class UObject** Left, class UObject** Right)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetHeldItems");
		
		UIPRPlayerCharacter_GetHeldItems_Params params {};
		params.bOnlyItem = bOnlyItem;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Left != nullptr)
			*Left = params.Left;
		if (Right != nullptr)
			*Right = params.Right;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetHandsIKData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               alive                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  leftHandTransform                                          (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  leftHandShiftTransform                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		EHandPose                                          leftHandPose                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            leftHandGeometryType                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  leftHandPoseNumber                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     leftHeldItem                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  rightHandTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  rightHandShiftTransform                                    (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		EHandPose                                          rightHandPose                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            rightHandGeometryType                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  rightHandPoseNumber                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     rightHeldItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::GetHandsIKData(bool* success, bool* alive, struct FTransform* leftHandTransform, struct FTransform* leftHandShiftTransform, EHandPose* leftHandPose, EPRHandPoseGeometryType* leftHandGeometryType, EPRHandPoseNumber* leftHandPoseNumber, class UObject** leftHeldItem, struct FTransform* rightHandTransform, struct FTransform* rightHandShiftTransform, EHandPose* rightHandPose, EPRHandPoseGeometryType* rightHandGeometryType, EPRHandPoseNumber* rightHandPoseNumber, class UObject** rightHeldItem)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetHandsIKData");
		
		UIPRPlayerCharacter_GetHandsIKData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (alive != nullptr)
			*alive = params.alive;
		if (leftHandTransform != nullptr)
			*leftHandTransform = params.leftHandTransform;
		if (leftHandShiftTransform != nullptr)
			*leftHandShiftTransform = params.leftHandShiftTransform;
		if (leftHandPose != nullptr)
			*leftHandPose = params.leftHandPose;
		if (leftHandGeometryType != nullptr)
			*leftHandGeometryType = params.leftHandGeometryType;
		if (leftHandPoseNumber != nullptr)
			*leftHandPoseNumber = params.leftHandPoseNumber;
		if (leftHeldItem != nullptr)
			*leftHeldItem = params.leftHeldItem;
		if (rightHandTransform != nullptr)
			*rightHandTransform = params.rightHandTransform;
		if (rightHandShiftTransform != nullptr)
			*rightHandShiftTransform = params.rightHandShiftTransform;
		if (rightHandPose != nullptr)
			*rightHandPose = params.rightHandPose;
		if (rightHandGeometryType != nullptr)
			*rightHandGeometryType = params.rightHandGeometryType;
		if (rightHandPoseNumber != nullptr)
			*rightHandPoseNumber = params.rightHandPoseNumber;
		if (rightHeldItem != nullptr)
			*rightHeldItem = params.rightHeldItem;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetHandPivot
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              Controller                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             Pivot                                                      (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::GetHandPivot(class UGripMotionControllerComponent* Controller, class USceneComponent** Pivot)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetHandPivot");
		
		UIPRPlayerCharacter_GetHandPivot_Params params {};
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Pivot != nullptr)
			*Pivot = params.Pivot;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetDistanceToCamera
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     WorldLocation                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UIPRPlayerCharacter::GetDistanceToCamera(const struct FVector& WorldLocation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetDistanceToCamera");
		
		UIPRPlayerCharacter_GetDistanceToCamera_Params params {};
		params.WorldLocation = WorldLocation;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetCurrentVelocity
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Velocity                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::GetCurrentVelocity(struct FVector* Velocity)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetCurrentVelocity");
		
		UIPRPlayerCharacter_GetCurrentVelocity_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Velocity != nullptr)
			*Velocity = params.Velocity;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetControlsRefs
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               alive                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UCameraComponent*                            cameraRef                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             pivotHead                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              leftControllerRef                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             pivotLeftController                                        (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             pivotLeftHand                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USphereComponent*                            sphereLeftHand                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMaterialInstanceDynamic*                    materialLeftController                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              rightControllerRef                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             pivotRightController                                       (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             pivotRightHand                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USphereComponent*                            sphereRightHand                                            (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMaterialInstanceDynamic*                    materialRightController                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::GetControlsRefs(bool* success, bool* alive, class UCameraComponent** cameraRef, class USceneComponent** pivotHead, class UGripMotionControllerComponent** leftControllerRef, class USceneComponent** pivotLeftController, class USceneComponent** pivotLeftHand, class USphereComponent** sphereLeftHand, class UMaterialInstanceDynamic** materialLeftController, class UGripMotionControllerComponent** rightControllerRef, class USceneComponent** pivotRightController, class USceneComponent** pivotRightHand, class USphereComponent** sphereRightHand, class UMaterialInstanceDynamic** materialRightController)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetControlsRefs");
		
		UIPRPlayerCharacter_GetControlsRefs_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (alive != nullptr)
			*alive = params.alive;
		if (cameraRef != nullptr)
			*cameraRef = params.cameraRef;
		if (pivotHead != nullptr)
			*pivotHead = params.pivotHead;
		if (leftControllerRef != nullptr)
			*leftControllerRef = params.leftControllerRef;
		if (pivotLeftController != nullptr)
			*pivotLeftController = params.pivotLeftController;
		if (pivotLeftHand != nullptr)
			*pivotLeftHand = params.pivotLeftHand;
		if (sphereLeftHand != nullptr)
			*sphereLeftHand = params.sphereLeftHand;
		if (materialLeftController != nullptr)
			*materialLeftController = params.materialLeftController;
		if (rightControllerRef != nullptr)
			*rightControllerRef = params.rightControllerRef;
		if (pivotRightController != nullptr)
			*pivotRightController = params.pivotRightController;
		if (pivotRightHand != nullptr)
			*pivotRightHand = params.pivotRightHand;
		if (sphereRightHand != nullptr)
			*sphereRightHand = params.sphereRightHand;
		if (materialRightController != nullptr)
			*materialRightController = params.materialRightController;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetCameraRef
	 * 		Flags  -> ()
	 */
	class UCameraComponent* UIPRPlayerCharacter::GetCameraRef()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetCameraRef");
		
		UIPRPlayerCharacter_GetCameraRef_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetBodyRef
	 * 		Flags  -> ()
	 */
	class USkeletalMeshComponent* UIPRPlayerCharacter::GetBodyRef()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetBodyRef");
		
		UIPRPlayerCharacter_GetBodyRef_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetBodyIKData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               alive                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              PlayerHeight                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  rootTransform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  CameraTransform                                            (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  neckTransform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::GetBodyIKData(bool* success, bool* alive, float* PlayerHeight, struct FTransform* rootTransform, struct FTransform* CameraTransform, struct FTransform* neckTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetBodyIKData");
		
		UIPRPlayerCharacter_GetBodyIKData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (alive != nullptr)
			*alive = params.alive;
		if (PlayerHeight != nullptr)
			*PlayerHeight = params.PlayerHeight;
		if (rootTransform != nullptr)
			*rootTransform = params.rootTransform;
		if (CameraTransform != nullptr)
			*CameraTransform = params.CameraTransform;
		if (neckTransform != nullptr)
			*neckTransform = params.neckTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetBeamPointerComponents
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USceneComponent*                             Left                                                       (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             Right                                                      (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIPRPlayerCharacter::GetBeamPointerComponents(class USceneComponent** Left, class USceneComponent** Right)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetBeamPointerComponents");
		
		UIPRPlayerCharacter_GetBeamPointerComponents_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Left != nullptr)
			*Left = params.Left;
		if (Right != nullptr)
			*Right = params.Right;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetBackpackPivot
	 * 		Flags  -> ()
	 */
	class USceneComponent* UIPRPlayerCharacter::GetBackpackPivot()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetBackpackPivot");
		
		UIPRPlayerCharacter_GetBackpackPivot_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetArmorStats
	 * 		Flags  -> ()
	 */
	TMap<EDamageCategory, float> UIPRPlayerCharacter::GetArmorStats()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetArmorStats");
		
		UIPRPlayerCharacter_GetArmorStats_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.GetArmorItems
	 * 		Flags  -> ()
	 */
	TArray<class UInventoryItem*> UIPRPlayerCharacter::GetArmorItems()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.GetArmorItems");
		
		UIPRPlayerCharacter_GetArmorItems_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.DropNotItems
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::DropNotItems()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.DropNotItems");
		
		UIPRPlayerCharacter_DropNotItems_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.DropAll
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::DropAll()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.DropAll");
		
		UIPRPlayerCharacter_DropAll_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerCharacter.CloseEyes
	 * 		Flags  -> ()
	 */
	void UIPRPlayerCharacter::CloseEyes()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerCharacter.CloseEyes");
		
		UIPRPlayerCharacter_CloseEyes_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIPRPlayerCharacter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIPRPlayerCharacter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IPRPlayerCharacter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerController.IsAllInputBlocked
	 * 		Flags  -> ()
	 */
	bool UIPRPlayerController::IsAllInputBlocked()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerController.IsAllInputBlocked");
		
		UIPRPlayerController_IsAllInputBlocked_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerController.InitControlScheme
	 * 		Flags  -> ()
	 */
	void UIPRPlayerController::InitControlScheme()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerController.InitControlScheme");
		
		UIPRPlayerController_InitControlScheme_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPRPlayerController.GetControllerType
	 * 		Flags  -> ()
	 */
	EPRControllerType UIPRPlayerController::GetControllerType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPRPlayerController.GetControllerType");
		
		UIPRPlayerController_GetControllerType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIPRPlayerController.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIPRPlayerController::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IPRPlayerController");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.SwitchBodyVisibility
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bVisible                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bRecursive                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerPawn::SwitchBodyVisibility(bool bVisible, bool bRecursive)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.SwitchBodyVisibility");
		
		UPRPlayerPawn_SwitchBodyVisibility_Params params {};
		params.bVisible = bVisible;
		params.bRecursive = bRecursive;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.ProcessMovementNative
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              DeltaSeconds                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerPawn::ProcessMovementNative(float DeltaSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.ProcessMovementNative");
		
		UPRPlayerPawn_ProcessMovementNative_Params params {};
		params.DeltaSeconds = DeltaSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.IsSecondaryGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bLeft                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRPlayerPawn::IsSecondaryGrip(bool bLeft)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.IsSecondaryGrip");
		
		UPRPlayerPawn_IsSecondaryGrip_Params params {};
		params.bLeft = bLeft;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.IsBackpackInHands
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bCheckLeft                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bCheckRight                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRPlayerPawn::IsBackpackInHands(bool bCheckLeft, bool bCheckRight)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.IsBackpackInHands");
		
		UPRPlayerPawn_IsBackpackInHands_Params params {};
		params.bCheckLeft = bCheckLeft;
		params.bCheckRight = bCheckRight;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.IsBackpackDropped
	 * 		Flags  -> ()
	 */
	bool UPRPlayerPawn::IsBackpackDropped()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.IsBackpackDropped");
		
		UPRPlayerPawn_IsBackpackDropped_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.IsAnyLampEnabled
	 * 		Flags  -> ()
	 */
	bool UPRPlayerPawn::IsAnyLampEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.IsAnyLampEnabled");
		
		UPRPlayerPawn_IsAnyLampEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.GetVisibilityPrimitives
	 * 		Flags  -> ()
	 */
	TArray<class UPrimitiveComponent*> UPRPlayerPawn::GetVisibilityPrimitives()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.GetVisibilityPrimitives");
		
		UPRPlayerPawn_GetVisibilityPrimitives_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.GetInputMovementVector
	 * 		Flags  -> ()
	 */
	struct FVector UPRPlayerPawn::GetInputMovementVector()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.GetInputMovementVector");
		
		UPRPlayerPawn_GetInputMovementVector_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.GetCrouch
	 * 		Flags  -> ()
	 */
	float UPRPlayerPawn::GetCrouch()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.GetCrouch");
		
		UPRPlayerPawn_GetCrouch_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.GetBackpackRef
	 * 		Flags  -> ()
	 */
	class ABackpackSimple* UPRPlayerPawn::GetBackpackRef()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.GetBackpackRef");
		
		UPRPlayerPawn_GetBackpackRef_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.DropGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              GripMotionController                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FBPActorGripInformation                     GripToDrop                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     AngleVel                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     LinearVel                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerPawn::DropGrip(class UGripMotionControllerComponent* GripMotionController, const struct FBPActorGripInformation& GripToDrop, const struct FVector& AngleVel, const struct FVector& LinearVel)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.DropGrip");
		
		UPRPlayerPawn_DropGrip_Params params {};
		params.GripMotionController = GripMotionController;
		params.GripToDrop = GripToDrop;
		params.AngleVel = AngleVel;
		params.LinearVel = LinearVel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerPawn.DropAllGrips
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              GripMotionController                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bZeroVelo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerPawn::DropAllGrips(class UGripMotionControllerComponent* GripMotionController, bool bZeroVelo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerPawn.DropAllGrips");
		
		UPRPlayerPawn_DropAllGrips_Params params {};
		params.GripMotionController = GripMotionController;
		params.bZeroVelo = bZeroVelo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRPlayerPawn.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRPlayerPawn::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRPlayerPawn");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IRadiusExplosionActor.Launch
	 * 		Flags  -> ()
	 */
	void UIRadiusExplosionActor::Launch()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IRadiusExplosionActor.Launch");
		
		UIRadiusExplosionActor_Launch_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IRadiusExplosionActor.Initialeze
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FExplosionInfo                              ExplosionInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UIRadiusExplosionActor::Initialeze(const struct FExplosionInfo& ExplosionInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IRadiusExplosionActor.Initialeze");
		
		UIRadiusExplosionActor_Initialeze_Params params {};
		params.ExplosionInfo = ExplosionInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IRadiusExplosionActor.Dispose
	 * 		Flags  -> ()
	 */
	void UIRadiusExplosionActor::Dispose()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IRadiusExplosionActor.Dispose");
		
		UIRadiusExplosionActor_Dispose_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIRadiusExplosionActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIRadiusExplosionActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IRadiusExplosionActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IRadiusProjectile.Launch
	 * 		Flags  -> ()
	 */
	void UIRadiusProjectile::Launch()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IRadiusProjectile.Launch");
		
		UIRadiusProjectile_Launch_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IRadiusProjectile.Initialize
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class URadiusProjectileInfo*                       ProjectileInfo                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UIRadiusProjectile::Initialize(class URadiusProjectileInfo* ProjectileInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IRadiusProjectile.Initialize");
		
		UIRadiusProjectile_Initialize_Params params {};
		params.ProjectileInfo = ProjectileInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIRadiusProjectile.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIRadiusProjectile::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IRadiusProjectile");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IStashActor.Setup
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FStashSpawnInfo                             StashSpawnInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void UIStashActor::Setup(const struct FStashSpawnInfo& StashSpawnInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IStashActor.Setup");
		
		UIStashActor_Setup_Params params {};
		params.StashSpawnInfo = StashSpawnInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIStashActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIStashActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IStashActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRItemConfig.CloneWithUID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      newUID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UPRItemConfig* UPRItemConfig::CloneWithUID(const class FString& newUID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRItemConfig.CloneWithUID");
		
		UPRItemConfig_CloneWithUID_Params params {};
		params.newUID = newUID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRItemConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRItemConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRItemConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ItemsManager.SetConditionsIgnore
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               ignoreCorpse                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               ignoreStash                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UItemsManager::SetConditionsIgnore(bool ignoreCorpse, bool ignoreStash)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ItemsManager.SetConditionsIgnore");
		
		UItemsManager_SetConditionsIgnore_Params params {};
		params.ignoreCorpse = ignoreCorpse;
		params.ignoreStash = ignoreStash;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ItemsManager.PackItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USceneComponent*                             Parent                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Items                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Excluded                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bExcludeNonFit                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bProjectDown                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UItemsManager::PackItems(class USceneComponent* Parent, TArray<class UInventoryItem*> Items, TArray<class UInventoryItem*>* Excluded, bool bExcludeNonFit, bool bProjectDown)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ItemsManager.PackItems");
		
		UItemsManager_PackItems_Params params {};
		params.Parent = Parent;
		params.Items = Items;
		params.bExcludeNonFit = bExcludeNonFit;
		params.bProjectDown = bProjectDown;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Excluded != nullptr)
			*Excluded = params.Excluded;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ItemsManager.MultiPackItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class USceneComponent*>                     Bounds                                                     (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Items                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bProjectDown                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UItemsManager::MultiPackItems(TArray<class USceneComponent*> Bounds, TArray<class UInventoryItem*> Items, bool bProjectDown)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ItemsManager.MultiPackItems");
		
		UItemsManager_MultiPackItems_Params params {};
		params.Bounds = Bounds;
		params.Items = Items;
		params.bProjectDown = bProjectDown;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ItemsManager.GetLootForTable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                lootTableTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            LootPoints                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      idOverride                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Items                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UItemsManager::GetLootForTable(const struct FGameplayTag& lootTableTag, int32_t LootPoints, const class FString& idOverride, TArray<class UInventoryItem*>* Items, bool* success)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ItemsManager.GetLootForTable");
		
		UItemsManager_GetLootForTable_Params params {};
		params.lootTableTag = lootTableTag;
		params.LootPoints = LootPoints;
		params.idOverride = idOverride;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Items != nullptr)
			*Items = params.Items;
		if (success != nullptr)
			*success = params.success;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ItemsManager.GetItemsManager
	 * 		Flags  -> ()
	 */
	class UItemsManager* UItemsManager::GetItemsManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ItemsManager.GetItemsManager");
		
		UItemsManager_GetItemsManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ItemsManager.GetDefaultLoot
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FGameplayTag>                        itemTags                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		class FString                                      idOverride                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Items                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UItemsManager::GetDefaultLoot(TArray<struct FGameplayTag> itemTags, const class FString& idOverride, TArray<class UInventoryItem*>* Items)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ItemsManager.GetDefaultLoot");
		
		UItemsManager_GetDefaultLoot_Params params {};
		params.itemTags = itemTags;
		params.idOverride = idOverride;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Items != nullptr)
			*Items = params.Items;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ItemsManager.GetCurrentLevelLoot
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            LootPoints                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      idOverride                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Items                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UItemsManager::GetCurrentLevelLoot(int32_t LootPoints, const class FString& idOverride, TArray<class UInventoryItem*>* Items)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ItemsManager.GetCurrentLevelLoot");
		
		UItemsManager_GetCurrentLevelLoot_Params params {};
		params.LootPoints = LootPoints;
		params.idOverride = idOverride;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Items != nullptr)
			*Items = params.Items;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ItemsManager.GetConfiguredLoot
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UPRItemConfig*>                       ItemConfigs                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		class FString                                      idOverride                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Items                                                      (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UItemsManager::GetConfiguredLoot(TArray<class UPRItemConfig*> ItemConfigs, const class FString& idOverride, TArray<class UInventoryItem*>* Items)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ItemsManager.GetConfiguredLoot");
		
		UItemsManager_GetConfiguredLoot_Params params {};
		params.ItemConfigs = ItemConfigs;
		params.idOverride = idOverride;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Items != nullptr)
			*Items = params.Items;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UItemsManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UItemsManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ItemsManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UItemStashPoint.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UItemStashPoint::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ItemStashPoint");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IWeapon.GetWeaponInfo
	 * 		Flags  -> ()
	 */
	struct FWeaponInfo UIWeapon::GetWeaponInfo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IWeapon.GetWeaponInfo");
		
		UIWeapon_GetWeaponInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIWeapon.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIWeapon::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IWeapon");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.UnloadLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ULevelManager::UnloadLevel(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.UnloadLevel");
		
		ULevelManager_UnloadLevel_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.UnloadAll
	 * 		Flags  -> ()
	 */
	void ULevelManager::UnloadAll()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.UnloadAll");
		
		ULevelManager_UnloadAll_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.ShowSublevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FName                                        SublevelName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ULevelManager::ShowSublevel(const class FName& SublevelName)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.ShowSublevel");
		
		ULevelManager_ShowSublevel_Params params {};
		params.SublevelName = SublevelName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.OnUnloadingTick
	 * 		Flags  -> ()
	 */
	void ULevelManager::OnUnloadingTick()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.OnUnloadingTick");
		
		ULevelManager_OnUnloadingTick_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.OnLoadingTick
	 * 		Flags  -> ()
	 */
	void ULevelManager::OnLoadingTick()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.OnLoadingTick");
		
		ULevelManager_OnLoadingTick_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.LoadSublevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FName                                        SublevelName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ULevelManager::LoadSublevel(const class FName& SublevelName)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.LoadSublevel");
		
		ULevelManager_LoadSublevel_Params params {};
		params.SublevelName = SublevelName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.LoadLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ULevelManager::LoadLevel(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.LoadLevel");
		
		ULevelManager_LoadLevel_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.IsReady
	 * 		Flags  -> ()
	 */
	bool ULevelManager::IsReady()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.IsReady");
		
		ULevelManager_IsReady_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.HideSublevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FName                                        SublevelName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ULevelManager::HideSublevel(const class FName& SublevelName)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.HideSublevel");
		
		ULevelManager_HideSublevel_Params params {};
		params.SublevelName = SublevelName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LevelManager.GetLevelManager
	 * 		Flags  -> ()
	 */
	class ULevelManager* ULevelManager::GetLevelManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LevelManager.GetLevelManager");
		
		ULevelManager_GetLevelManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ULevelManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ULevelManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.LevelManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LightSensitiveManager.UnregisterLightSensitiveObject
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      LightSensitiveObject                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ULightSensitiveManager::UnregisterLightSensitiveObject(class AActor* LightSensitiveObject)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LightSensitiveManager.UnregisterLightSensitiveObject");
		
		ULightSensitiveManager_UnregisterLightSensitiveObject_Params params {};
		params.LightSensitiveObject = LightSensitiveObject;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LightSensitiveManager.RegisterLightSensitiveObject
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      LightSensitiveObject                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ULightSensitiveManager::RegisterLightSensitiveObject(class AActor* LightSensitiveObject)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LightSensitiveManager.RegisterLightSensitiveObject");
		
		ULightSensitiveManager_RegisterLightSensitiveObject_Params params {};
		params.LightSensitiveObject = LightSensitiveObject;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.LightSensitiveManager.GetLightSensitiveManager
	 * 		Flags  -> ()
	 */
	class ULightSensitiveManager* ULightSensitiveManager::GetLightSensitiveManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.LightSensitiveManager.GetLightSensitiveManager");
		
		ULightSensitiveManager_GetLightSensitiveManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ULightSensitiveManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ULightSensitiveManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.LightSensitiveManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.WorldToLevelTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	struct FTransform UMapPointsConfig::WorldToLevelTransform(const struct FGameplayTag& LevelTag, const struct FTransform& Transform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.WorldToLevelTransform");
		
		UMapPointsConfig_WorldToLevelTransform_Params params {};
		params.LevelTag = LevelTag;
		params.Transform = Transform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.WorldToLevelLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector UMapPointsConfig::WorldToLevelLocation(const struct FGameplayTag& LevelTag, const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.WorldToLevelLocation");
		
		UMapPointsConfig_WorldToLevelLocation_Params params {};
		params.LevelTag = LevelTag;
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.ResolvePoint
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FGameplayTag>                        ExcludedPoints                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                ResultPoint                                                (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                ResultLevel                                                (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMapPointsConfig::ResolvePoint(const struct FGameplayTag& pointTag, TArray<struct FGameplayTag> ExcludedPoints, struct FGameplayTag* ResultPoint, struct FGameplayTag* ResultLevel)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.ResolvePoint");
		
		UMapPointsConfig_ResolvePoint_Params params {};
		params.pointTag = pointTag;
		params.ExcludedPoints = ExcludedPoints;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (ResultPoint != nullptr)
			*ResultPoint = params.ResultPoint;
		if (ResultLevel != nullptr)
			*ResultLevel = params.ResultLevel;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.LevelToWorldTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	struct FTransform UMapPointsConfig::LevelToWorldTransform(const struct FGameplayTag& LevelTag, const struct FTransform& Transform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.LevelToWorldTransform");
		
		UMapPointsConfig_LevelToWorldTransform_Params params {};
		params.LevelTag = LevelTag;
		params.Transform = Transform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.LevelToWorldLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector UMapPointsConfig::LevelToWorldLocation(const struct FGameplayTag& LevelTag, const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.LevelToWorldLocation");
		
		UMapPointsConfig_LevelToWorldLocation_Params params {};
		params.LevelTag = LevelTag;
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.IsPointInLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UMapPointsConfig::IsPointInLevel(const struct FGameplayTag& pointTag, const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.IsPointInLevel");
		
		UMapPointsConfig_IsPointInLevel_Params params {};
		params.pointTag = pointTag;
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.IsPointACluster
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UMapPointsConfig::IsPointACluster(const struct FGameplayTag& pointTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.IsPointACluster");
		
		UMapPointsConfig_IsPointACluster_Params params {};
		params.pointTag = pointTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.GetPointTransforms
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  RelativeTransform                                          (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  absoluteTransform                                          (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UMapPointsConfig::GetPointTransforms(const struct FGameplayTag& pointTag, bool* bSuccess, struct FGameplayTag* LevelTag, struct FTransform* RelativeTransform, struct FTransform* absoluteTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.GetPointTransforms");
		
		UMapPointsConfig_GetPointTransforms_Params params {};
		params.pointTag = pointTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (LevelTag != nullptr)
			*LevelTag = params.LevelTag;
		if (RelativeTransform != nullptr)
			*RelativeTransform = params.RelativeTransform;
		if (absoluteTransform != nullptr)
			*absoluteTransform = params.absoluteTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.GetPointLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FGameplayTag UMapPointsConfig::GetPointLevel(const struct FGameplayTag& pointTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.GetPointLevel");
		
		UMapPointsConfig_GetPointLevel_Params params {};
		params.pointTag = pointTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.GetMapPointsConfig
	 * 		Flags  -> ()
	 */
	class UMapPointsConfig* UMapPointsConfig::GetMapPointsConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.GetMapPointsConfig");
		
		UMapPointsConfig_GetMapPointsConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MapPointsConfig.GetLevelGateInfos
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<struct FGateInfo> UMapPointsConfig::GetLevelGateInfos(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MapPointsConfig.GetLevelGateInfos");
		
		UMapPointsConfig_GetLevelGateInfos_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMapPointsConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMapPointsConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MapPointsConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Float.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Float::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Float");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Float_Equal.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Float_Equal::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Float_Equal");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Float_NotEqual.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Float_NotEqual::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Float_NotEqual");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Float_MoreThan.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Float_MoreThan::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Float_MoreThan");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Float_MoreEqualThan.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Float_MoreEqualThan::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Float_MoreEqualThan");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Float_LessThan.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Float_LessThan::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Float_LessThan");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Float_LessEqualThan.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Float_LessEqualThan::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Float_LessEqualThan");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Int.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Int::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Int");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Int_Equal.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Int_Equal::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Int_Equal");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Int_NotEqual.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Int_NotEqual::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Int_NotEqual");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Int_MoreThan.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Int_MoreThan::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Int_MoreThan");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Int_MoreEqualThan.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Int_MoreEqualThan::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Int_MoreEqualThan");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Int_LessThan.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Int_LessThan::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Int_LessThan");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMathCondition_Int_LessEqualThan.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMathCondition_Int_LessEqualThan::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MathCondition_Int_LessEqualThan");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MinimapComposeHelper.PrepareLandscape
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class ALandscape*                                  Landscape                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMinimapComposeHelper::PrepareLandscape(class ALandscape* Landscape)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MinimapComposeHelper.PrepareLandscape");
		
		UMinimapComposeHelper_PrepareLandscape_Params params {};
		params.Landscape = Landscape;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MinimapComposeHelper.GetPointsFromFile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      FilePath                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<struct FIntVector> UMinimapComposeHelper::GetPointsFromFile(const class FString& FilePath)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MinimapComposeHelper.GetPointsFromFile");
		
		UMinimapComposeHelper_GetPointsFromFile_Params params {};
		params.FilePath = FilePath;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MinimapComposeHelper.GetLocations
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInstancedStaticMeshComponent*               Component                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<struct FVector> UMinimapComposeHelper::GetLocations(class UInstancedStaticMeshComponent* Component)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MinimapComposeHelper.GetLocations");
		
		UMinimapComposeHelper_GetLocations_Params params {};
		params.Component = Component;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MinimapComposeHelper.GetLandscapeSplines
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class ALandscape*                                  Landscape                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class ULandscapeSplinesComponent* UMinimapComposeHelper::GetLandscapeSplines(class ALandscape* Landscape)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MinimapComposeHelper.GetLandscapeSplines");
		
		UMinimapComposeHelper_GetLandscapeSplines_Params params {};
		params.Landscape = Landscape;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MinimapComposeHelper.GetHeatmapFromFile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      FilePath                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            step                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TMap<struct FIntPoint, int32_t>                    heatmap                                                    (Parm, OutParm, NativeAccessSpecifierPublic)
	 * 		struct FIntPoint                                   Min                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FIntPoint                                   Max                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            MaxValue                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMinimapComposeHelper::GetHeatmapFromFile(const class FString& FilePath, int32_t step, TMap<struct FIntPoint, int32_t>* heatmap, struct FIntPoint* Min, struct FIntPoint* Max, int32_t* MaxValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MinimapComposeHelper.GetHeatmapFromFile");
		
		UMinimapComposeHelper_GetHeatmapFromFile_Params params {};
		params.FilePath = FilePath;
		params.step = step;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (heatmap != nullptr)
			*heatmap = params.heatmap;
		if (Min != nullptr)
			*Min = params.Min;
		if (Max != nullptr)
			*Max = params.Max;
		if (MaxValue != nullptr)
			*MaxValue = params.MaxValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MinimapComposeHelper.GetFoliageTransforms
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AInstancedFoliageActor*                      foliageActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UFoliageType*                                FoliageType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<struct FTransform> UMinimapComposeHelper::GetFoliageTransforms(class AInstancedFoliageActor* foliageActor, class UFoliageType* FoliageType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MinimapComposeHelper.GetFoliageTransforms");
		
		UMinimapComposeHelper_GetFoliageTransforms_Params params {};
		params.foliageActor = foliageActor;
		params.FoliageType = FoliageType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MinimapComposeHelper.GenerateHeatmapFromFile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      FilePath                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            step                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMinimapComposeHelper::GenerateHeatmapFromFile(class UObject* WorldContextObject, const class FString& FilePath, int32_t step)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MinimapComposeHelper.GenerateHeatmapFromFile");
		
		UMinimapComposeHelper_GenerateHeatmapFromFile_Params params {};
		params.WorldContextObject = WorldContextObject;
		params.FilePath = FilePath;
		params.step = step;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMinimapComposeHelper.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMinimapComposeHelper::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MinimapComposeHelper");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMinimapConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMinimapConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MinimapConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsConfig.GetMissionsConfig
	 * 		Flags  -> ()
	 */
	class UMissionsConfig* UMissionsConfig::GetMissionsConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsConfig.GetMissionsConfig");
		
		UMissionsConfig_GetMissionsConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionsConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionsConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionsConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionAbstractObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionAbstractObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionAbstractObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionBaseObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionBaseObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionBaseObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionBaseHintObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionBaseHintObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionBaseHintObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionTutorialObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionTutorialObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionTutorialObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionFetchItemsObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionFetchItemsObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionFetchItemsObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionTakePictureObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionTakePictureObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionTakePictureObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionKillNPCObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionKillNPCObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionKillNPCObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionFindStashObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionFindStashObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionFindStashObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionInfoObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionInfoObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionInfoObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionFetchArtifactsObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionFetchArtifactsObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionFetchArtifactsObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionDestroyGeneratorsObjectiveConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionDestroyGeneratorsObjectiveConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionDestroyGeneratorsObjectiveConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionBaseConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionBaseConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionBaseConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionTutorialConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionTutorialConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionTutorialConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionNormalConfig.CheckObjectives
	 * 		Flags  -> ()
	 */
	bool UMissionNormalConfig::CheckObjectives()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionNormalConfig.CheckObjectives");
		
		UMissionNormalConfig_CheckObjectives_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionNormalConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionNormalConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionNormalConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionAbstractObjectiveData.HaveDelivery
	 * 		Flags  -> ()
	 */
	bool UMissionAbstractObjectiveData::HaveDelivery()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionAbstractObjectiveData.HaveDelivery");
		
		UMissionAbstractObjectiveData_HaveDelivery_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionAbstractObjectiveData.GetRewardMoney
	 * 		Flags  -> ()
	 */
	int32_t UMissionAbstractObjectiveData::GetRewardMoney()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionAbstractObjectiveData.GetRewardMoney");
		
		UMissionAbstractObjectiveData_GetRewardMoney_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionAbstractObjectiveData.GetMissionPoints
	 * 		Flags  -> ()
	 */
	TArray<struct FGameplayTag> UMissionAbstractObjectiveData::GetMissionPoints()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionAbstractObjectiveData.GetMissionPoints");
		
		UMissionAbstractObjectiveData_GetMissionPoints_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionAbstractObjectiveData.GetDeliveryCountString
	 * 		Flags  -> ()
	 */
	class FString UMissionAbstractObjectiveData::GetDeliveryCountString()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionAbstractObjectiveData.GetDeliveryCountString");
		
		UMissionAbstractObjectiveData_GetDeliveryCountString_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionAbstractObjectiveData.GetCountString
	 * 		Flags  -> ()
	 */
	class FString UMissionAbstractObjectiveData::GetCountString()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionAbstractObjectiveData.GetCountString");
		
		UMissionAbstractObjectiveData_GetCountString_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionAbstractObjectiveData.CollectDeliveryTags
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FGameplayTag>                        DeliveryTags                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UMissionAbstractObjectiveData::CollectDeliveryTags(TArray<struct FGameplayTag>* DeliveryTags)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionAbstractObjectiveData.CollectDeliveryTags");
		
		UMissionAbstractObjectiveData_CollectDeliveryTags_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (DeliveryTags != nullptr)
			*DeliveryTags = params.DeliveryTags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionAbstractObjectiveData.CheckObjectiveCompletion
	 * 		Flags  -> ()
	 */
	bool UMissionAbstractObjectiveData::CheckObjectiveCompletion()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionAbstractObjectiveData.CheckObjectiveCompletion");
		
		UMissionAbstractObjectiveData_CheckObjectiveCompletion_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionAbstractObjectiveData.BPPrint
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionAbstractObjectiveData::BPPrint(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionAbstractObjectiveData.BPPrint");
		
		UMissionAbstractObjectiveData_BPPrint_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionAbstractObjectiveData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionAbstractObjectiveData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionAbstractObjectiveData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionTutorialObjectiveData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionTutorialObjectiveData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionTutorialObjectiveData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionFetchItemsObjectiveData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionFetchItemsObjectiveData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionFetchItemsObjectiveData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionTakePictureObjectiveData.GetObjectsTags
	 * 		Flags  -> ()
	 */
	TArray<struct FGameplayTag> UMissionTakePictureObjectiveData::GetObjectsTags()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionTakePictureObjectiveData.GetObjectsTags");
		
		UMissionTakePictureObjectiveData_GetObjectsTags_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionTakePictureObjectiveData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionTakePictureObjectiveData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionTakePictureObjectiveData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionKillNPCObjectiveData.PointSpawnerID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UMissionKillNPCObjectiveData::PointSpawnerID(const struct FGameplayTag& pointTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionKillNPCObjectiveData.PointSpawnerID");
		
		UMissionKillNPCObjectiveData_PointSpawnerID_Params params {};
		params.pointTag = pointTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionKillNPCObjectiveData.PointSpawned
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UMissionKillNPCObjectiveData::PointSpawned(const struct FGameplayTag& pointTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionKillNPCObjectiveData.PointSpawned");
		
		UMissionKillNPCObjectiveData_PointSpawned_Params params {};
		params.pointTag = pointTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionKillNPCObjectiveData.PointCleared
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UMissionKillNPCObjectiveData::PointCleared(const struct FGameplayTag& pointTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionKillNPCObjectiveData.PointCleared");
		
		UMissionKillNPCObjectiveData_PointCleared_Params params {};
		params.pointTag = pointTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionKillNPCObjectiveData.MarkPointCleared
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                pointTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionKillNPCObjectiveData::MarkPointCleared(const struct FGameplayTag& pointTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionKillNPCObjectiveData.MarkPointCleared");
		
		UMissionKillNPCObjectiveData_MarkPointCleared_Params params {};
		params.pointTag = pointTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionKillNPCObjectiveData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionKillNPCObjectiveData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionKillNPCObjectiveData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionFindStashObjectiveData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionFindStashObjectiveData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionFindStashObjectiveData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionInfoObjectiveData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionInfoObjectiveData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionInfoObjectiveData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionFetchArtifactsObjectiveData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionFetchArtifactsObjectiveData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionFetchArtifactsObjectiveData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionDestroyGeneratorsObjectiveData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionDestroyGeneratorsObjectiveData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionDestroyGeneratorsObjectiveData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.SetTutorStep
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                SequencerID                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            step                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionData::SetTutorStep(const struct FGameplayTag& SequencerID, int32_t step)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.SetTutorStep");
		
		UMissionData_SetTutorStep_Params params {};
		params.SequencerID = SequencerID;
		params.step = step;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.HaveDelivery
	 * 		Flags  -> ()
	 */
	bool UMissionData::HaveDelivery()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.HaveDelivery");
		
		UMissionData_HaveDelivery_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.HasPointsInCurrentLevel
	 * 		Flags  -> ()
	 */
	bool UMissionData::HasPointsInCurrentLevel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.HasPointsInCurrentLevel");
		
		UMissionData_HasPointsInCurrentLevel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.GetTotalReward
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               FinishedOnly                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            MoneyReward                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            PlayerLevel                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionData::GetTotalReward(bool FinishedOnly, int32_t* MoneyReward, int32_t* PlayerLevel)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.GetTotalReward");
		
		UMissionData_GetTotalReward_Params params {};
		params.FinishedOnly = FinishedOnly;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (MoneyReward != nullptr)
			*MoneyReward = params.MoneyReward;
		if (PlayerLevel != nullptr)
			*PlayerLevel = params.PlayerLevel;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.GetTimeTillAbortAvailable
	 * 		Flags  -> ()
	 */
	float UMissionData::GetTimeTillAbortAvailable()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.GetTimeTillAbortAvailable");
		
		UMissionData_GetTimeTillAbortAvailable_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.GetStashUID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionAbstractObjectiveData*               Objective                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                Tag                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UMissionData::GetStashUID(class UMissionAbstractObjectiveData* Objective, const struct FGameplayTag& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.GetStashUID");
		
		UMissionData_GetStashUID_Params params {};
		params.Objective = Objective;
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.GetMissionPoints
	 * 		Flags  -> ()
	 */
	TArray<struct FGameplayTag> UMissionData::GetMissionPoints()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.GetMissionPoints");
		
		UMissionData_GetMissionPoints_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.GetMissionCategoryID
	 * 		Flags  -> ()
	 */
	struct FGameplayTag UMissionData::GetMissionCategoryID()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.GetMissionCategoryID");
		
		UMissionData_GetMissionCategoryID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.GetMainObjectivePoint
	 * 		Flags  -> ()
	 */
	struct FGameplayTag UMissionData::GetMainObjectivePoint()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.GetMainObjectivePoint");
		
		UMissionData_GetMainObjectivePoint_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.GetMainObjectiveLevel
	 * 		Flags  -> ()
	 */
	struct FGameplayTag UMissionData::GetMainObjectiveLevel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.GetMainObjectiveLevel");
		
		UMissionData_GetMainObjectiveLevel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.GetItemUID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionAbstractObjectiveData*               Objective                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Index                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UMissionData::GetItemUID(class UMissionAbstractObjectiveData* Objective, int32_t Index)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.GetItemUID");
		
		UMissionData_GetItemUID_Params params {};
		params.Objective = Objective;
		params.Index = Index;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.GetDuration
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bHaveDuration                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      FinishDateString                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionData::GetDuration(bool* bHaveDuration, class FString* FinishDateString)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.GetDuration");
		
		UMissionData_GetDuration_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bHaveDuration != nullptr)
			*bHaveDuration = params.bHaveDuration;
		if (FinishDateString != nullptr)
			*FinishDateString = params.FinishDateString;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.FinishObjective
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionAbstractObjectiveData*               Objective                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIgnoreTutorialDelivery                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UMissionData::FinishObjective(class UMissionAbstractObjectiveData* Objective, bool bIgnoreTutorialDelivery)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.FinishObjective");
		
		UMissionData_FinishObjective_Params params {};
		params.Objective = Objective;
		params.bIgnoreTutorialDelivery = bIgnoreTutorialDelivery;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.FinishAllObjectives
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIgnoreTutorialDelivery                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UMissionData::FinishAllObjectives(bool bIgnoreTutorialDelivery)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.FinishAllObjectives");
		
		UMissionData_FinishAllObjectives_Params params {};
		params.bIgnoreTutorialDelivery = bIgnoreTutorialDelivery;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.CheckPrimaryObjectivesCompleted
	 * 		Flags  -> ()
	 */
	bool UMissionData::CheckPrimaryObjectivesCompleted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.CheckPrimaryObjectivesCompleted");
		
		UMissionData_CheckPrimaryObjectivesCompleted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.CheckDelivery
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class AActor*>                              ItemActors                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bFinishObjectives                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class AActor*>                              ExcessiveActors                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UMissionData::CheckDelivery(TArray<class AActor*> ItemActors, bool bFinishObjectives, bool* bSuccess, TArray<class AActor*>* ExcessiveActors)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.CheckDelivery");
		
		UMissionData_CheckDelivery_Params params {};
		params.ItemActors = ItemActors;
		params.bFinishObjectives = bFinishObjectives;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (ExcessiveActors != nullptr)
			*ExcessiveActors = params.ExcessiveActors;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.CheckCompletion
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bCompleted                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionData::CheckCompletion(bool* bCompleted)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.CheckCompletion");
		
		UMissionData_CheckCompletion_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bCompleted != nullptr)
			*bCompleted = params.bCompleted;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionData.BPPrint
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionData::BPPrint(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionData.BPPrint");
		
		UMissionData_BPPrint_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UGameMissions.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UGameMissions::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.GameMissions");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.StartMissionFromIdLatent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                GameplayTag                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     WorldContextObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FLatentActionInfo                           LatentInfo                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::StartMissionFromIdLatent(bool* bSuccess, const struct FGameplayTag& GameplayTag, class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.StartMissionFromIdLatent");
		
		UMissionsManager_StartMissionFromIdLatent_Params params {};
		params.GameplayTag = GameplayTag;
		params.WorldContextObject = WorldContextObject;
		params.LatentInfo = LatentInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.StartMission
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      MissionInstanceId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMissionData*                                MissionData                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::StartMission(const class FString& MissionInstanceId, bool* bSuccess, class UMissionData** MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.StartMission");
		
		UMissionsManager_StartMission_Params params {};
		params.MissionInstanceId = MissionInstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (MissionData != nullptr)
			*MissionData = params.MissionData;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.SetSelectedMissionComplete
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      MissionInstanceId                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::SetSelectedMissionComplete(const class FString& MissionInstanceId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.SetSelectedMissionComplete");
		
		UMissionsManager_SetSelectedMissionComplete_Params params {};
		params.MissionInstanceId = MissionInstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.ResetTutorialMissions
	 * 		Flags  -> ()
	 */
	void UMissionsManager::ResetTutorialMissions()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.ResetTutorialMissions");
		
		UMissionsManager_ResetTutorialMissions_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.OnPlayerLevelChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            PlayerLevel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::OnPlayerLevelChanged(int32_t PlayerLevel)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.OnPlayerLevelChanged");
		
		UMissionsManager_OnPlayerLevelChanged_Params params {};
		params.PlayerLevel = PlayerLevel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.IsMissionSelected
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      MissionInstanceId                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bMissionSelected                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::IsMissionSelected(const class FString& MissionInstanceId, bool* bMissionSelected)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.IsMissionSelected");
		
		UMissionsManager_IsMissionSelected_Params params {};
		params.MissionInstanceId = MissionInstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bMissionSelected != nullptr)
			*bMissionSelected = params.bMissionSelected;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.IsMaxExecutingReached
	 * 		Flags  -> ()
	 */
	bool UMissionsManager::IsMaxExecutingReached()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.IsMaxExecutingReached");
		
		UMissionsManager_IsMaxExecutingReached_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GetSelectedMissionsInState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EMissionState                                      State                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UMissionData*>                        SelectedMissions                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::GetSelectedMissionsInState(EMissionState State, TArray<class UMissionData*>* SelectedMissions)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GetSelectedMissionsInState");
		
		UMissionsManager_GetSelectedMissionsInState_Params params {};
		params.State = State;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (SelectedMissions != nullptr)
			*SelectedMissions = params.SelectedMissions;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GetSelectedMissionsInProgress
	 * 		Flags  -> ()
	 */
	TArray<class UMissionData*> UMissionsManager::GetSelectedMissionsInProgress()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GetSelectedMissionsInProgress");
		
		UMissionsManager_GetSelectedMissionsInProgress_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GetSelectedMissions
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UMissionData*>                        SelectedMissions                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::GetSelectedMissions(TArray<class UMissionData*>* SelectedMissions)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GetSelectedMissions");
		
		UMissionsManager_GetSelectedMissions_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (SelectedMissions != nullptr)
			*SelectedMissions = params.SelectedMissions;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GetMissionsManager
	 * 		Flags  -> ()
	 */
	class UMissionsManager* UMissionsManager::GetMissionsManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GetMissionsManager");
		
		UMissionsManager_GetMissionsManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GetMissionsFinishedAfter
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ConfigID                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bOnlySuccessful                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t UMissionsManager::GetMissionsFinishedAfter(const struct FGameplayTag& ConfigID, bool bOnlySuccessful)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GetMissionsFinishedAfter");
		
		UMissionsManager_GetMissionsFinishedAfter_Params params {};
		params.ConfigID = ConfigID;
		params.bOnlySuccessful = bOnlySuccessful;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GetMission
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      MissionInstanceId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMissionData*                                MissionData                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::GetMission(const class FString& MissionInstanceId, class UMissionData** MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GetMission");
		
		UMissionsManager_GetMission_Params params {};
		params.MissionInstanceId = MissionInstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (MissionData != nullptr)
			*MissionData = params.MissionData;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GetFinishedMissions
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UMissionData*>                        FinishedMissions                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::GetFinishedMissions(TArray<class UMissionData*>* FinishedMissions)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GetFinishedMissions");
		
		UMissionsManager_GetFinishedMissions_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (FinishedMissions != nullptr)
			*FinishedMissions = params.FinishedMissions;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GetActiveMissions
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TMap<struct FGameplayTag, class UMissionData*>     ActiveMissions                                             (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::GetActiveMissions(TMap<struct FGameplayTag, class UMissionData*>* ActiveMissions)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GetActiveMissions");
		
		UMissionsManager_GetActiveMissions_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (ActiveMissions != nullptr)
			*ActiveMissions = params.ActiveMissions;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GetActiveMissionOfType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Category                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMissionData*                                MissionData                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::GetActiveMissionOfType(const struct FGameplayTag& Category, class UMissionData** MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GetActiveMissionOfType");
		
		UMissionsManager_GetActiveMissionOfType_Params params {};
		params.Category = Category;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (MissionData != nullptr)
			*MissionData = params.MissionData;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.GenerateNewMissions
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bTide                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UMissionsManager::GenerateNewMissions(bool bTide)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.GenerateNewMissions");
		
		UMissionsManager_GenerateNewMissions_Params params {};
		params.bTide = bTide;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.FinishMission
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      MissionInstanceId                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UMissionsManager::FinishMission(const class FString& MissionInstanceId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.FinishMission");
		
		UMissionsManager_FinishMission_Params params {};
		params.MissionInstanceId = MissionInstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.CheckActive
	 * 		Flags  -> ()
	 */
	void UMissionsManager::CheckActive()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.CheckActive");
		
		UMissionsManager_CheckActive_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MissionsManager.AbortSelectedMission
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      MissionInstanceId                                          (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UMissionsManager::AbortSelectedMission(const class FString& MissionInstanceId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MissionsManager.AbortSelectedMission");
		
		UMissionsManager_AbortSelectedMission_Params params {};
		params.MissionInstanceId = MissionInstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UMissionsManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UMissionsManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MissionsManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MonsterSpawner.ToggleNpcSummary
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     WorldContextObj                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void AMonsterSpawner::ToggleNpcSummary(class UObject* WorldContextObj)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MonsterSpawner.ToggleNpcSummary");
		
		AMonsterSpawner_ToggleNpcSummary_Params params {};
		params.WorldContextObj = WorldContextObj;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MonsterSpawner.SpawnSavedNPC
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      NPCActor                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void AMonsterSpawner::SpawnSavedNPC(bool* bSuccess, class AActor** NPCActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MonsterSpawner.SpawnSavedNPC");
		
		AMonsterSpawner_SpawnSavedNPC_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (NPCActor != nullptr)
			*NPCActor = params.NPCActor;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MonsterSpawner.SpawnNPC
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      NPCActor                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void AMonsterSpawner::SpawnNPC(bool* bSuccess, class AActor** NPCActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MonsterSpawner.SpawnNPC");
		
		AMonsterSpawner_SpawnNPC_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (NPCActor != nullptr)
			*NPCActor = params.NPCActor;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MonsterSpawner.OnNPCDied
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      NPCActor                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void AMonsterSpawner::OnNPCDied(class AActor* NPCActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MonsterSpawner.OnNPCDied");
		
		AMonsterSpawner_OnNPCDied_Params params {};
		params.NPCActor = NPCActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MonsterSpawner.NPCsListToMonstersMap
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FGameplayTag>                        List                                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	TMap<struct FGameplayTag, int32_t> AMonsterSpawner::NPCsListToMonstersMap(TArray<struct FGameplayTag> List)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MonsterSpawner.NPCsListToMonstersMap");
		
		AMonsterSpawner_NPCsListToMonstersMap_Params params {};
		params.List = List;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MonsterSpawner.IsNpcSummaryEnabled
	 * 		Flags  -> ()
	 */
	bool AMonsterSpawner::IsNpcSummaryEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MonsterSpawner.IsNpcSummaryEnabled");
		
		AMonsterSpawner_IsNpcSummaryEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.MonsterSpawner.IsFull
	 * 		Flags  -> ()
	 */
	bool AMonsterSpawner::IsFull()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.MonsterSpawner.IsFull");
		
		AMonsterSpawner_IsFull_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AMonsterSpawner.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AMonsterSpawner::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.MonsterSpawner");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.NpcPointQueryManager.GetNpcPointQueryManager
	 * 		Flags  -> ()
	 */
	class UNpcPointQueryManager* UNpcPointQueryManager::GetNpcPointQueryManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.NpcPointQueryManager.GetNpcPointQueryManager");
		
		UNpcPointQueryManager_GetNpcPointQueryManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.NpcPointQueryManager.FindShootingPoint
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FNpcPointQueryParam                         Param                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	 * 		class FScriptDelegate                              FinishCallback                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	 */
	struct FNpcPointQueryHandle UNpcPointQueryManager::FindShootingPoint(const struct FNpcPointQueryParam& Param, const class FScriptDelegate& FinishCallback)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.NpcPointQueryManager.FindShootingPoint");
		
		UNpcPointQueryManager_FindShootingPoint_Params params {};
		params.Param = Param;
		params.FinishCallback = FinishCallback;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.NpcPointQueryManager.FindCoverPoint
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FNpcPointQueryParam                         Param                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	 * 		class FScriptDelegate                              FinishCallback                                             (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	 */
	struct FNpcPointQueryHandle UNpcPointQueryManager::FindCoverPoint(const struct FNpcPointQueryParam& Param, const class FScriptDelegate& FinishCallback)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.NpcPointQueryManager.FindCoverPoint");
		
		UNpcPointQueryManager_FindCoverPoint_Params params {};
		params.Param = Param;
		params.FinishCallback = FinishCallback;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.NpcPointQueryManager.CancelQuery
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FNpcPointQueryHandle                        Handle                                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void UNpcPointQueryManager::CancelQuery(struct FNpcPointQueryHandle* Handle)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.NpcPointQueryManager.CancelQuery");
		
		UNpcPointQueryManager_CancelQuery_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Handle != nullptr)
			*Handle = params.Handle;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UNpcPointQueryManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UNpcPointQueryManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.NpcPointQueryManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerConfig.GetWeightToWarningColor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Weight                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FLinearColor                                Color                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerConfig::GetWeightToWarningColor(float Weight, struct FLinearColor* Color)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerConfig.GetWeightToWarningColor");
		
		UPlayerConfig_GetWeightToWarningColor_Params params {};
		params.Weight = Weight;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Color != nullptr)
			*Color = params.Color;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerConfig.GetWeightToWalkSpeedCoefficient
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Weight                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              SpeedCoefficient                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerConfig::GetWeightToWalkSpeedCoefficient(float Weight, float* SpeedCoefficient)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerConfig.GetWeightToWalkSpeedCoefficient");
		
		UPlayerConfig_GetWeightToWalkSpeedCoefficient_Params params {};
		params.Weight = Weight;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (SpeedCoefficient != nullptr)
			*SpeedCoefficient = params.SpeedCoefficient;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerConfig.GetWeightToStaminaCoefficient
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Weight                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Coefficient                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerConfig::GetWeightToStaminaCoefficient(float Weight, float* Coefficient)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerConfig.GetWeightToStaminaCoefficient");
		
		UPlayerConfig_GetWeightToStaminaCoefficient_Params params {};
		params.Weight = Weight;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Coefficient != nullptr)
			*Coefficient = params.Coefficient;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerConfig.GetWeightToRunSpeedCoefficient
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Weight                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              SpeedCoefficient                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerConfig::GetWeightToRunSpeedCoefficient(float Weight, float* SpeedCoefficient)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerConfig.GetWeightToRunSpeedCoefficient");
		
		UPlayerConfig_GetWeightToRunSpeedCoefficient_Params params {};
		params.Weight = Weight;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (SpeedCoefficient != nullptr)
			*SpeedCoefficient = params.SpeedCoefficient;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerConfig.GetWaterMovementReductionCoefficient
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              BodyInWaterRatio                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              MovementCoefficient                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerConfig::GetWaterMovementReductionCoefficient(float BodyInWaterRatio, float* MovementCoefficient)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerConfig.GetWaterMovementReductionCoefficient");
		
		UPlayerConfig_GetWaterMovementReductionCoefficient_Params params {};
		params.BodyInWaterRatio = BodyInWaterRatio;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (MovementCoefficient != nullptr)
			*MovementCoefficient = params.MovementCoefficient;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerConfig.GetStaminaRegenerationSpeed
	 * 		Flags  -> ()
	 */
	float UPlayerConfig::GetStaminaRegenerationSpeed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerConfig.GetStaminaRegenerationSpeed");
		
		UPlayerConfig_GetStaminaRegenerationSpeed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerConfig.GetPlayerConfig
	 * 		Flags  -> ()
	 */
	class UPlayerConfig* UPlayerConfig::GetPlayerConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerConfig.GetPlayerConfig");
		
		UPlayerConfig_GetPlayerConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerConfig.GetFallDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              SpeedDelta                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerConfig::GetFallDamage(float SpeedDelta, float* Damage)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerConfig.GetFallDamage");
		
		UPlayerConfig_GetFallDamage_Params params {};
		params.SpeedDelta = SpeedDelta;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Damage != nullptr)
			*Damage = params.Damage;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPlayerConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPlayerConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PlayerConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerGameData.ToString
	 * 		Flags  -> ()
	 */
	class FString UPlayerGameData::ToString()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerGameData.ToString");
		
		UPlayerGameData_ToString_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerGameData.SavePosition
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                InLevel                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Position                                                   (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Velocity                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerGameData::SavePosition(const struct FGameplayTag& InLevel, const struct FTransform& Position, const struct FVector& Velocity)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerGameData.SavePosition");
		
		UPlayerGameData_SavePosition_Params params {};
		params.InLevel = InLevel;
		params.Position = Position;
		params.Velocity = Velocity;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerGameData.SaveDroppedItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                InLevel                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Location                                                   (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		TArray<class FString>                              ItemIds                                                    (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UPlayerGameData::SaveDroppedItems(const struct FGameplayTag& InLevel, const struct FTransform& Location, TArray<class FString> ItemIds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerGameData.SaveDroppedItems");
		
		UPlayerGameData_SaveDroppedItems_Params params {};
		params.InLevel = InLevel;
		params.Location = Location;
		params.ItemIds = ItemIds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerGameData.ResetStats
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bAlive                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerGameData::ResetStats(bool bAlive)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerGameData.ResetStats");
		
		UPlayerGameData_ResetStats_Params params {};
		params.bAlive = bAlive;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerGameData.ResetPosition
	 * 		Flags  -> ()
	 */
	void UPlayerGameData::ResetPosition()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerGameData.ResetPosition");
		
		UPlayerGameData_ResetPosition_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerGameData.RemoveDroppedItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                InLevel                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      ItemId                                                     (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bEmpty                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerGameData::RemoveDroppedItem(const struct FGameplayTag& InLevel, const class FString& ItemId, bool* bEmpty)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerGameData.RemoveDroppedItem");
		
		UPlayerGameData_RemoveDroppedItem_Params params {};
		params.InLevel = InLevel;
		params.ItemId = ItemId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bEmpty != nullptr)
			*bEmpty = params.bEmpty;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerGameData.GetPosition
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                InLevel                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Position                                                   (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Velocity                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               hasSaved                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerGameData::GetPosition(const struct FGameplayTag& InLevel, struct FTransform* Position, struct FVector* Velocity, bool* hasSaved)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerGameData.GetPosition");
		
		UPlayerGameData_GetPosition_Params params {};
		params.InLevel = InLevel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Position != nullptr)
			*Position = params.Position;
		if (Velocity != nullptr)
			*Velocity = params.Velocity;
		if (hasSaved != nullptr)
			*hasSaved = params.hasSaved;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerGameData.GetDroppedItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                InLevel                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<struct FItemDropInfo> UPlayerGameData::GetDroppedItems(const struct FGameplayTag& InLevel)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerGameData.GetDroppedItems");
		
		UPlayerGameData_GetDroppedItems_Params params {};
		params.InLevel = InLevel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPlayerGameData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPlayerGameData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PlayerGameData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.ToTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FPRCleanTransform                           cleanTransform                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	struct FTransform UPlayerHandsConfig::ToTransform(const struct FPRCleanTransform& cleanTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.ToTransform");
		
		UPlayerHandsConfig_ToTransform_Params params {};
		params.cleanTransform = cleanTransform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.ShowDeviceModel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USceneComponent*                             Parent                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         DisplayComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EControllerHand                                    hand                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         newDisplayComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::ShowDeviceModel(class USceneComponent* Parent, class UPrimitiveComponent* DisplayComponent, EControllerHand hand, class UPrimitiveComponent** newDisplayComponent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.ShowDeviceModel");
		
		UPlayerHandsConfig_ShowDeviceModel_Params params {};
		params.Parent = Parent;
		params.DisplayComponent = DisplayComponent;
		params.hand = hand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (newDisplayComponent != nullptr)
			*newDisplayComponent = params.newDisplayComponent;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.SaveToAsset
	 * 		Flags  -> ()
	 */
	void UPlayerHandsConfig::SaveToAsset()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.SaveToAsset");
		
		UPlayerHandsConfig_SaveToAsset_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.SavePoseDefault
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TMap<EPRControllerType, struct FPRCleanTransform>  leftItemShifts                                             (Parm, NativeAccessSpecifierPublic)
	 * 		TMap<EPRControllerType, struct FPRCleanTransform>  rightItemShifts                                            (Parm, NativeAccessSpecifierPublic)
	 * 		struct FPRHandPoseInfosPair                        handsData                                                  (Parm, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::SavePoseDefault(TMap<EPRControllerType, struct FPRCleanTransform> leftItemShifts, TMap<EPRControllerType, struct FPRCleanTransform> rightItemShifts, const struct FPRHandPoseInfosPair& handsData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.SavePoseDefault");
		
		UPlayerHandsConfig_SavePoseDefault_Params params {};
		params.leftItemShifts = leftItemShifts;
		params.rightItemShifts = rightItemShifts;
		params.handsData = handsData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForTagByGeometryTypeAndPoseNumber
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                Tag                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            GeometryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPlayerHandsConfig::HaveHandsPoseForTagByGeometryTypeAndPoseNumber(EPRHandPoseType poseType, const struct FGameplayTag& Tag, EPRHandPoseGeometryType GeometryType, EPRHandPoseNumber PoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForTagByGeometryTypeAndPoseNumber");
		
		UPlayerHandsConfig_HaveHandsPoseForTagByGeometryTypeAndPoseNumber_Params params {};
		params.poseType = poseType;
		params.Tag = Tag;
		params.GeometryType = GeometryType;
		params.PoseNumber = PoseNumber;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForTag
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPlayerHandsConfig::HaveHandsPoseForTag(EPRHandPoseType poseType, const struct FGameplayTag& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForTag");
		
		UPlayerHandsConfig_HaveHandsPoseForTag_Params params {};
		params.poseType = poseType;
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForStaticMeshByGeometryTypeAndPoseNumber
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UStaticMesh*                                 StaticMesh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            GeometryType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPlayerHandsConfig::HaveHandsPoseForStaticMeshByGeometryTypeAndPoseNumber(EPRHandPoseType poseType, class UStaticMesh* StaticMesh, EPRHandPoseGeometryType GeometryType, EPRHandPoseNumber PoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForStaticMeshByGeometryTypeAndPoseNumber");
		
		UPlayerHandsConfig_HaveHandsPoseForStaticMeshByGeometryTypeAndPoseNumber_Params params {};
		params.poseType = poseType;
		params.StaticMesh = StaticMesh;
		params.GeometryType = GeometryType;
		params.PoseNumber = PoseNumber;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForStaticMesh
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UStaticMesh*                                 StaticMesh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPlayerHandsConfig::HaveHandsPoseForStaticMesh(EPRHandPoseType poseType, class UStaticMesh* StaticMesh)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForStaticMesh");
		
		UPlayerHandsConfig_HaveHandsPoseForStaticMesh_Params params {};
		params.poseType = poseType;
		params.StaticMesh = StaticMesh;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForObjectByGeometryTypeAndPoseNumber
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            GeometryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPlayerHandsConfig::HaveHandsPoseForObjectByGeometryTypeAndPoseNumber(EPRHandPoseType poseType, class UObject* Object, EPRHandPoseGeometryType GeometryType, EPRHandPoseNumber PoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForObjectByGeometryTypeAndPoseNumber");
		
		UPlayerHandsConfig_HaveHandsPoseForObjectByGeometryTypeAndPoseNumber_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		params.GeometryType = GeometryType;
		params.PoseNumber = PoseNumber;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForObject
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPlayerHandsConfig::HaveHandsPoseForObject(EPRHandPoseType poseType, class UObject* Object)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.HaveHandsPoseForObject");
		
		UPlayerHandsConfig_HaveHandsPoseForObject_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetShiftForController
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FPRHandPoseInfo                             Info                                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		EPRControllerType                                  Controller                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FTransform UPlayerHandsConfig::GetShiftForController(const struct FPRHandPoseInfo& Info, EPRControllerType Controller)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetShiftForController");
		
		UPlayerHandsConfig_GetShiftForController_Params params {};
		params.Info = Info;
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetPointShiftForObjectByGeometryTypeAndPoseNumber
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            GeometryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Left                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  handTransform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Result                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  WorldTransform                                             (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FPRHandPoseConditions                       HandPoseConditions                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetPointShiftForObjectByGeometryTypeAndPoseNumber(EPRHandPoseType poseType, EPRHandPoseGeometryType GeometryType, EPRHandPoseNumber PoseNumber, class UObject* Object, bool Left, const struct FTransform& handTransform, bool* success, struct FTransform* Result, struct FTransform* WorldTransform, struct FPRHandPoseConditions* HandPoseConditions)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetPointShiftForObjectByGeometryTypeAndPoseNumber");
		
		UPlayerHandsConfig_GetPointShiftForObjectByGeometryTypeAndPoseNumber_Params params {};
		params.poseType = poseType;
		params.GeometryType = GeometryType;
		params.PoseNumber = PoseNumber;
		params.Object = Object;
		params.Left = Left;
		params.handTransform = handTransform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (Result != nullptr)
			*Result = params.Result;
		if (WorldTransform != nullptr)
			*WorldTransform = params.WorldTransform;
		if (HandPoseConditions != nullptr)
			*HandPoseConditions = params.HandPoseConditions;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetPointShiftForObject
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Left                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  handTransform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Result                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  WorldTransform                                             (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetPointShiftForObject(EPRHandPoseType poseType, class UObject* Object, bool Left, const struct FTransform& handTransform, bool* success, struct FTransform* Result, struct FTransform* WorldTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetPointShiftForObject");
		
		UPlayerHandsConfig_GetPointShiftForObject_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		params.Left = Left;
		params.handTransform = handTransform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (Result != nullptr)
			*Result = params.Result;
		if (WorldTransform != nullptr)
			*WorldTransform = params.WorldTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetPlayerHandsConfig
	 * 		Flags  -> ()
	 */
	class UPlayerHandsConfig* UPlayerHandsConfig::GetPlayerHandsConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetPlayerHandsConfig");
		
		UPlayerHandsConfig_GetPlayerHandsConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetItemShiftForController
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TMap<EPRControllerType, struct FTransform>         shiftPerController                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		EPRControllerType                                  Controller                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Shift                                                      (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetItemShiftForController(TMap<EPRControllerType, struct FTransform> shiftPerController, EPRControllerType Controller, struct FTransform* Shift)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetItemShiftForController");
		
		UPlayerHandsConfig_GetItemShiftForController_Params params {};
		params.shiftPerController = shiftPerController;
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Shift != nullptr)
			*Shift = params.Shift;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForTagByGeometryTypeAndPoseNumber
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                Tag                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            GeometryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRHandPoseInfosPair UPlayerHandsConfig::GetHandsPoseForTagByGeometryTypeAndPoseNumber(EPRHandPoseType poseType, const struct FGameplayTag& Tag, EPRHandPoseGeometryType GeometryType, EPRHandPoseNumber PoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForTagByGeometryTypeAndPoseNumber");
		
		UPlayerHandsConfig_GetHandsPoseForTagByGeometryTypeAndPoseNumber_Params params {};
		params.poseType = poseType;
		params.Tag = Tag;
		params.GeometryType = GeometryType;
		params.PoseNumber = PoseNumber;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForTag
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                Tag                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRHandPoseInfosPair UPlayerHandsConfig::GetHandsPoseForTag(EPRHandPoseType poseType, const struct FGameplayTag& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForTag");
		
		UPlayerHandsConfig_GetHandsPoseForTag_Params params {};
		params.poseType = poseType;
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForStaticMeshByGeometryTypeAndPoseNumber
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UStaticMesh*                                 StaticMesh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            GeometryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRHandPoseInfosPair UPlayerHandsConfig::GetHandsPoseForStaticMeshByGeometryTypeAndPoseNumber(EPRHandPoseType poseType, class UStaticMesh* StaticMesh, EPRHandPoseGeometryType GeometryType, EPRHandPoseNumber PoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForStaticMeshByGeometryTypeAndPoseNumber");
		
		UPlayerHandsConfig_GetHandsPoseForStaticMeshByGeometryTypeAndPoseNumber_Params params {};
		params.poseType = poseType;
		params.StaticMesh = StaticMesh;
		params.GeometryType = GeometryType;
		params.PoseNumber = PoseNumber;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForStaticMesh
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UStaticMesh*                                 StaticMesh                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRHandPoseInfosPair UPlayerHandsConfig::GetHandsPoseForStaticMesh(EPRHandPoseType poseType, class UStaticMesh* StaticMesh)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForStaticMesh");
		
		UPlayerHandsConfig_GetHandsPoseForStaticMesh_Params params {};
		params.poseType = poseType;
		params.StaticMesh = StaticMesh;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForObjectByGeometryTypeAndPoseNumber
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            GeometryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRHandPoseInfosPair UPlayerHandsConfig::GetHandsPoseForObjectByGeometryTypeAndPoseNumber(EPRHandPoseType poseType, class UObject* Object, EPRHandPoseGeometryType GeometryType, EPRHandPoseNumber PoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForObjectByGeometryTypeAndPoseNumber");
		
		UPlayerHandsConfig_GetHandsPoseForObjectByGeometryTypeAndPoseNumber_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		params.GeometryType = GeometryType;
		params.PoseNumber = PoseNumber;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForObject
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FPRHandPoseInfosPair UPlayerHandsConfig::GetHandsPoseForObject(EPRHandPoseType poseType, class UObject* Object)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetHandsPoseForObject");
		
		UPlayerHandsConfig_GetHandsPoseForObject_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetHandShiftForObjectByGeometryTypeAndPoseNumber
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            GeometryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Left                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  handTransform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Result                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  WorldTransform                                             (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FPRHandPoseConditions                       HandPoseConditions                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetHandShiftForObjectByGeometryTypeAndPoseNumber(EPRHandPoseType poseType, EPRHandPoseGeometryType GeometryType, EPRHandPoseNumber PoseNumber, class UObject* Object, bool Left, const struct FTransform& handTransform, bool* success, struct FTransform* Result, struct FTransform* WorldTransform, struct FPRHandPoseConditions* HandPoseConditions)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetHandShiftForObjectByGeometryTypeAndPoseNumber");
		
		UPlayerHandsConfig_GetHandShiftForObjectByGeometryTypeAndPoseNumber_Params params {};
		params.poseType = poseType;
		params.GeometryType = GeometryType;
		params.PoseNumber = PoseNumber;
		params.Object = Object;
		params.Left = Left;
		params.handTransform = handTransform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (Result != nullptr)
			*Result = params.Result;
		if (WorldTransform != nullptr)
			*WorldTransform = params.WorldTransform;
		if (HandPoseConditions != nullptr)
			*HandPoseConditions = params.HandPoseConditions;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetHandShiftForObject
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Left                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  handTransform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Result                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  WorldTransform                                             (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetHandShiftForObject(EPRHandPoseType poseType, class UObject* Object, bool Left, const struct FTransform& handTransform, bool* success, struct FTransform* Result, struct FTransform* WorldTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetHandShiftForObject");
		
		UPlayerHandsConfig_GetHandShiftForObject_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		params.Left = Left;
		params.handTransform = handTransform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (Result != nullptr)
			*Result = params.Result;
		if (WorldTransform != nullptr)
			*WorldTransform = params.WorldTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetControllerShifts
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRControllerType                                  Controller                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  LeftShift                                                  (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  RightShift                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetControllerShifts(EPRControllerType Controller, struct FTransform* LeftShift, struct FTransform* RightShift)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetControllerShifts");
		
		UPlayerHandsConfig_GetControllerShifts_Params params {};
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (LeftShift != nullptr)
			*LeftShift = params.LeftShift;
		if (RightShift != nullptr)
			*RightShift = params.RightShift;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetBestPointShiftForObjectByConditions
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Left                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  handTransform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               useGripLimit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     handRootLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              MotionController                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Result                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  WorldTransform                                             (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            bestGeometryType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  bestPoseNumber                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetBestPointShiftForObjectByConditions(EPRHandPoseType poseType, class UObject* Object, bool Left, const struct FTransform& handTransform, bool useGripLimit, const struct FVector& handRootLocation, class UGripMotionControllerComponent* MotionController, bool* success, struct FTransform* Result, struct FTransform* WorldTransform, EPRHandPoseGeometryType* bestGeometryType, EPRHandPoseNumber* bestPoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetBestPointShiftForObjectByConditions");
		
		UPlayerHandsConfig_GetBestPointShiftForObjectByConditions_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		params.Left = Left;
		params.handTransform = handTransform;
		params.useGripLimit = useGripLimit;
		params.handRootLocation = handRootLocation;
		params.MotionController = MotionController;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (Result != nullptr)
			*Result = params.Result;
		if (WorldTransform != nullptr)
			*WorldTransform = params.WorldTransform;
		if (bestGeometryType != nullptr)
			*bestGeometryType = params.bestGeometryType;
		if (bestPoseNumber != nullptr)
			*bestPoseNumber = params.bestPoseNumber;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetBestPointShiftForObject
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Left                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  handTransform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Result                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  WorldTransform                                             (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            bestGeometryType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  bestPoseNumber                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetBestPointShiftForObject(EPRHandPoseType poseType, class UObject* Object, bool Left, const struct FTransform& handTransform, bool* success, struct FTransform* Result, struct FTransform* WorldTransform, EPRHandPoseGeometryType* bestGeometryType, EPRHandPoseNumber* bestPoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetBestPointShiftForObject");
		
		UPlayerHandsConfig_GetBestPointShiftForObject_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		params.Left = Left;
		params.handTransform = handTransform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (Result != nullptr)
			*Result = params.Result;
		if (WorldTransform != nullptr)
			*WorldTransform = params.WorldTransform;
		if (bestGeometryType != nullptr)
			*bestGeometryType = params.bestGeometryType;
		if (bestPoseNumber != nullptr)
			*bestPoseNumber = params.bestPoseNumber;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetBestHandShiftForObjectByConditions
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bLeft                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  CurrentHandTransform                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bUseArmLengthLimit                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     HandShoulderLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              MotionController                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  PoseRelativeTransform                                      (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  PoseWorldTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            PoseGeometryType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetBestHandShiftForObjectByConditions(EPRHandPoseType poseType, class UObject* Object, bool bLeft, const struct FTransform& CurrentHandTransform, bool bUseArmLengthLimit, const struct FVector& HandShoulderLocation, class UGripMotionControllerComponent* MotionController, bool* bSuccess, struct FTransform* PoseRelativeTransform, struct FTransform* PoseWorldTransform, EPRHandPoseGeometryType* PoseGeometryType, EPRHandPoseNumber* PoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetBestHandShiftForObjectByConditions");
		
		UPlayerHandsConfig_GetBestHandShiftForObjectByConditions_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		params.bLeft = bLeft;
		params.CurrentHandTransform = CurrentHandTransform;
		params.bUseArmLengthLimit = bUseArmLengthLimit;
		params.HandShoulderLocation = HandShoulderLocation;
		params.MotionController = MotionController;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (PoseRelativeTransform != nullptr)
			*PoseRelativeTransform = params.PoseRelativeTransform;
		if (PoseWorldTransform != nullptr)
			*PoseWorldTransform = params.PoseWorldTransform;
		if (PoseGeometryType != nullptr)
			*PoseGeometryType = params.PoseGeometryType;
		if (PoseNumber != nullptr)
			*PoseNumber = params.PoseNumber;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.GetBestHandShiftForObject
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Left                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  handTransform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               success                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Result                                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  WorldTransform                                             (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            bestGeometryType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  bestPoseNumber                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerHandsConfig::GetBestHandShiftForObject(EPRHandPoseType poseType, class UObject* Object, bool Left, const struct FTransform& handTransform, bool* success, struct FTransform* Result, struct FTransform* WorldTransform, EPRHandPoseGeometryType* bestGeometryType, EPRHandPoseNumber* bestPoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.GetBestHandShiftForObject");
		
		UPlayerHandsConfig_GetBestHandShiftForObject_Params params {};
		params.poseType = poseType;
		params.Object = Object;
		params.Left = Left;
		params.handTransform = handTransform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (success != nullptr)
			*success = params.success;
		if (Result != nullptr)
			*Result = params.Result;
		if (WorldTransform != nullptr)
			*WorldTransform = params.WorldTransform;
		if (bestGeometryType != nullptr)
			*bestGeometryType = params.bestGeometryType;
		if (bestPoseNumber != nullptr)
			*bestPoseNumber = params.bestPoseNumber;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerHandsConfig.FromTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FTransform                                  Transform                                                  (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	struct FPRCleanTransform UPlayerHandsConfig::FromTransform(const struct FTransform& Transform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerHandsConfig.FromTransform");
		
		UPlayerHandsConfig_FromTransform_Params params {};
		params.Transform = Transform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPlayerHandsConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPlayerHandsConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PlayerHandsConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerLightSensitiveInterface.LightOn
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USceneComponent*                             Component                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerLightSensitiveInterface::LightOn(const struct FVector& Location, class USceneComponent* Component)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerLightSensitiveInterface.LightOn");
		
		UPlayerLightSensitiveInterface_LightOn_Params params {};
		params.Location = Location;
		params.Component = Component;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPlayerLightSensitiveInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPlayerLightSensitiveInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PlayerLightSensitiveInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActorComponent.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRBasicActorComponent::OnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActorComponent.OnLevelStarted");
		
		UPRBasicActorComponent_OnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActorComponent.OnLevelPrepare
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRBasicActorComponent::OnLevelPrepare(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActorComponent.OnLevelPrepare");
		
		UPRBasicActorComponent_OnLevelPrepare_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActorComponent.OnGameStartedPrivate
	 * 		Flags  -> ()
	 */
	void UPRBasicActorComponent::OnGameStartedPrivate()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActorComponent.OnGameStartedPrivate");
		
		UPRBasicActorComponent_OnGameStartedPrivate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActorComponent.OnGameStarted
	 * 		Flags  -> ()
	 */
	void UPRBasicActorComponent::OnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActorComponent.OnGameStarted");
		
		UPRBasicActorComponent_OnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRBasicActorComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRBasicActorComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRBasicActorComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.UseStamina
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Use                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              StaminaUseMult                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::UseStamina(bool Use, float StaminaUseMult)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.UseStamina");
		
		UPlayerStatsComponent_UseStamina_Params params {};
		params.Use = Use;
		params.StaminaUseMult = StaminaUseMult;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.SetStats
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            HealthPercent                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            StaminaPercent                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            RestPercent                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            NutritionPercent                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            HungerPercent                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::SetStats(int32_t HealthPercent, int32_t StaminaPercent, int32_t RestPercent, int32_t NutritionPercent, int32_t HungerPercent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.SetStats");
		
		UPlayerStatsComponent_SetStats_Params params {};
		params.HealthPercent = HealthPercent;
		params.StaminaPercent = StaminaPercent;
		params.RestPercent = RestPercent;
		params.NutritionPercent = NutritionPercent;
		params.HungerPercent = HungerPercent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.SetStamina
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::SetStamina(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.SetStamina");
		
		UPlayerStatsComponent_SetStamina_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.SetHealth
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Health                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::SetHealth(float Health)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.SetHealth");
		
		UPlayerStatsComponent_SetHealth_Params params {};
		params.Health = Health;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.Reset
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bAlive                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::Reset(bool bAlive)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.Reset");
		
		UPlayerStatsComponent_Reset_Params params {};
		params.bAlive = bAlive;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.RegenerateHealth
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              DeltaSeconds                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::RegenerateHealth(float DeltaSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.RegenerateHealth");
		
		UPlayerStatsComponent_RegenerateHealth_Params params {};
		params.DeltaSeconds = DeltaSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.HasStamina
	 * 		Flags  -> ()
	 */
	bool UPlayerStatsComponent::HasStamina()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.HasStamina");
		
		UPlayerStatsComponent_HasStamina_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.HasRest
	 * 		Flags  -> ()
	 */
	bool UPlayerStatsComponent::HasRest()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.HasRest");
		
		UPlayerStatsComponent_HasRest_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.HasNutrition
	 * 		Flags  -> ()
	 */
	bool UPlayerStatsComponent::HasNutrition()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.HasNutrition");
		
		UPlayerStatsComponent_HasNutrition_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.GetStatus
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRStatStatus                                      Health                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRStatStatus                                      Stamina                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRStatStatus                                      Nutrition                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::GetStatus(EPRStatStatus* Health, EPRStatStatus* Stamina, EPRStatStatus* Nutrition)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.GetStatus");
		
		UPlayerStatsComponent_GetStatus_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Health != nullptr)
			*Health = params.Health;
		if (Stamina != nullptr)
			*Stamina = params.Stamina;
		if (Nutrition != nullptr)
			*Nutrition = params.Nutrition;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.GetStats
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Health                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              HealthPercent                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Stamina                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              StaminaPercent                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Rest                                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              RestPercent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Nutrition                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              NutritionPercent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::GetStats(float* Health, float* HealthPercent, float* Stamina, float* StaminaPercent, float* Rest, float* RestPercent, float* Nutrition, float* NutritionPercent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.GetStats");
		
		UPlayerStatsComponent_GetStats_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Health != nullptr)
			*Health = params.Health;
		if (HealthPercent != nullptr)
			*HealthPercent = params.HealthPercent;
		if (Stamina != nullptr)
			*Stamina = params.Stamina;
		if (StaminaPercent != nullptr)
			*StaminaPercent = params.StaminaPercent;
		if (Rest != nullptr)
			*Rest = params.Rest;
		if (RestPercent != nullptr)
			*RestPercent = params.RestPercent;
		if (Nutrition != nullptr)
			*Nutrition = params.Nutrition;
		if (NutritionPercent != nullptr)
			*NutritionPercent = params.NutritionPercent;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.GetStaminaPercent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              StaminaPercent                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::GetStaminaPercent(float* StaminaPercent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.GetStaminaPercent");
		
		UPlayerStatsComponent_GetStaminaPercent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (StaminaPercent != nullptr)
			*StaminaPercent = params.StaminaPercent;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.GetSleepTimeTillRested
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            RestPercent                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Seconds                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::GetSleepTimeTillRested(int32_t RestPercent, float* Seconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.GetSleepTimeTillRested");
		
		UPlayerStatsComponent_GetSleepTimeTillRested_Params params {};
		params.RestPercent = RestPercent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Seconds != nullptr)
			*Seconds = params.Seconds;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.GetSleepTimeTillHealed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            HealthPercent                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Seconds                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::GetSleepTimeTillHealed(int32_t HealthPercent, float* Seconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.GetSleepTimeTillHealed");
		
		UPlayerStatsComponent_GetSleepTimeTillHealed_Params params {};
		params.HealthPercent = HealthPercent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Seconds != nullptr)
			*Seconds = params.Seconds;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.GetRestPercent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              RestPercent                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::GetRestPercent(float* RestPercent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.GetRestPercent");
		
		UPlayerStatsComponent_GetRestPercent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (RestPercent != nullptr)
			*RestPercent = params.RestPercent;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.GetMaxAvailableStamina
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Stamina                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              MaxAvailable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::GetMaxAvailableStamina(float* Stamina, float* MaxAvailable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.GetMaxAvailableStamina");
		
		UPlayerStatsComponent_GetMaxAvailableStamina_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Stamina != nullptr)
			*Stamina = params.Stamina;
		if (MaxAvailable != nullptr)
			*MaxAvailable = params.MaxAvailable;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.GetHealthMax
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              HealthMax                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::GetHealthMax(float* HealthMax)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.GetHealthMax");
		
		UPlayerStatsComponent_GetHealthMax_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (HealthMax != nullptr)
			*HealthMax = params.HealthMax;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.EnoughStamina
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Stamina                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPlayerStatsComponent::EnoughStamina(float Stamina)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.EnoughStamina");
		
		UPlayerStatsComponent_EnoughStamina_Params params {};
		params.Stamina = Stamina;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.ChangeStamina
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Delta                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::ChangeStamina(float Delta)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.ChangeStamina");
		
		UPlayerStatsComponent_ChangeStamina_Params params {};
		params.Delta = Delta;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.ChangeRestByPercent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Percent                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::ChangeRestByPercent(int32_t Percent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.ChangeRestByPercent");
		
		UPlayerStatsComponent_ChangeRestByPercent_Params params {};
		params.Percent = Percent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.ChangeRest
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Delta                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bBuff                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::ChangeRest(float Delta, bool bBuff)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.ChangeRest");
		
		UPlayerStatsComponent_ChangeRest_Params params {};
		params.Delta = Delta;
		params.bBuff = bBuff;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.ChangeNutrition
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Delta                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::ChangeNutrition(float Delta)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.ChangeNutrition");
		
		UPlayerStatsComponent_ChangeNutrition_Params params {};
		params.Delta = Delta;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.ChangeHealthByPercent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Percent                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::ChangeHealthByPercent(int32_t Percent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.ChangeHealthByPercent");
		
		UPlayerStatsComponent_ChangeHealthByPercent_Params params {};
		params.Percent = Percent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.CanRegenerateHealth
	 * 		Flags  -> ()
	 */
	bool UPlayerStatsComponent::CanRegenerateHealth()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.CanRegenerateHealth");
		
		UPlayerStatsComponent_CanRegenerateHealth_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayerStatsComponent.AllowRegeneration
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              HealthRegenStart                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              HealthRegenMax                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              HealthRegenPerSecond                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayerStatsComponent::AllowRegeneration(float HealthRegenStart, float HealthRegenMax, float HealthRegenPerSecond)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayerStatsComponent.AllowRegeneration");
		
		UPlayerStatsComponent_AllowRegeneration_Params params {};
		params.HealthRegenStart = HealthRegenStart;
		params.HealthRegenMax = HealthRegenMax;
		params.HealthRegenPerSecond = HealthRegenPerSecond;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPlayerStatsComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPlayerStatsComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PlayerStatsComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolDisposeComponent.StopTimer
	 * 		Flags  -> ()
	 */
	void UPoolDisposeComponent::StopTimer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolDisposeComponent.StopTimer");
		
		UPoolDisposeComponent_StopTimer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolDisposeComponent.StartTimerWithDelay
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Delay                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPoolDisposeComponent::StartTimerWithDelay(float Delay)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolDisposeComponent.StartTimerWithDelay");
		
		UPoolDisposeComponent_StartTimerWithDelay_Params params {};
		params.Delay = Delay;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolDisposeComponent.StartTimer
	 * 		Flags  -> ()
	 */
	void UPoolDisposeComponent::StartTimer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolDisposeComponent.StartTimer");
		
		UPoolDisposeComponent_StartTimer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolDisposeComponent.Dispose
	 * 		Flags  -> ()
	 */
	void UPoolDisposeComponent::Dispose()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolDisposeComponent.Dispose");
		
		UPoolDisposeComponent_Dispose_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPoolDisposeComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPoolDisposeComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PoolDisposeComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolManager.ReturnActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPoolManager::ReturnActor(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolManager.ReturnActor");
		
		UPoolManager_ReturnActor_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolManager.PrefillPoolFromConfig
	 * 		Flags  -> ()
	 */
	void UPoolManager::PrefillPoolFromConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolManager.PrefillPoolFromConfig");
		
		UPoolManager_PrefillPoolFromConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolManager.IsActorInPool
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPoolManager::IsActorInPool(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolManager.IsActorInPool");
		
		UPoolManager_IsActorInPool_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolManager.GetPoolManager
	 * 		Flags  -> ()
	 */
	class UPoolManager* UPoolManager::GetPoolManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolManager.GetPoolManager");
		
		UPoolManager_GetPoolManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolManager.GetActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UClass*                                      ActorClass                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Owner                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APawn*                                       Instigator                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class AActor* UPoolManager::GetActor(class UClass* ActorClass, const struct FTransform& Transform, class AActor* Owner, class APawn* Instigator)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolManager.GetActor");
		
		UPoolManager_GetActor_Params params {};
		params.ActorClass = ActorClass;
		params.Transform = Transform;
		params.Owner = Owner;
		params.Instigator = Instigator;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPoolManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPoolManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PoolManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PoolManagerConfig.GetPoolManagerConfig
	 * 		Flags  -> ()
	 */
	class UPoolManagerConfig* UPoolManagerConfig::GetPoolManagerConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PoolManagerConfig.GetPoolManagerConfig");
		
		UPoolManagerConfig_GetPoolManagerConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPoolManagerConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPoolManagerConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PoolManagerConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.SetCoverReservationFromSearchResult
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FNpcPointQueryResult                        Result                                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void APRBasicCharacter::SetCoverReservationFromSearchResult(const struct FNpcPointQueryResult& Result)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.SetCoverReservationFromSearchResult");
		
		APRBasicCharacter_SetCoverReservationFromSearchResult_Params params {};
		params.Result = Result;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.OnTransitionStart
	 * 		Flags  -> ()
	 */
	void APRBasicCharacter::OnTransitionStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.OnTransitionStart");
		
		APRBasicCharacter_OnTransitionStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.OnTransitionEnd
	 * 		Flags  -> ()
	 */
	void APRBasicCharacter::OnTransitionEnd()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.OnTransitionEnd");
		
		APRBasicCharacter_OnTransitionEnd_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRBasicCharacter::OnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.OnLevelStarted");
		
		APRBasicCharacter_OnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.OnLevelPrepare
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRBasicCharacter::OnLevelPrepare(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.OnLevelPrepare");
		
		APRBasicCharacter_OnLevelPrepare_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.OnGameStartedPrivate
	 * 		Flags  -> ()
	 */
	void APRBasicCharacter::OnGameStartedPrivate()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.OnGameStartedPrivate");
		
		APRBasicCharacter_OnGameStartedPrivate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.OnGameStarted
	 * 		Flags  -> ()
	 */
	void APRBasicCharacter::OnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.OnGameStarted");
		
		APRBasicCharacter_OnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.OnGamePaused
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bPaused                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRBasicCharacter::OnGamePaused(bool bPaused)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.OnGamePaused");
		
		APRBasicCharacter_OnGamePaused_Params params {};
		params.bPaused = bPaused;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.OnGameDataSaved
	 * 		Flags  -> ()
	 */
	void APRBasicCharacter::OnGameDataSaved()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.OnGameDataSaved");
		
		APRBasicCharacter_OnGameDataSaved_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.GetRandomReachablePoint
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Origin                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Radius                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     StartPoint                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              MinDistance                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Point                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRBasicCharacter::GetRandomReachablePoint(const struct FVector& Origin, float Radius, const struct FVector& StartPoint, float MinDistance, struct FVector* Point)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.GetRandomReachablePoint");
		
		APRBasicCharacter_GetRandomReachablePoint_Params params {};
		params.Origin = Origin;
		params.Radius = Radius;
		params.StartPoint = StartPoint;
		params.MinDistance = MinDistance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Point != nullptr)
			*Point = params.Point;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicCharacter.ClearCoverReservation
	 * 		Flags  -> ()
	 */
	void APRBasicCharacter::ClearCoverReservation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicCharacter.ClearCoverReservation");
		
		APRBasicCharacter_ClearCoverReservation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRBasicCharacter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRBasicCharacter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRBasicCharacter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.WalkToLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::WalkToLocation(const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.WalkToLocation");
		
		APRCharacter_WalkToLocation_Params params {};
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.WalkToActorLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::WalkToActorLocation(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.WalkToActorLocation");
		
		APRCharacter_WalkToActorLocation_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.SpawnLoot
	 * 		Flags  -> ()
	 */
	void APRCharacter::SpawnLoot()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.SpawnLoot");
		
		APRCharacter_SpawnLoot_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.SetupState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              NewAwareness                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     NewPOI                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		ECharCommand                                       NewCommand                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::SetupState(float NewAwareness, const struct FVector& NewPOI, ECharCommand NewCommand)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.SetupState");
		
		APRCharacter_SetupState_Params params {};
		params.NewAwareness = NewAwareness;
		params.NewPOI = NewPOI;
		params.NewCommand = NewCommand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.SetEnableEverything
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               enable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::SetEnableEverything(bool enable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.SetEnableEverything");
		
		APRCharacter_SetEnableEverything_Params params {};
		params.enable = enable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.SetEnableAdditionalThings
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               enable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::SetEnableAdditionalThings(bool enable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.SetEnableAdditionalThings");
		
		APRCharacter_SetEnableAdditionalThings_Params params {};
		params.enable = enable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.SetCommand
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ECharCommand                                       NewCommand                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Force                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::SetCommand(ECharCommand NewCommand, bool Force)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.SetCommand");
		
		APRCharacter_SetCommand_Params params {};
		params.NewCommand = NewCommand;
		params.Force = Force;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.SetBrainEnabled
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               enable                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::SetBrainEnabled(bool enable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.SetBrainEnabled");
		
		APRCharacter_SetBrainEnabled_Params params {};
		params.enable = enable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.SelectAndAttackClosest
	 * 		Flags  -> ()
	 */
	bool APRCharacter::SelectAndAttackClosest()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.SelectAndAttackClosest");
		
		APRCharacter_SelectAndAttackClosest_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.SelectAndAttack
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRCharacter::SelectAndAttack(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.SelectAndAttack");
		
		APRCharacter_SelectAndAttack_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.SaveGameData
	 * 		Flags  -> ()
	 */
	void APRCharacter::SaveGameData()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.SaveGameData");
		
		APRCharacter_SaveGameData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.RestartTree
	 * 		Flags  -> ()
	 */
	void APRCharacter::RestartTree()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.RestartTree");
		
		APRCharacter_RestartTree_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.ReappearOutOfSight
	 * 		Flags  -> ()
	 */
	void APRCharacter::ReappearOutOfSight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.ReappearOutOfSight");
		
		APRCharacter_ReappearOutOfSight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.ReappearCoverCallback
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FNpcPointQueryResult                        QueryResult                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::ReappearCoverCallback(const struct FNpcPointQueryResult& QueryResult)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.ReappearCoverCallback");
		
		APRCharacter_ReappearCoverCallback_Params params {};
		params.QueryResult = QueryResult;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.ProcessNoise
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FName                                        Tag                                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::ProcessNoise(const class FName& Tag, const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.ProcessNoise");
		
		APRCharacter_ProcessNoise_Params params {};
		params.Tag = Tag;
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.ProcessDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      causer                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::ProcessDamage(class AActor* causer, float Damage)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.ProcessDamage");
		
		APRCharacter_ProcessDamage_Params params {};
		params.causer = causer;
		params.Damage = Damage;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.PrintMessage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      MessageToPrint                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::PrintMessage(const class FString& MessageToPrint)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.PrintMessage");
		
		APRCharacter_PrintMessage_Params params {};
		params.MessageToPrint = MessageToPrint;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.OnHeardNoise
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Strength                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FName                                        Tag                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::OnHeardNoise(class AActor* Actor, const struct FVector& Location, float Strength, const class FName& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.OnHeardNoise");
		
		APRCharacter_OnHeardNoise_Params params {};
		params.Actor = Actor;
		params.Location = Location;
		params.Strength = Strength;
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.OnDeath
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bEnableRagdoll                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::OnDeath(bool bEnableRagdoll)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.OnDeath");
		
		APRCharacter_OnDeath_Params params {};
		params.bEnableRagdoll = bEnableRagdoll;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.OnDamaged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      causer                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::OnDamaged(class AActor* causer, float Damage)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.OnDamaged");
		
		APRCharacter_OnDamaged_Params params {};
		params.causer = causer;
		params.Damage = Damage;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.NpcAwarenessLevelChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EAwarenessLevel                                    PrevLevel                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EAwarenessLevel                                    NewLevel                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::NpcAwarenessLevelChanged(EAwarenessLevel PrevLevel, EAwarenessLevel NewLevel)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.NpcAwarenessLevelChanged");
		
		APRCharacter_NpcAwarenessLevelChanged_Params params {};
		params.PrevLevel = PrevLevel;
		params.NewLevel = NewLevel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.LoadBaseSettings
	 * 		Flags  -> ()
	 */
	void APRCharacter::LoadBaseSettings()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.LoadBaseSettings");
		
		APRCharacter_LoadBaseSettings_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.LoadAdditionalSettings
	 * 		Flags  -> ()
	 */
	void APRCharacter::LoadAdditionalSettings()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.LoadAdditionalSettings");
		
		APRCharacter_LoadAdditionalSettings_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.IsPlayerNear
	 * 		Flags  -> ()
	 */
	bool APRCharacter::IsPlayerNear()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.IsPlayerNear");
		
		APRCharacter_IsPlayerNear_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.IsLocInValidRange
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRCharacter::IsLocInValidRange(const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.IsLocInValidRange");
		
		APRCharacter_IsLocInValidRange_Params params {};
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.IsEnabled
	 * 		Flags  -> ()
	 */
	bool APRCharacter::IsEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.IsEnabled");
		
		APRCharacter_IsEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.InvestigateLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::InvestigateLocation(const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.InvestigateLocation");
		
		APRCharacter_InvestigateLocation_Params params {};
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.HealthEnd
	 * 		Flags  -> ()
	 */
	void APRCharacter::HealthEnd()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.HealthEnd");
		
		APRCharacter_HealthEnd_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.GetIdleOriginPoint
	 * 		Flags  -> ()
	 */
	struct FVector APRCharacter::GetIdleOriginPoint()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.GetIdleOriginPoint");
		
		APRCharacter_GetIdleOriginPoint_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.GetFootstepNoiseRange
	 * 		Flags  -> ()
	 */
	float APRCharacter::GetFootstepNoiseRange()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.GetFootstepNoiseRange");
		
		APRCharacter_GetFootstepNoiseRange_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.GetAwarenessLevel
	 * 		Flags  -> ()
	 */
	EAwarenessLevel APRCharacter::GetAwarenessLevel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.GetAwarenessLevel");
		
		APRCharacter_GetAwarenessLevel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.GetAttackMoveDilationAngle
	 * 		Flags  -> ()
	 */
	float APRCharacter::GetAttackMoveDilationAngle()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.GetAttackMoveDilationAngle");
		
		APRCharacter_GetAttackMoveDilationAngle_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.GetAttackLostLocationTime
	 * 		Flags  -> ()
	 */
	float APRCharacter::GetAttackLostLocationTime()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.GetAttackLostLocationTime");
		
		APRCharacter_GetAttackLostLocationTime_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.EventBroadcastEnemyLocation
	 * 		Flags  -> ()
	 */
	void APRCharacter::EventBroadcastEnemyLocation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.EventBroadcastEnemyLocation");
		
		APRCharacter_EventBroadcastEnemyLocation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.EnableRagdoll
	 * 		Flags  -> ()
	 */
	void APRCharacter::EnableRagdoll()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.EnableRagdoll");
		
		APRCharacter_EnableRagdoll_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.DestroyController
	 * 		Flags  -> ()
	 */
	void APRCharacter::DestroyController()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.DestroyController");
		
		APRCharacter_DestroyController_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.CharEnabled
	 * 		Flags  -> ()
	 */
	void APRCharacter::CharEnabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.CharEnabled");
		
		APRCharacter_CharEnabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCharacter.AlertNearbyMonsters
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      causer                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRCharacter::AlertNearbyMonsters(class AActor* causer)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCharacter.AlertNearbyMonsters");
		
		APRCharacter_AlertNearbyMonsters_Params params {};
		params.causer = causer;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRCharacter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRCharacter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCharacter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.UpdateGroundedRotation
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::UpdateGroundedRotation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.UpdateGroundedRotation");
		
		APRALSCharacter_UpdateGroundedRotation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.UpdateDynamicMovementSettings
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EGait                                              AllowedGait                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::UpdateDynamicMovementSettings(EGait AllowedGait)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.UpdateDynamicMovementSettings");
		
		APRALSCharacter_UpdateDynamicMovementSettings_Params params {};
		params.AllowedGait = AllowedGait;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.UpdateCharacterMovement
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::UpdateCharacterMovement()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.UpdateCharacterMovement");
		
		APRALSCharacter_UpdateCharacterMovement_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.SmoothCharacterRotation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRotator                                    Target                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		float                                              TargetInterpSpeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              ActorInterpSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::SmoothCharacterRotation(const struct FRotator& Target, float TargetInterpSpeed, float ActorInterpSpeed)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.SmoothCharacterRotation");
		
		APRALSCharacter_SmoothCharacterRotation_Params params {};
		params.Target = Target;
		params.TargetInterpSpeed = TargetInterpSpeed;
		params.ActorInterpSpeed = ActorInterpSpeed;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.SetMovementModel
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::SetMovementModel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.SetMovementModel");
		
		APRALSCharacter_SetMovementModel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.SetEssentialValues
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::SetEssentialValues()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.SetEssentialValues");
		
		APRALSCharacter_SetEssentialValues_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.SetActorLocationDuringRagdoll
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::SetActorLocationDuringRagdoll()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.SetActorLocationDuringRagdoll");
		
		APRALSCharacter_SetActorLocationDuringRagdoll_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.SetActorLocationAndRotation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     NewLocation                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FRotator                                    NewRotation                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bSweep                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bTeleport                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FHitResult                                  OutSweepHitResult                                          (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	bool APRALSCharacter::SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* OutSweepHitResult)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.SetActorLocationAndRotation");
		
		APRALSCharacter_SetActorLocationAndRotation_Params params {};
		params.NewLocation = NewLocation;
		params.NewRotation = NewRotation;
		params.bSweep = bSweep;
		params.bTeleport = bTeleport;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (OutSweepHitResult != nullptr)
			*OutSweepHitResult = params.OutSweepHitResult;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.RagdollUpdate
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::RagdollUpdate()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.RagdollUpdate");
		
		APRALSCharacter_RagdollUpdate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.RagdollStart
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::RagdollStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.RagdollStart");
		
		APRALSCharacter_RagdollStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.RagdollEnd
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::RagdollEnd()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.RagdollEnd");
		
		APRALSCharacter_RagdollEnd_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnViewModeChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EViewMode                                          NewViewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnViewModeChanged(EViewMode NewViewMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnViewModeChanged");
		
		APRALSCharacter_OnViewModeChanged_Params params {};
		params.NewViewMode = NewViewMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnStartCrouch
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              HalfHeightAdjust                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              ScaledHalfHeightAdjust                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnStartCrouch");
		
		APRALSCharacter_OnStartCrouch_Params params {};
		params.HalfHeightAdjust = HalfHeightAdjust;
		params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnStanceChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EStance                                            NewStance                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnStanceChanged(EStance NewStance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnStanceChanged");
		
		APRALSCharacter_OnStanceChanged_Params params {};
		params.NewStance = NewStance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnRotationModeChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ERotationMode                                      NewRotationMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnRotationModeChanged(ERotationMode NewRotationMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnRotationModeChanged");
		
		APRALSCharacter_OnRotationModeChanged_Params params {};
		params.NewRotationMode = NewRotationMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnOverlayStateChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EOverlayState                                      NewOverLayState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnOverlayStateChanged(EOverlayState NewOverLayState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnOverlayStateChanged");
		
		APRALSCharacter_OnOverlayStateChanged_Params params {};
		params.NewOverLayState = NewOverLayState;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnMovementStateChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EMovementState                                     NewMovementState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnMovementStateChanged(EMovementState NewMovementState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnMovementStateChanged");
		
		APRALSCharacter_OnMovementStateChanged_Params params {};
		params.NewMovementState = NewMovementState;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnGaitChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EGait                                              NewActualGait                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnGaitChanged(EGait NewActualGait)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnGaitChanged");
		
		APRALSCharacter_OnGaitChanged_Params params {};
		params.NewActualGait = NewActualGait;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnEndCrouch
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              HalfHeightAdjust                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              ScaledHalfHeightAdjust                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnEndCrouch");
		
		APRALSCharacter_OnEndCrouch_Params params {};
		params.HalfHeightAdjust = HalfHeightAdjust;
		params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnCharacterMovementModeChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		Engine_EMovementMode                               NewMovementMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		unsigned char                                      NewCustomMode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnCharacterMovementModeChanged(Engine_EMovementMode NewMovementMode, unsigned char NewCustomMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnCharacterMovementModeChanged");
		
		APRALSCharacter_OnCharacterMovementModeChanged_Params params {};
		params.NewMovementMode = NewMovementMode;
		params.NewCustomMode = NewCustomMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnCharacterMovementActionChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EMovementAction                                    NewMovementAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::OnCharacterMovementActionChanged(EMovementAction NewMovementAction)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnCharacterMovementActionChanged");
		
		APRALSCharacter_OnCharacterMovementActionChanged_Params params {};
		params.NewMovementAction = NewMovementAction;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.OnBeginPlay
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::OnBeginPlay()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.OnBeginPlay");
		
		APRALSCharacter_OnBeginPlay_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.LimitRotation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              AimYawMin                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AimYawMax                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              InterpSpeed                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::LimitRotation(float AimYawMin, float AimYawMax, float InterpSpeed)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.LimitRotation");
		
		APRALSCharacter_LimitRotation_Params params {};
		params.AimYawMin = AimYawMin;
		params.AimYawMax = AimYawMax;
		params.InterpSpeed = InterpSpeed;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.GetTargetMovementSettings
	 * 		Flags  -> ()
	 */
	struct FIntoTheRadius_FMovementSettings APRALSCharacter::GetTargetMovementSettings()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.GetTargetMovementSettings");
		
		APRALSCharacter_GetTargetMovementSettings_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.GetRollAnimation
	 * 		Flags  -> ()
	 */
	class UAnimMontage* APRALSCharacter::GetRollAnimation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.GetRollAnimation");
		
		APRALSCharacter_GetRollAnimation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.GetMappedSpeed
	 * 		Flags  -> ()
	 */
	float APRALSCharacter::GetMappedSpeed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.GetMappedSpeed");
		
		APRALSCharacter_GetMappedSpeed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.GetGetUpAnimation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bRagDollFaceUp                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UAnimMontage* APRALSCharacter::GetGetUpAnimation(bool bRagDollFaceUp)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.GetGetUpAnimation");
		
		APRALSCharacter_GetGetUpAnimation_Params params {};
		params.bRagDollFaceUp = bRagDollFaceUp;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.GetCapsuleLocationFromBase
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     BaseLocation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              ZOffset                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector APRALSCharacter::GetCapsuleLocationFromBase(const struct FVector& BaseLocation, float ZOffset)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.GetCapsuleLocationFromBase");
		
		APRALSCharacter_GetCapsuleLocationFromBase_Params params {};
		params.BaseLocation = BaseLocation;
		params.ZOffset = ZOffset;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.GetCapsuleBaseLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              ZOffset                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector APRALSCharacter::GetCapsuleBaseLocation(float ZOffset)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.GetCapsuleBaseLocation");
		
		APRALSCharacter_GetCapsuleBaseLocation_Params params {};
		params.ZOffset = ZOffset;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.GetAnimCurveValue
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FName                                        CurveName                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float APRALSCharacter::GetAnimCurveValue(const class FName& CurveName)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.GetAnimCurveValue");
		
		APRALSCharacter_GetAnimCurveValue_Params params {};
		params.CurveName = CurveName;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.GetAimingRotation
	 * 		Flags  -> ()
	 */
	struct FRotator APRALSCharacter::GetAimingRotation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.GetAimingRotation");
		
		APRALSCharacter_GetAimingRotation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.GetActualGait
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EGait                                              AllowedGait                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	EGait APRALSCharacter::GetActualGait(EGait AllowedGait)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.GetActualGait");
		
		APRALSCharacter_GetActualGait_Params params {};
		params.AllowedGait = AllowedGait;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.CanUpdateMovingRotation
	 * 		Flags  -> ()
	 */
	bool APRALSCharacter::CanUpdateMovingRotation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.CanUpdateMovingRotation");
		
		APRALSCharacter_CanUpdateMovingRotation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.CanSprint
	 * 		Flags  -> ()
	 */
	bool APRALSCharacter::CanSprint()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.CanSprint");
		
		APRALSCharacter_CanSprint_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.CalculateGroundedRotationRate
	 * 		Flags  -> ()
	 */
	float APRALSCharacter::CalculateGroundedRotationRate()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.CalculateGroundedRotationRate");
		
		APRALSCharacter_CalculateGroundedRotationRate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.CalculateAcceleration
	 * 		Flags  -> ()
	 */
	struct FVector APRALSCharacter::CalculateAcceleration()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.CalculateAcceleration");
		
		APRALSCharacter_CalculateAcceleration_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.CacheValues
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::CacheValues()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.CacheValues");
		
		APRALSCharacter_CacheValues_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.BeginPlay
	 * 		Flags  -> ()
	 */
	void APRALSCharacter::BeginPlay()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.BeginPlay");
		
		APRALSCharacter_BeginPlay_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRALSCharacter.AddToCharacterRotation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRotator                                    DeltaRotation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void APRALSCharacter::AddToCharacterRotation(const struct FRotator& DeltaRotation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRALSCharacter.AddToCharacterRotation");
		
		APRALSCharacter_AddToCharacterRotation_Params params {};
		params.DeltaRotation = DeltaRotation;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRALSCharacter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRALSCharacter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRALSCharacter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnimInstance.GetSMC
	 * 		Flags  -> ()
	 */
	class USkeletalMeshComponent* UPRAnimInstance::GetSMC()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnimInstance.GetSMC");
		
		UPRAnimInstance_GetSMC_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnimInstance.GetActor
	 * 		Flags  -> ()
	 */
	class AActor* UPRAnimInstance::GetActor()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnimInstance.GetActor");
		
		UPRAnimInstance_GetActor_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRAnimInstance.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRAnimInstance::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRAnimInstance");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnimPlayer.ReceiveInputDataNative
	 * 		Flags  -> ()
	 */
	void UPRAnimPlayer::ReceiveInputDataNative()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnimPlayer.ReceiveInputDataNative");
		
		UPRAnimPlayer_ReceiveInputDataNative_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRAnimPlayer.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRAnimPlayer::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRAnimPlayer");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.TriggerVisuals
	 * 		Flags  -> ()
	 */
	void APRAnomaly::TriggerVisuals()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.TriggerVisuals");
		
		APRAnomaly_TriggerVisuals_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.OverlapTriggered
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      OtherActor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRAnomaly::OverlapTriggered(class AActor* OtherActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.OverlapTriggered");
		
		APRAnomaly_OverlapTriggered_Params params {};
		params.OtherActor = OtherActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.OverlapStartingTriggered
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      OtherActor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRAnomaly::OverlapStartingTriggered(class AActor* OtherActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.OverlapStartingTriggered");
		
		APRAnomaly_OverlapStartingTriggered_Params params {};
		params.OtherActor = OtherActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.OverlapLeavingTriggered
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      OtherActor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRAnomaly::OverlapLeavingTriggered(class AActor* OtherActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.OverlapLeavingTriggered");
		
		APRAnomaly_OverlapLeavingTriggered_Params params {};
		params.OtherActor = OtherActor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.OverlapCheckerDelegate
	 * 		Flags  -> ()
	 */
	void APRAnomaly::OverlapCheckerDelegate()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.OverlapCheckerDelegate");
		
		APRAnomaly_OverlapCheckerDelegate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.OnSetupEvent
	 * 		Flags  -> ()
	 */
	void APRAnomaly::OnSetupEvent()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.OnSetupEvent");
		
		APRAnomaly_OnSetupEvent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.OnOverlapEndTrigger
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPrimitiveComponent*                         OverlappedComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      OtherActor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         OtherComp                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            OtherBodyIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRAnomaly::OnOverlapEndTrigger(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.OnOverlapEndTrigger");
		
		APRAnomaly_OnOverlapEndTrigger_Params params {};
		params.OverlappedComp = OverlappedComp;
		params.OtherActor = OtherActor;
		params.OtherComp = OtherComp;
		params.OtherBodyIndex = OtherBodyIndex;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.OnOverlapBeginTrigger
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPrimitiveComponent*                         OverlappedComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      OtherActor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         OtherComp                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            OtherBodyIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bFromSweep                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FHitResult                                  SweepResult                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	void APRAnomaly::OnOverlapBeginTrigger(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.OnOverlapBeginTrigger");
		
		APRAnomaly_OnOverlapBeginTrigger_Params params {};
		params.OverlappedComp = OverlappedComp;
		params.OtherActor = OtherActor;
		params.OtherComp = OtherComp;
		params.OtherBodyIndex = OtherBodyIndex;
		params.bFromSweep = bFromSweep;
		params.SweepResult = SweepResult;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.LevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRAnomaly::LevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.LevelStarted");
		
		APRAnomaly_LevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.LevelPrepare
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRAnomaly::LevelPrepare(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.LevelPrepare");
		
		APRAnomaly_LevelPrepare_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.GenerateTriggersOverlapEvents
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               ClearExistingEvents                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRAnomaly::GenerateTriggersOverlapEvents(bool ClearExistingEvents)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.GenerateTriggersOverlapEvents");
		
		APRAnomaly_GenerateTriggersOverlapEvents_Params params {};
		params.ClearExistingEvents = ClearExistingEvents;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.ApplyAnomalyDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRAnomaly::ApplyAnomalyDamage(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.ApplyAnomalyDamage");
		
		APRAnomaly_ApplyAnomalyDamage_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAnomaly.AnomalyTriggered
	 * 		Flags  -> ()
	 */
	void APRAnomaly::AnomalyTriggered()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAnomaly.AnomalyTriggered");
		
		APRAnomaly_AnomalyTriggered_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRAnomaly.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRAnomaly::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRAnomaly");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRAsh.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRAsh::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRAsh");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRAshMeshComponent.InitParticles
	 * 		Flags  -> ()
	 */
	void UPRAshMeshComponent::InitParticles()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRAshMeshComponent.InitParticles");
		
		UPRAshMeshComponent_InitParticles_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRAshMeshComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRAshMeshComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRAshMeshComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRAudioSpline.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRAudioSpline::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRAudioSpline");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicActorWithConditions.CheckActorConditions
	 * 		Flags  -> ()
	 */
	bool APRBasicActorWithConditions::CheckActorConditions()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicActorWithConditions.CheckActorConditions");
		
		APRBasicActorWithConditions_CheckActorConditions_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRBasicActorWithConditions.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRBasicActorWithConditions::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRBasicActorWithConditions");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicSceneComponent.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRBasicSceneComponent::OnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicSceneComponent.OnLevelStarted");
		
		UPRBasicSceneComponent_OnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicSceneComponent.OnLevelPrepare
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRBasicSceneComponent::OnLevelPrepare(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicSceneComponent.OnLevelPrepare");
		
		UPRBasicSceneComponent_OnLevelPrepare_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicSceneComponent.OnGameStartedPrivate
	 * 		Flags  -> ()
	 */
	void UPRBasicSceneComponent::OnGameStartedPrivate()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicSceneComponent.OnGameStartedPrivate");
		
		UPRBasicSceneComponent_OnGameStartedPrivate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRBasicSceneComponent.OnGameStarted
	 * 		Flags  -> ()
	 */
	void UPRBasicSceneComponent::OnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRBasicSceneComponent.OnGameStarted");
		
		UPRBasicSceneComponent_OnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRBasicSceneComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRBasicSceneComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRBasicSceneComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.UnlockAllWeapons
	 * 		Flags  -> ()
	 */
	void UPRCheatManager::UnlockAllWeapons()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.UnlockAllWeapons");
		
		UPRCheatManager_UnlockAllWeapons_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.ToggleProjectileDraw
	 * 		Flags  -> ()
	 */
	void UPRCheatManager::ToggleProjectileDraw()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.ToggleProjectileDraw");
		
		UPRCheatManager_ToggleProjectileDraw_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.SpawnItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Tag                                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::SpawnItem(const class FString& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.SpawnItem");
		
		UPRCheatManager_SpawnItem_Params params {};
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.ShowRevision
	 * 		Flags  -> ()
	 */
	void UPRCheatManager::ShowRevision()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.ShowRevision");
		
		UPRCheatManager_ShowRevision_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.SetSkipTutorial
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               b_new_skip                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::SetSkipTutorial(bool b_new_skip)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.SetSkipTutorial");
		
		UPRCheatManager_SetSkipTutorial_Params params {};
		params.b_new_skip = b_new_skip;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.SecurityLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Level                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::SecurityLevel(int32_t Level)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.SecurityLevel");
		
		UPRCheatManager_SecurityLevel_Params params {};
		params.Level = Level;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.RIP
	 * 		Flags  -> ()
	 */
	void UPRCheatManager::RIP()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.RIP");
		
		UPRCheatManager_RIP_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.ResetTideTimer
	 * 		Flags  -> ()
	 */
	void UPRCheatManager::ResetTideTimer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.ResetTideTimer");
		
		UPRCheatManager_ResetTideTimer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.RefillAmmoContainer
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::RefillAmmoContainer(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.RefillAmmoContainer");
		
		UPRCheatManager_RefillAmmoContainer_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.RefillAmmo
	 * 		Flags  -> ()
	 */
	void UPRCheatManager::RefillAmmo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.RefillAmmo");
		
		UPRCheatManager_RefillAmmo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.RaiseCrashReport
	 * 		Flags  -> ()
	 */
	void UPRCheatManager::RaiseCrashReport()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.RaiseCrashReport");
		
		UPRCheatManager_RaiseCrashReport_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.PrintActors
	 * 		Flags  -> ()
	 */
	void UPRCheatManager::PrintActors()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.PrintActors");
		
		UPRCheatManager_PrintActors_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.IsProjectileDraw
	 * 		Flags  -> ()
	 */
	bool UPRCheatManager::IsProjectileDraw()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.IsProjectileDraw");
		
		UPRCheatManager_IsProjectileDraw_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.GiveMeTheWeapon
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Tag                                                        (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::GiveMeTheWeapon(const class FString& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.GiveMeTheWeapon");
		
		UPRCheatManager_GiveMeTheWeapon_Params params {};
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.GiveMeTheMoney
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Amount                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::GiveMeTheMoney(int32_t Amount)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.GiveMeTheMoney");
		
		UPRCheatManager_GiveMeTheMoney_Params params {};
		params.Amount = Amount;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.GiveMeTheDurability
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::GiveMeTheDurability(int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.GiveMeTheDurability");
		
		UPRCheatManager_GiveMeTheDurability_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.GiveMeTheBullets
	 * 		Flags  -> ()
	 */
	void UPRCheatManager::GiveMeTheBullets()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.GiveMeTheBullets");
		
		UPRCheatManager_GiveMeTheBullets_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.GetSkipTutorial
	 * 		Flags  -> ()
	 */
	bool UPRCheatManager::GetSkipTutorial()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.GetSkipTutorial");
		
		UPRCheatManager_GetSkipTutorial_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.GetMission
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                MissionInstanceId                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMissionData*                                MissionData                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::GetMission(const struct FGameplayTag& MissionInstanceId, class UMissionData** MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.GetMission");
		
		UPRCheatManager_GetMission_Params params {};
		params.MissionInstanceId = MissionInstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (MissionData != nullptr)
			*MissionData = params.MissionData;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.GetChildTags
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                parentTag                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<struct FGameplayTag> UPRCheatManager::GetChildTags(const struct FGameplayTag& parentTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.GetChildTags");
		
		UPRCheatManager_GetChildTags_Params params {};
		params.parentTag = parentTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.DoSpawnItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UInventoryItem* UPRCheatManager::DoSpawnItem(const struct FGameplayTag& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.DoSpawnItem");
		
		UPRCheatManager_DoSpawnItem_Params params {};
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.ChangeHealth
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Delta                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::ChangeHealth(int32_t Delta)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.ChangeHealth");
		
		UPRCheatManager_ChangeHealth_Params params {};
		params.Delta = Delta;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCheatManager.AddMission
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCheatManager::AddMission(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCheatManager.AddMission");
		
		UPRCheatManager_AddMission_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCheatManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCheatManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCheatManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRClusterPattern.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRClusterPattern::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRClusterPattern");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRClusterPointArtifact.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRClusterPointArtifact::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRClusterPointArtifact");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRClusterSpawner.OnCheckTick
	 * 		Flags  -> ()
	 */
	void APRClusterSpawner::OnCheckTick()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRClusterSpawner.OnCheckTick");
		
		APRClusterSpawner_OnCheckTick_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRClusterSpawner.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRClusterSpawner::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRClusterSpawner");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.SetTrigger
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCommonGameData::SetTrigger(const struct FGameplayTag& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.SetTrigger");
		
		UPRCommonGameData_SetTrigger_Params params {};
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.SaveShootingRun
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              RunTime                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Scores                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Hits                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Misses                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            GrenadeKills                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCommonGameData::SaveShootingRun(float RunTime, int32_t Scores, int32_t Hits, int32_t Misses, int32_t GrenadeKills)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.SaveShootingRun");
		
		UPRCommonGameData_SaveShootingRun_Params params {};
		params.RunTime = RunTime;
		params.Scores = Scores;
		params.Hits = Hits;
		params.Misses = Misses;
		params.GrenadeKills = GrenadeKills;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.OnMissionChange
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCommonGameData::OnMissionChange(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.OnMissionChange");
		
		UPRCommonGameData_OnMissionChange_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.OnItemTaken
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCommonGameData::OnItemTaken(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.OnItemTaken");
		
		UPRCommonGameData_OnItemTaken_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.IsWeaponUnlocked
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRCommonGameData::IsWeaponUnlocked(const struct FGameplayTag& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.IsWeaponUnlocked");
		
		UPRCommonGameData_IsWeaponUnlocked_Params params {};
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.Initialize
	 * 		Flags  -> ()
	 */
	void UPRCommonGameData::Initialize()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.Initialize");
		
		UPRCommonGameData_Initialize_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.IncrementGuitarPlayCount
	 * 		Flags  -> ()
	 */
	int32_t UPRCommonGameData::IncrementGuitarPlayCount()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.IncrementGuitarPlayCount");
		
		UPRCommonGameData_IncrementGuitarPlayCount_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.GetTrigger
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRCommonGameData::GetTrigger(const struct FGameplayTag& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.GetTrigger");
		
		UPRCommonGameData_GetTrigger_Params params {};
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.GetTotalPlaytimeMinutes
	 * 		Flags  -> ()
	 */
	float UPRCommonGameData::GetTotalPlaytimeMinutes()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.GetTotalPlaytimeMinutes");
		
		UPRCommonGameData_GetTotalPlaytimeMinutes_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRCommonGameData.GetCommonGameData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPRCommonGameData*                           Data                                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRCommonGameData::GetCommonGameData(class UPRCommonGameData** Data)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRCommonGameData.GetCommonGameData");
		
		UPRCommonGameData_GetCommonGameData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Data != nullptr)
			*Data = params.Data;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCommonGameData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCommonGameData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCommonGameData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_FloatCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_FloatCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_FloatCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_IntCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_IntCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_IntCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_Mission.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_Mission::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_Mission");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_Trigger.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_Trigger::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_Trigger");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_MissionsList.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_MissionsList::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_MissionsList");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_Item.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_Item::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_Item");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_ItemsList.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_ItemsList::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_ItemsList");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_NPC.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_NPC::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_NPC");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_MissionSuccessfullyFinished.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_MissionSuccessfullyFinished::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_MissionSuccessfullyFinished");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_AnyMissionsListSuccessfullyFinished.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_AnyMissionsListSuccessfullyFinished::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_AnyMissionsListSuccessfullyFinished");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_MissionActive.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_MissionActive::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_MissionActive");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_MissionsFinishedAfter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_MissionsFinishedAfter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_MissionsFinishedAfter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_SuccesfullyFinishedCountCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_SuccesfullyFinishedCountCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_SuccesfullyFinishedCountCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_TotalFinishedCountCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_TotalFinishedCountCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_TotalFinishedCountCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_ActiveCountCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_ActiveCountCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_ActiveCountCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_HoursSinceMissionSuccessfullyFinished.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_HoursSinceMissionSuccessfullyFinished::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_HoursSinceMissionSuccessfullyFinished");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_CheckInventoryItem.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_CheckInventoryItem::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_CheckInventoryItem");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_StashesOpenedCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_StashesOpenedCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_StashesOpenedCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_NPCKilled.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_NPCKilled::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_NPCKilled");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_NPCKilledWeapon.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_NPCKilledWeapon::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_NPCKilledWeapon");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_NPCMet.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_NPCMet::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_NPCMet");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_DeathsCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_DeathsCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_DeathsCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_MoneyCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_MoneyCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_MoneyCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_TriggerCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_TriggerCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_TriggerCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_CassetteCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_CassetteCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_CassetteCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_PlayerLevelCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_PlayerLevelCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_PlayerLevelCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_MinimumPlayerLevelCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_MinimumPlayerLevelCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_MinimumPlayerLevelCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_VisitedLevelCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_VisitedLevelCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_VisitedLevelCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_ORCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_ORCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_ORCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRCondition_MORCheck.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRCondition_MORCheck::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRCondition_MORCheck");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PREnvironment.Startup
	 * 		Flags  -> ()
	 */
	void APREnvironment::Startup()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PREnvironment.Startup");
		
		APREnvironment_Startup_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PREnvironment.SetEnvironmentHidden
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bEnvironmentHidden                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APREnvironment::SetEnvironmentHidden(bool bEnvironmentHidden)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PREnvironment.SetEnvironmentHidden");
		
		APREnvironment_SetEnvironmentHidden_Params params {};
		params.bEnvironmentHidden = bEnvironmentHidden;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PREnvironment.OnGameTimeChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              AddedSeconds                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APREnvironment::OnGameTimeChanged(float AddedSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PREnvironment.OnGameTimeChanged");
		
		APREnvironment_OnGameTimeChanged_Params params {};
		params.AddedSeconds = AddedSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PREnvironment.OnGameplayTimeDilationChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Dilation                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APREnvironment::OnGameplayTimeDilationChanged(float Dilation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PREnvironment.OnGameplayTimeDilationChanged");
		
		APREnvironment_OnGameplayTimeDilationChanged_Params params {};
		params.Dilation = Dilation;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PREnvironment.GetRadiusLocation
	 * 		Flags  -> ()
	 */
	struct FVector APREnvironment::GetRadiusLocation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PREnvironment.GetRadiusLocation");
		
		APREnvironment_GetRadiusLocation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APREnvironment.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APREnvironment::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PREnvironment");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.UpdateMarker
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Marker                                                     (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bRemove                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::UpdateMarker(const class FString& Marker, bool bRemove)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.UpdateMarker");
		
		UPRGameData_UpdateMarker_Params params {};
		params.Marker = Marker;
		params.bRemove = bRemove;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.UnsetTrigger
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Trigger                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::UnsetTrigger(const struct FGameplayTag& Trigger)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.UnsetTrigger");
		
		UPRGameData_UnsetTrigger_Params params {};
		params.Trigger = Trigger;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.StatAddUniqueItem
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                ItemId                                                     (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::StatAddUniqueItem(const struct FGameplayTag& ItemId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.StatAddUniqueItem");
		
		UPRGameData_StatAddUniqueItem_Params params {};
		params.ItemId = ItemId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.StatAddKill
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                NPCTag                                                     (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                weaponTag                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::StatAddKill(const struct FGameplayTag& NPCTag, const struct FGameplayTag& weaponTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.StatAddKill");
		
		UPRGameData_StatAddKill_Params params {};
		params.NPCTag = NPCTag;
		params.weaponTag = weaponTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.StatAddDeath
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                KillerTag                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::StatAddDeath(const struct FGameplayTag& KillerTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.StatAddDeath");
		
		UPRGameData_StatAddDeath_Params params {};
		params.KillerTag = KillerTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.SetTrigger
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Trigger                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::SetTrigger(const struct FGameplayTag& Trigger)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.SetTrigger");
		
		UPRGameData_SetTrigger_Params params {};
		params.Trigger = Trigger;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.SetPlayerLevel
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            PlayerLevel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::SetPlayerLevel(int32_t PlayerLevel)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.SetPlayerLevel");
		
		UPRGameData_SetPlayerLevel_Params params {};
		params.PlayerLevel = PlayerLevel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.SaveSleepLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Level                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::SaveSleepLocation(const struct FGameplayTag& Level, const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.SaveSleepLocation");
		
		UPRGameData_SaveSleepLocation_Params params {};
		params.Level = Level;
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.SaveDecorItemTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      DecorId                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::SaveDecorItemTransform(const class FString& DecorId, const struct FTransform& Transform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.SaveDecorItemTransform");
		
		UPRGameData_SaveDecorItemTransform_Params params {};
		params.DecorId = DecorId;
		params.Transform = Transform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.SaveDecorItemDestroyed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      DecorId                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::SaveDecorItemDestroyed(const class FString& DecorId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.SaveDecorItemDestroyed");
		
		UPRGameData_SaveDecorItemDestroyed_Params params {};
		params.DecorId = DecorId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.SaveDeathLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Level                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::SaveDeathLocation(const struct FGameplayTag& Level, const struct FVector& Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.SaveDeathLocation");
		
		UPRGameData_SaveDeathLocation_Params params {};
		params.Level = Level;
		params.Location = Location;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.ResetGameData
	 * 		Flags  -> ()
	 */
	void UPRGameData::ResetGameData()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.ResetGameData");
		
		UPRGameData_ResetGameData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.RemoveSleepLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Level                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::RemoveSleepLocation(const struct FGameplayTag& Level)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.RemoveSleepLocation");
		
		UPRGameData_RemoveSleepLocation_Params params {};
		params.Level = Level;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.RemoveDeathLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Level                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::RemoveDeathLocation(const struct FGameplayTag& Level)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.RemoveDeathLocation");
		
		UPRGameData_RemoveDeathLocation_Params params {};
		params.Level = Level;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.PrintMissions
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::PrintMissions(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.PrintMissions");
		
		UPRGameData_PrintMissions_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.PrintInventory
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::PrintInventory(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.PrintInventory");
		
		UPRGameData_PrintInventory_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.PrintData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::PrintData(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.PrintData");
		
		UPRGameData_PrintData_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.PrepareNewGame
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRadiusGameDifficulty                       NewDifficulty                                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bIronman                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSkipTutorial                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bStartupConfig                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<struct FGameplayTag>                        Triggers                                                   (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::PrepareNewGame(const struct FRadiusGameDifficulty& NewDifficulty, bool bIronman, bool bSkipTutorial, bool bStartupConfig, TArray<struct FGameplayTag> Triggers)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.PrepareNewGame");
		
		UPRGameData_PrepareNewGame_Params params {};
		params.NewDifficulty = NewDifficulty;
		params.bIronman = bIronman;
		params.bSkipTutorial = bSkipTutorial;
		params.bStartupConfig = bStartupConfig;
		params.Triggers = Triggers;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.OnPlayerLevelChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            PlayerLevel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::OnPlayerLevelChanged(int32_t PlayerLevel)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.OnPlayerLevelChanged");
		
		UPRGameData_OnPlayerLevelChanged_Params params {};
		params.PlayerLevel = PlayerLevel;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.OnObjectiveChange
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UMissionAbstractObjectiveData*               Objective                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::OnObjectiveChange(class UMissionData* MissionData, class UMissionAbstractObjectiveData* Objective)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.OnObjectiveChange");
		
		UPRGameData_OnObjectiveChange_Params params {};
		params.MissionData = MissionData;
		params.Objective = Objective;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.OnMissionChange
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::OnMissionChange(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.OnMissionChange");
		
		UPRGameData_OnMissionChange_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.OnItemTaken
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::OnItemTaken(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.OnItemTaken");
		
		UPRGameData_OnItemTaken_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.OnItemStored
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::OnItemStored(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.OnItemStored");
		
		UPRGameData_OnItemStored_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.IsManOfHisWord
	 * 		Flags  -> ()
	 */
	bool UPRGameData::IsManOfHisWord()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.IsManOfHisWord");
		
		UPRGameData_IsManOfHisWord_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.IsKatyaMonologueInvalid
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIgnoreConditions                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::IsKatyaMonologueInvalid(const struct FGameplayTag& Tag, bool bIgnoreConditions)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.IsKatyaMonologueInvalid");
		
		UPRGameData_IsKatyaMonologueInvalid_Params params {};
		params.Tag = Tag;
		params.bIgnoreConditions = bIgnoreConditions;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.IsJournalGroupHasNewNotes
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EJournalGroup                                      Group                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::IsJournalGroupHasNewNotes(EJournalGroup Group)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.IsJournalGroupHasNewNotes");
		
		UPRGameData_IsJournalGroupHasNewNotes_Params params {};
		params.Group = Group;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.HasMoney
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Amount                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::HasMoney(int32_t Amount)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.HasMoney");
		
		UPRGameData_HasMoney_Params params {};
		params.Amount = Amount;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetUID
	 * 		Flags  -> ()
	 */
	class FString UPRGameData::GetUID()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetUID");
		
		UPRGameData_GetUID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetSpawnSaveData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USpawnerGameData*                            SpawnSaveData                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::GetSpawnSaveData(class USpawnerGameData** SpawnSaveData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetSpawnSaveData");
		
		UPRGameData_GetSpawnSaveData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (SpawnSaveData != nullptr)
			*SpawnSaveData = params.SpawnSaveData;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetSleepLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Level                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::GetSleepLocation(const struct FGameplayTag& Level, struct FVector* Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetSleepLocation");
		
		UPRGameData_GetSleepLocation_Params params {};
		params.Level = Level;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Location != nullptr)
			*Location = params.Location;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetSecondsPassed
	 * 		Flags  -> ()
	 */
	float UPRGameData::GetSecondsPassed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetSecondsPassed");
		
		UPRGameData_GetSecondsPassed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetSecondsLastTide
	 * 		Flags  -> ()
	 */
	float UPRGameData::GetSecondsLastTide()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetSecondsLastTide");
		
		UPRGameData_GetSecondsLastTide_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetRealSecondsToTide
	 * 		Flags  -> ()
	 */
	float UPRGameData::GetRealSecondsToTide()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetRealSecondsToTide");
		
		UPRGameData_GetRealSecondsToTide_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetPlaytimeSeconds
	 * 		Flags  -> ()
	 */
	float UPRGameData::GetPlaytimeSeconds()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetPlaytimeSeconds");
		
		UPRGameData_GetPlaytimeSeconds_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetPlaytimeMinutes
	 * 		Flags  -> ()
	 */
	float UPRGameData::GetPlaytimeMinutes()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetPlaytimeMinutes");
		
		UPRGameData_GetPlaytimeMinutes_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetPlayerLevel
	 * 		Flags  -> ()
	 */
	int32_t UPRGameData::GetPlayerLevel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetPlayerLevel");
		
		UPRGameData_GetPlayerLevel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetMapRenderTarget
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UTextureRenderTarget2D*                      RenderTarget                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::GetMapRenderTarget(const struct FGameplayTag& LevelTag, class UTextureRenderTarget2D** RenderTarget)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetMapRenderTarget");
		
		UPRGameData_GetMapRenderTarget_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (RenderTarget != nullptr)
			*RenderTarget = params.RenderTarget;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetJournalGroupNotes
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EJournalGroup                                      Group                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<struct FNoteData> UPRGameData::GetJournalGroupNotes(EJournalGroup Group)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetJournalGroupNotes");
		
		UPRGameData_GetJournalGroupNotes_Params params {};
		params.Group = Group;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetGameSecondsToTide
	 * 		Flags  -> ()
	 */
	float UPRGameData::GetGameSecondsToTide()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetGameSecondsToTide");
		
		UPRGameData_GetGameSecondsToTide_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetGameData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPRGameData*                                 GameData                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::GetGameData(class UPRGameData** GameData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetGameData");
		
		UPRGameData_GetGameData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (GameData != nullptr)
			*GameData = params.GameData;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetDifficultyPreset
	 * 		Flags  -> ()
	 */
	EPRGameDifficultyPreset UPRGameData::GetDifficultyPreset()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetDifficultyPreset");
		
		UPRGameData_GetDifficultyPreset_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetDecorItemTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      DecorId                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bDestroyed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::GetDecorItemTransform(const class FString& DecorId, struct FTransform* Transform, bool* bDestroyed, bool* bSuccess)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetDecorItemTransform");
		
		UPRGameData_GetDecorItemTransform_Params params {};
		params.DecorId = DecorId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Transform != nullptr)
			*Transform = params.Transform;
		if (bDestroyed != nullptr)
			*bDestroyed = params.bDestroyed;
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.GetDeathLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Level                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::GetDeathLocation(const struct FGameplayTag& Level, struct FVector* Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.GetDeathLocation");
		
		UPRGameData_GetDeathLocation_Params params {};
		params.Level = Level;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Location != nullptr)
			*Location = params.Location;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.FillFrom
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPRGameData*                                 Other                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::FillFrom(class UPRGameData* Other)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.FillFrom");
		
		UPRGameData_FillFrom_Params params {};
		params.Other = Other;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.DumpData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Message                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::DumpData(const class FString& Message)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.DumpData");
		
		UPRGameData_DumpData_Params params {};
		params.Message = Message;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.CheckTrigger
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Trigger                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::CheckTrigger(const struct FGameplayTag& Trigger)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.CheckTrigger");
		
		UPRGameData_CheckTrigger_Params params {};
		params.Trigger = Trigger;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.CheckTideTriggers
	 * 		Flags  -> ()
	 */
	void UPRGameData::CheckTideTriggers()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.CheckTideTriggers");
		
		UPRGameData_CheckTideTriggers_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.CheckMarker
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Marker                                                     (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::CheckMarker(const class FString& Marker)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.CheckMarker");
		
		UPRGameData_CheckMarker_Params params {};
		params.Marker = Marker;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.CheckGameTriggers
	 * 		Flags  -> ()
	 */
	void UPRGameData::CheckGameTriggers()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.CheckGameTriggers");
		
		UPRGameData_CheckGameTriggers_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.ChangeMoney
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            ChangeBy                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class FString>                              AnalyticsParams                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void UPRGameData::ChangeMoney(int32_t ChangeBy, TArray<class FString> AnalyticsParams)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.ChangeMoney");
		
		UPRGameData_ChangeMoney_Params params {};
		params.ChangeBy = ChangeBy;
		params.AnalyticsParams = AnalyticsParams;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.ChangeGameDifficulty
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRadiusGameDifficulty                       Value                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	bool UPRGameData::ChangeGameDifficulty(const struct FRadiusGameDifficulty& Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.ChangeGameDifficulty");
		
		UPRGameData_ChangeGameDifficulty_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameData.ApplyTideReset
	 * 		Flags  -> ()
	 */
	void UPRGameData::ApplyTideReset()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameData.ApplyTideReset");
		
		UPRGameData_ApplyTideReset_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRGameData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRGameData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRGameData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRGIStarter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRGIStarter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRGIStarter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGIReferences.GetControllerReference
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UClass*                                      Interface                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class UObject* UPRGIReferences::GetControllerReference(class UClass* Interface)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGIReferences.GetControllerReference");
		
		UPRGIReferences_GetControllerReference_Params params {};
		params.Interface = Interface;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRGIReferences.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRGIReferences::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRGIReferences");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.SetShutdown
	 * 		Flags  -> ()
	 */
	bool UPRGameInstance::SetShutdown()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.SetShutdown");
		
		UPRGameInstance_SetShutdown_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.RestartGame
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Slot                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               skipTutorial                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               Ironman                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FRadiusGameDifficulty                       Difficulty                                                 (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPRGameInstance::RestartGame(int32_t Slot, bool skipTutorial, bool Ironman, const struct FRadiusGameDifficulty& Difficulty)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.RestartGame");
		
		UPRGameInstance_RestartGame_Params params {};
		params.Slot = Slot;
		params.skipTutorial = skipTutorial;
		params.Ironman = Ironman;
		params.Difficulty = Difficulty;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.ReceiveOnGameStart
	 * 		Flags  -> ()
	 */
	void UPRGameInstance::ReceiveOnGameStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.ReceiveOnGameStart");
		
		UPRGameInstance_ReceiveOnGameStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.OnShutdown
	 * 		Flags  -> ()
	 */
	void UPRGameInstance::OnShutdown()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.OnShutdown");
		
		UPRGameInstance_OnShutdown_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.OnBeforeLoad
	 * 		Flags  -> ()
	 */
	void UPRGameInstance::OnBeforeLoad()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.OnBeforeLoad");
		
		UPRGameInstance_OnBeforeLoad_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.IsEAPlayer
	 * 		Flags  -> ()
	 */
	bool UPRGameInstance::IsEAPlayer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.IsEAPlayer");
		
		UPRGameInstance_IsEAPlayer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.IsBetaPlayer
	 * 		Flags  -> ()
	 */
	bool UPRGameInstance::IsBetaPlayer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.IsBetaPlayer");
		
		UPRGameInstance_IsBetaPlayer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.HmdToString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHmdDeviceType                                   HMD                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UPRGameInstance::HmdToString(EPRHmdDeviceType HMD)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.HmdToString");
		
		UPRGameInstance_HmdToString_Params params {};
		params.HMD = HMD;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.HideVersionRevision
	 * 		Flags  -> ()
	 */
	bool UPRGameInstance::HideVersionRevision()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.HideVersionRevision");
		
		UPRGameInstance_HideVersionRevision_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.HasSaveOnStartup
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               hasSave                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameInstance::HasSaveOnStartup(bool* hasSave)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.HasSaveOnStartup");
		
		UPRGameInstance_HasSaveOnStartup_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (hasSave != nullptr)
			*hasSave = params.hasSave;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.GetPurchaseDate
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FDateTime                                   PurchaseDate                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      PurchaseDateString                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRGameInstance::GetPurchaseDate(struct FDateTime* PurchaseDate, class FString* PurchaseDateString)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.GetPurchaseDate");
		
		UPRGameInstance_GetPurchaseDate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (PurchaseDate != nullptr)
			*PurchaseDate = params.PurchaseDate;
		if (PurchaseDateString != nullptr)
			*PurchaseDateString = params.PurchaseDateString;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.GetPlayerID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      ID                                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameInstance::GetPlayerID(class FString* ID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.GetPlayerID");
		
		UPRGameInstance_GetPlayerID_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (ID != nullptr)
			*ID = params.ID;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.GetPlayerCountry
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      countryCode                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameInstance::GetPlayerCountry(class FString* countryCode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.GetPlayerCountry");
		
		UPRGameInstance_GetPlayerCountry_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (countryCode != nullptr)
			*countryCode = params.countryCode;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.GetHMDDeviceType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRHmdDeviceType                                   HMD                                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameInstance::GetHMDDeviceType(EPRHmdDeviceType* HMD)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.GetHMDDeviceType");
		
		UPRGameInstance_GetHMDDeviceType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (HMD != nullptr)
			*HMD = params.HMD;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.GetDeviceTypeString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      HMD                                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Controller                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameInstance::GetDeviceTypeString(class FString* HMD, class FString* Controller)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.GetDeviceTypeString");
		
		UPRGameInstance_GetDeviceTypeString_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (HMD != nullptr)
			*HMD = params.HMD;
		if (Controller != nullptr)
			*Controller = params.Controller;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.GetControllerType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRControllerType                                  Controller                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsDefault                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameInstance::GetControllerType(EPRControllerType* Controller, bool* bIsDefault)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.GetControllerType");
		
		UPRGameInstance_GetControllerType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Controller != nullptr)
			*Controller = params.Controller;
		if (bIsDefault != nullptr)
			*bIsDefault = params.bIsDefault;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.GetAnalyticsManager
	 * 		Flags  -> ()
	 */
	class UAnalyticsManager* UPRGameInstance::GetAnalyticsManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.GetAnalyticsManager");
		
		UPRGameInstance_GetAnalyticsManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.FixTutorialSaveLevel
	 * 		Flags  -> ()
	 */
	void UPRGameInstance::FixTutorialSaveLevel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.FixTutorialSaveLevel");
		
		UPRGameInstance_FixTutorialSaveLevel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.ExitGameBP
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bMenu                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSave                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRGameInstance::ExitGameBP(bool bMenu, bool bSave)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.ExitGameBP");
		
		UPRGameInstance_ExitGameBP_Params params {};
		params.bMenu = bMenu;
		params.bSave = bSave;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.DoStart
	 * 		Flags  -> ()
	 */
	void UPRGameInstance::DoStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.DoStart");
		
		UPRGameInstance_DoStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameInstance.ControllerToString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRControllerType                                  Controller                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString UPRGameInstance::ControllerToString(EPRControllerType Controller)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameInstance.ControllerToString");
		
		UPRGameInstance_ControllerToString_Params params {};
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRGameInstance.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRGameInstance::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRGameInstance");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.TogglePause
	 * 		Flags  -> ()
	 */
	void APRGameMode::TogglePause()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.TogglePause");
		
		APRGameMode_TogglePause_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.TickDebug
	 * 		Flags  -> ()
	 */
	void APRGameMode::TickDebug()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.TickDebug");
		
		APRGameMode_TickDebug_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.SetGameplayTimeDilation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Dilation                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRGameMode::SetGameplayTimeDilation(float Dilation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.SetGameplayTimeDilation");
		
		APRGameMode_SetGameplayTimeDilation_Params params {};
		params.Dilation = Dilation;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.RestorePlayerIfDead
	 * 		Flags  -> ()
	 */
	void APRGameMode::RestorePlayerIfDead()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.RestorePlayerIfDead");
		
		APRGameMode_RestorePlayerIfDead_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.ResetAutosaveTimer_Native
	 * 		Flags  -> ()
	 */
	void APRGameMode::ResetAutosaveTimer_Native()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.ResetAutosaveTimer_Native");
		
		APRGameMode_ResetAutosaveTimer_Native_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.RecallLevelLoaded
	 * 		Flags  -> ()
	 */
	void APRGameMode::RecallLevelLoaded()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.RecallLevelLoaded");
		
		APRGameMode_RecallLevelLoaded_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.PreparePlayerForFinalChoice
	 * 		Flags  -> ()
	 */
	void APRGameMode::PreparePlayerForFinalChoice()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.PreparePlayerForFinalChoice");
		
		APRGameMode_PreparePlayerForFinalChoice_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.PrepareMissionExecutor
	 * 		Flags  -> ()
	 */
	void APRGameMode::PrepareMissionExecutor()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.PrepareMissionExecutor");
		
		APRGameMode_PrepareMissionExecutor_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnTransitionStart
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnTransitionStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnTransitionStart");
		
		APRGameMode_OnTransitionStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnTransitionHint
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnTransitionHint()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnTransitionHint");
		
		APRGameMode_OnTransitionHint_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnTransitionEnd
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnTransitionEnd()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnTransitionEnd");
		
		APRGameMode_OnTransitionEnd_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnTideHappening
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bReload                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRGameMode::OnTideHappening(bool bReload)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnTideHappening");
		
		APRGameMode_OnTideHappening_Params params {};
		params.bReload = bReload;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnStartedGame
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnStartedGame()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnStartedGame");
		
		APRGameMode_OnStartedGame_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnStartedEditor
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnStartedEditor()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnStartedEditor");
		
		APRGameMode_OnStartedEditor_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnMissionStateChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMissionData*                                MissionData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRGameMode::OnMissionStateChanged(class UMissionData* MissionData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnMissionStateChanged");
		
		APRGameMode_OnMissionStateChanged_Params params {};
		params.MissionData = MissionData;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnLevelUnloaded
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnLevelUnloaded()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnLevelUnloaded");
		
		APRGameMode_OnLevelUnloaded_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRGameMode::OnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnLevelStarted");
		
		APRGameMode_OnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnLevelPrepare
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRGameMode::OnLevelPrepare(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnLevelPrepare");
		
		APRGameMode_OnLevelPrepare_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnLevelLoaded
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnLevelLoaded()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnLevelLoaded");
		
		APRGameMode_OnLevelLoaded_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnInitializeGame
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnInitializeGame()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnInitializeGame");
		
		APRGameMode_OnInitializeGame_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnInitializeEditor
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnInitializeEditor()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnInitializeEditor");
		
		APRGameMode_OnInitializeEditor_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnGameStarted
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnGameStarted");
		
		APRGameMode_OnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnGameDataPreSave
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnGameDataPreSave()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnGameDataPreSave");
		
		APRGameMode_OnGameDataPreSave_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnEnteredMenu
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnEnteredMenu()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnEnteredMenu");
		
		APRGameMode_OnEnteredMenu_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.OnEditorLevelLoaded
	 * 		Flags  -> ()
	 */
	void APRGameMode::OnEditorLevelLoaded()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.OnEditorLevelLoaded");
		
		APRGameMode_OnEditorLevelLoaded_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.MakeActorUID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString APRGameMode::MakeActorUID(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.MakeActorUID");
		
		APRGameMode_MakeActorUID_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.KillActorsOnReload
	 * 		Flags  -> ()
	 */
	void APRGameMode::KillActorsOnReload()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.KillActorsOnReload");
		
		APRGameMode_KillActorsOnReload_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.GetPRGameMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class APRGameMode*                                 GameMode                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRGameMode::GetPRGameMode(class APRGameMode** GameMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.GetPRGameMode");
		
		APRGameMode_GetPRGameMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (GameMode != nullptr)
			*GameMode = params.GameMode;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.GetGameplayTimeDilation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Dilation                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRGameMode::GetGameplayTimeDilation(float* Dilation)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.GetGameplayTimeDilation");
		
		APRGameMode_GetGameplayTimeDilation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Dilation != nullptr)
			*Dilation = params.Dilation;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.GetCurrentEnvironment
	 * 		Flags  -> ()
	 */
	class APREnvironment* APRGameMode::GetCurrentEnvironment()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.GetCurrentEnvironment");
		
		APRGameMode_GetCurrentEnvironment_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.GetActorUID
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString APRGameMode::GetActorUID(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.GetActorUID");
		
		APRGameMode_GetActorUID_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.FinishTransfer
	 * 		Flags  -> ()
	 */
	void APRGameMode::FinishTransfer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.FinishTransfer");
		
		APRGameMode_FinishTransfer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.FindLevelStart
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                LocationTag                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Velocity                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bFromSave                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRGameMode::FindLevelStart(const struct FGameplayTag& LevelTag, const struct FGameplayTag& LocationTag, struct FTransform* Transform, struct FVector* Velocity, bool* bFromSave)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.FindLevelStart");
		
		APRGameMode_FindLevelStart_Params params {};
		params.LevelTag = LevelTag;
		params.LocationTag = LocationTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Transform != nullptr)
			*Transform = params.Transform;
		if (Velocity != nullptr)
			*Velocity = params.Velocity;
		if (bFromSave != nullptr)
			*bFromSave = params.bFromSave;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.DoTransferToLevel
	 * 		Flags  -> ()
	 */
	void APRGameMode::DoTransferToLevel()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.DoTransferToLevel");
		
		APRGameMode_DoTransferToLevel_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.DoStart
	 * 		Flags  -> ()
	 */
	void APRGameMode::DoStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.DoStart");
		
		APRGameMode_DoStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.DoPrepare
	 * 		Flags  -> ()
	 */
	void APRGameMode::DoPrepare()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.DoPrepare");
		
		APRGameMode_DoPrepare_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.DoEndTransition
	 * 		Flags  -> ()
	 */
	void APRGameMode::DoEndTransition()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.DoEndTransition");
		
		APRGameMode_DoEndTransition_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.ContinueTransitionLoad
	 * 		Flags  -> ()
	 */
	void APRGameMode::ContinueTransitionLoad()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.ContinueTransitionLoad");
		
		APRGameMode_ContinueTransitionLoad_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.CheckFocusPause
	 * 		Flags  -> ()
	 */
	void APRGameMode::CheckFocusPause()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.CheckFocusPause");
		
		APRGameMode_CheckFocusPause_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGameMode.BeginWaitingForPSO
	 * 		Flags  -> ()
	 */
	void APRGameMode::BeginWaitingForPSO()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGameMode.BeginWaitingForPSO");
		
		APRGameMode_BeginWaitingForPSO_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRGameMode.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRGameMode::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRGameMode");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.ShowHiddenStaticMeshComponents
	 * 		Flags  -> ()
	 */
	void APRGenerateInstancedStaticMeshVolume::ShowHiddenStaticMeshComponents()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.ShowHiddenStaticMeshComponents");
		
		APRGenerateInstancedStaticMeshVolume_ShowHiddenStaticMeshComponents_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.ShowAllGeneratedInstanced
	 * 		Flags  -> ()
	 */
	void APRGenerateInstancedStaticMeshVolume::ShowAllGeneratedInstanced()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.ShowAllGeneratedInstanced");
		
		APRGenerateInstancedStaticMeshVolume_ShowAllGeneratedInstanced_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.RestoreHidden
	 * 		Flags  -> ()
	 */
	void APRGenerateInstancedStaticMeshVolume::RestoreHidden()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.RestoreHidden");
		
		APRGenerateInstancedStaticMeshVolume_RestoreHidden_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.RehideHiddenStaticMeshComponents
	 * 		Flags  -> ()
	 */
	void APRGenerateInstancedStaticMeshVolume::RehideHiddenStaticMeshComponents()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.RehideHiddenStaticMeshComponents");
		
		APRGenerateInstancedStaticMeshVolume_RehideHiddenStaticMeshComponents_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.HideAllGeneratedInstanced
	 * 		Flags  -> ()
	 */
	void APRGenerateInstancedStaticMeshVolume::HideAllGeneratedInstanced()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.HideAllGeneratedInstanced");
		
		APRGenerateInstancedStaticMeshVolume_HideAllGeneratedInstanced_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.GatherMulitipleSmActors
	 * 		Flags  -> ()
	 */
	void APRGenerateInstancedStaticMeshVolume::GatherMulitipleSmActors()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.GatherMulitipleSmActors");
		
		APRGenerateInstancedStaticMeshVolume_GatherMulitipleSmActors_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.DestroyAllGeneratedInstanced
	 * 		Flags  -> ()
	 */
	void APRGenerateInstancedStaticMeshVolume::DestroyAllGeneratedInstanced()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.DestroyAllGeneratedInstanced");
		
		APRGenerateInstancedStaticMeshVolume_DestroyAllGeneratedInstanced_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.CreateMultipleInstanced
	 * 		Flags  -> ()
	 */
	void APRGenerateInstancedStaticMeshVolume::CreateMultipleInstanced()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.CreateMultipleInstanced");
		
		APRGenerateInstancedStaticMeshVolume_CreateMultipleInstanced_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.CreateInstanced
	 * 		Flags  -> ()
	 */
	void APRGenerateInstancedStaticMeshVolume::CreateInstanced()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGenerateInstancedStaticMeshVolume.CreateInstanced");
		
		APRGenerateInstancedStaticMeshVolume_CreateInstanced_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRGenerateInstancedStaticMeshVolume.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRGenerateInstancedStaticMeshVolume::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRGenerateInstancedStaticMeshVolume");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGrassAnomaly.ReduceComponent
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Index                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRGrassAnomaly::ReduceComponent(int32_t Index, float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGrassAnomaly.ReduceComponent");
		
		APRGrassAnomaly_ReduceComponent_Params params {};
		params.Index = Index;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRGrassAnomaly.Initialize
	 * 		Flags  -> ()
	 */
	void APRGrassAnomaly::Initialize()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRGrassAnomaly.Initialize");
		
		APRGrassAnomaly_Initialize_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRGrassAnomaly.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRGrassAnomaly::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRGrassAnomaly");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRGrippableStaticMeshComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRGrippableStaticMeshComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRGrippableStaticMeshComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRHolder.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRHolder::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRHolder");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRHolderMark.Update
	 * 		Flags  -> ()
	 */
	void APRHolderMark::Update()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRHolderMark.Update");
		
		APRHolderMark_Update_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRHolderMark.LinkActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      ActorInHand                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsLeft                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRHolderMark::LinkActor(class AActor* ActorInHand, bool bIsLeft)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRHolderMark.LinkActor");
		
		APRHolderMark_LinkActor_Params params {};
		params.ActorInHand = ActorInHand;
		params.bIsLeft = bIsLeft;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRHolderMark.InitHolsterRef
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UHolsterComponent*                           holsterRef                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRHolderMark::InitHolsterRef(class UHolsterComponent* holsterRef)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRHolderMark.InitHolsterRef");
		
		APRHolderMark_InitHolsterRef_Params params {};
		params.holsterRef = holsterRef;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRHolderMark.Highlight
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIsLeft                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRHolderMark::Highlight(bool bIsLeft)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRHolderMark.Highlight");
		
		APRHolderMark_Highlight_Params params {};
		params.bIsLeft = bIsLeft;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRHolderMark.GetDistances
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bLeftInRange                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              leftDistance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bRightInRange                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              rightDistance                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRHolderMark::GetDistances(bool* bLeftInRange, float* leftDistance, bool* bRightInRange, float* rightDistance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRHolderMark.GetDistances");
		
		APRHolderMark_GetDistances_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bLeftInRange != nullptr)
			*bLeftInRange = params.bLeftInRange;
		if (leftDistance != nullptr)
			*leftDistance = params.leftDistance;
		if (bRightInRange != nullptr)
			*bRightInRange = params.bRightInRange;
		if (rightDistance != nullptr)
			*rightDistance = params.rightDistance;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRHolderMark.GetActorInRightHand
	 * 		Flags  -> ()
	 */
	class AActor* APRHolderMark::GetActorInRightHand()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRHolderMark.GetActorInRightHand");
		
		APRHolderMark_GetActorInRightHand_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRHolderMark.GetActorInLeftHand
	 * 		Flags  -> ()
	 */
	class AActor* APRHolderMark::GetActorInLeftHand()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRHolderMark.GetActorInLeftHand");
		
		APRHolderMark_GetActorInLeftHand_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRHolderMark.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRHolderMark::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRHolderMark");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRItemActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRItemActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRItemActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRItemDurabilityComponent.OnTakePointDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      DamagedActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AController*                                 InstigatedBy                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     HitLocation                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         HitComponent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FName                                        BoneName                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     ShotFromDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UDamageType*                                 DamageType                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      DamageCauser                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRItemDurabilityComponent::OnTakePointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, const class FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRItemDurabilityComponent.OnTakePointDamage");
		
		UPRItemDurabilityComponent_OnTakePointDamage_Params params {};
		params.DamagedActor = DamagedActor;
		params.Damage = Damage;
		params.InstigatedBy = InstigatedBy;
		params.HitLocation = HitLocation;
		params.HitComponent = HitComponent;
		params.BoneName = BoneName;
		params.ShotFromDirection = ShotFromDirection;
		params.DamageType = DamageType;
		params.DamageCauser = DamageCauser;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRItemDurabilityComponent.OnTakeAnyDamage
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      DamagedActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UDamageType*                                 DamageType                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AController*                                 InstigatedBy                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      DamageCauser                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRItemDurabilityComponent::OnTakeAnyDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRItemDurabilityComponent.OnTakeAnyDamage");
		
		UPRItemDurabilityComponent_OnTakeAnyDamage_Params params {};
		params.DamagedActor = DamagedActor;
		params.Damage = Damage;
		params.DamageType = DamageType;
		params.InstigatedBy = InstigatedBy;
		params.DamageCauser = DamageCauser;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRItemDurabilityComponent.ChangeDurability
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      causer                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                weponTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UDamageType*                                 DamageType                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UPRItemDurabilityComponent::ChangeDurability(float Damage, class AActor* causer, const struct FGameplayTag& weponTag, class UDamageType* DamageType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRItemDurabilityComponent.ChangeDurability");
		
		UPRItemDurabilityComponent_ChangeDurability_Params params {};
		params.Damage = Damage;
		params.causer = causer;
		params.weponTag = weponTag;
		params.DamageType = DamageType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRItemDurabilityComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRItemDurabilityComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRItemDurabilityComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRItemSpawner.FillAmmo
	 * 		Flags  -> ()
	 */
	void APRItemSpawner::FillAmmo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRItemSpawner.FillAmmo");
		
		APRItemSpawner_FillAmmo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRItemSpawner.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRItemSpawner::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRItemSpawner");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRLootSpawner.OnCheckDistanceTick
	 * 		Flags  -> ()
	 */
	void APRLootSpawner::OnCheckDistanceTick()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRLootSpawner.OnCheckDistanceTick");
		
		APRLootSpawner_OnCheckDistanceTick_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRLootSpawner.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRLootSpawner::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRLootSpawner");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRMapCenter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRMapCenter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRMapCenter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRMapMarker.IsConditionsPassed
	 * 		Flags  -> ()
	 */
	bool APRMapMarker::IsConditionsPassed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRMapMarker.IsConditionsPassed");
		
		APRMapMarker_IsConditionsPassed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRMapMarker.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRMapMarker::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRMapMarker");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRMapPoint.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRMapPoint::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRMapPoint");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Float.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Float::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Float");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Int.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Int::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Int");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModifiableFloat.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModifiableFloat::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModifiableFloat");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModifiableInt.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModifiableInt::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModifiableInt");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Float_Multiply.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Float_Multiply::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Float_Multiply");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Float_Add.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Float_Add::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Float_Add");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Float_Percentage.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Float_Percentage::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Float_Percentage");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Float_PercentsAdd.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Float_PercentsAdd::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Float_PercentsAdd");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Int_Multiply.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Int_Multiply::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Int_Multiply");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Int_Add.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Int_Add::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Int_Add");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Int_Percentage.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Int_Percentage::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Int_Percentage");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRModificator_Int_PercentsAdd.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRModificator_Int_PercentsAdd::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRModificator_Int_PercentsAdd");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.VerifyPlayerSelection
	 * 		Flags  -> ()
	 */
	void UPRNpcPerceptionComponent::VerifyPlayerSelection()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.VerifyPlayerSelection");
		
		UPRNpcPerceptionComponent_VerifyPlayerSelection_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.UnselectPlayer
	 * 		Flags  -> ()
	 */
	void UPRNpcPerceptionComponent::UnselectPlayer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.UnselectPlayer");
		
		UPRNpcPerceptionComponent_UnselectPlayer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.SpotPlayer
	 * 		Flags  -> ()
	 */
	void UPRNpcPerceptionComponent::SpotPlayer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.SpotPlayer");
		
		UPRNpcPerceptionComponent_SpotPlayer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.SpotActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::SpotActor(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.SpotActor");
		
		UPRNpcPerceptionComponent_SpotActor_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.SetupInitialState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              InitialAwareness                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bPlayerInitiallySelected                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::SetupInitialState(float InitialAwareness, bool bPlayerInitiallySelected)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.SetupInitialState");
		
		UPRNpcPerceptionComponent_SetupInitialState_Params params {};
		params.InitialAwareness = InitialAwareness;
		params.bPlayerInitiallySelected = bPlayerInitiallySelected;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.SetSelection
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Selection                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::SetSelection(class AActor* Actor, bool* bSuccess, class AActor** Selection)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.SetSelection");
		
		UPRNpcPerceptionComponent_SetSelection_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (Selection != nullptr)
			*Selection = params.Selection;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.SetPoiFollowSelection
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bShouldFollow                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::SetPoiFollowSelection(bool bShouldFollow)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.SetPoiFollowSelection");
		
		UPRNpcPerceptionComponent_SetPoiFollowSelection_Params params {};
		params.bShouldFollow = bShouldFollow;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.SetPoi
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     NewPOI                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bChanged                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      POIActor                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::SetPoi(const struct FVector& NewPOI, bool* bChanged, class AActor** POIActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.SetPoi");
		
		UPRNpcPerceptionComponent_SetPoi_Params params {};
		params.NewPOI = NewPOI;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bChanged != nullptr)
			*bChanged = params.bChanged;
		if (POIActor != nullptr)
			*POIActor = params.POIActor;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.SelectPlayer
	 * 		Flags  -> ()
	 */
	void UPRNpcPerceptionComponent::SelectPlayer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.SelectPlayer");
		
		UPRNpcPerceptionComponent_SelectPlayer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.SelectionIsAlive
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bAlive                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::SelectionIsAlive(bool* bAlive)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.SelectionIsAlive");
		
		UPRNpcPerceptionComponent_SelectionIsAlive_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bAlive != nullptr)
			*bAlive = params.bAlive;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.IsSpotted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSpotted                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::IsSpotted(class AActor* Actor, bool* bSpotted)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.IsSpotted");
		
		UPRNpcPerceptionComponent_IsSpotted_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSpotted != nullptr)
			*bSpotted = params.bSpotted;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.IsPlayerSpotted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bSpotted                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::IsPlayerSpotted(bool* bSpotted)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.IsPlayerSpotted");
		
		UPRNpcPerceptionComponent_IsPlayerSpotted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSpotted != nullptr)
			*bSpotted = params.bSpotted;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.IsPlayerSelectionAlive
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bAlive                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::IsPlayerSelectionAlive(bool* bAlive)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.IsPlayerSelectionAlive");
		
		UPRNpcPerceptionComponent_IsPlayerSelectionAlive_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bAlive != nullptr)
			*bAlive = params.bAlive;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.IsEnemy
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsEnemy                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::IsEnemy(class AActor* Actor, bool* bIsEnemy)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.IsEnemy");
		
		UPRNpcPerceptionComponent_IsEnemy_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bIsEnemy != nullptr)
			*bIsEnemy = params.bIsEnemy;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.IsActorSpottable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSpottable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::IsActorSpottable(class AActor* Actor, bool* bSpottable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.IsActorSpottable");
		
		UPRNpcPerceptionComponent_IsActorSpottable_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSpottable != nullptr)
			*bSpottable = params.bSpottable;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.HaveSelection
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValid                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::HaveSelection(bool* bValid)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.HaveSelection");
		
		UPRNpcPerceptionComponent_HaveSelection_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bValid != nullptr)
			*bValid = params.bValid;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.GetSensedPlayerLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValid                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Location                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::GetSensedPlayerLocation(bool* bValid, struct FVector* Location)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.GetSensedPlayerLocation");
		
		UPRNpcPerceptionComponent_GetSensedPlayerLocation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bValid != nullptr)
			*bValid = params.bValid;
		if (Location != nullptr)
			*Location = params.Location;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.GetSelection
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValid                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Selection                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  BodyTransform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::GetSelection(bool* bValid, class AActor** Selection, struct FTransform* BodyTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.GetSelection");
		
		UPRNpcPerceptionComponent_GetSelection_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bValid != nullptr)
			*bValid = params.bValid;
		if (Selection != nullptr)
			*Selection = params.Selection;
		if (BodyTransform != nullptr)
			*BodyTransform = params.BodyTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.GetPoi
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValid                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      POIActor                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::GetPoi(bool* bValid, class AActor** POIActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.GetPoi");
		
		UPRNpcPerceptionComponent_GetPoi_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bValid != nullptr)
			*bValid = params.bValid;
		if (POIActor != nullptr)
			*POIActor = params.POIActor;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.GetPlayerSelection
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValid                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Player                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  BodyTransform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::GetPlayerSelection(bool* bValid, class AActor** Player, struct FTransform* BodyTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.GetPlayerSelection");
		
		UPRNpcPerceptionComponent_GetPlayerSelection_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bValid != nullptr)
			*bValid = params.bValid;
		if (Player != nullptr)
			*Player = params.Player;
		if (BodyTransform != nullptr)
			*BodyTransform = params.BodyTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.GetClosestActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      Actor                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::GetClosestActor(bool* bSuccess, class AActor** Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.GetClosestActor");
		
		UPRNpcPerceptionComponent_GetClosestActor_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (Actor != nullptr)
			*Actor = params.Actor;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.GetAwareness
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EAwarenessLevel                                    Level                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::GetAwareness(float* Value, EAwarenessLevel* Level)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.GetAwareness");
		
		UPRNpcPerceptionComponent_GetAwareness_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Value != nullptr)
			*Value = params.Value;
		if (Level != nullptr)
			*Level = params.Level;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.ChangeAwarenessByTag
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Strength                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FName                                        Tag                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::ChangeAwarenessByTag(float Strength, const class FName& Tag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.ChangeAwarenessByTag");
		
		UPRNpcPerceptionComponent_ChangeAwarenessByTag_Params params {};
		params.Strength = Strength;
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.ChangeAwareness
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::ChangeAwareness(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.ChangeAwareness");
		
		UPRNpcPerceptionComponent_ChangeAwareness_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRNpcPerceptionComponent.AIPerceptionUpdate
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FAIStimulus                                 Stimulus                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPRNpcPerceptionComponent::AIPerceptionUpdate(class AActor* Actor, const struct FAIStimulus& Stimulus)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRNpcPerceptionComponent.AIPerceptionUpdate");
		
		UPRNpcPerceptionComponent_AIPerceptionUpdate_Params params {};
		params.Actor = Actor;
		params.Stimulus = Stimulus;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRNpcPerceptionComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRNpcPerceptionComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRNpcPerceptionComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.UpdateItemInfos
	 * 		Flags  -> ()
	 */
	void APRPlayerCharacter::UpdateItemInfos()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.UpdateItemInfos");
		
		APRPlayerCharacter_UpdateItemInfos_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.UpdateIndicatorsVisibility_Native
	 * 		Flags  -> ()
	 */
	void APRPlayerCharacter::UpdateIndicatorsVisibility_Native()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.UpdateIndicatorsVisibility_Native");
		
		APRPlayerCharacter_UpdateIndicatorsVisibility_Native_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.UnbindInteractable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::UnbindInteractable(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.UnbindInteractable");
		
		APRPlayerCharacter_UnbindInteractable_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.TryToGrabObject_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     ObjectToTryToGrab                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  WorldTransform                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              CallingHand                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              OtherHand                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsSlotGrip                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EControllerHand                                    EnumHand                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsDistanceGrip                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRPlayerCharacter::TryToGrabObject_Native(class UObject* ObjectToTryToGrab, const struct FTransform& WorldTransform, class UGripMotionControllerComponent* CallingHand, class UGripMotionControllerComponent* OtherHand, bool bIsSlotGrip, EControllerHand EnumHand, bool bIsDistanceGrip)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.TryToGrabObject_Native");
		
		APRPlayerCharacter_TryToGrabObject_Native_Params params {};
		params.ObjectToTryToGrab = ObjectToTryToGrab;
		params.WorldTransform = WorldTransform;
		params.CallingHand = CallingHand;
		params.OtherHand = OtherHand;
		params.bIsSlotGrip = bIsSlotGrip;
		params.EnumHand = EnumHand;
		params.bIsDistanceGrip = bIsDistanceGrip;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.TryDropSimulating_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              hand                                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::TryDropSimulating_Native(class UGripMotionControllerComponent* hand)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.TryDropSimulating_Native");
		
		APRPlayerCharacter_TryDropSimulating_Native_Params params {};
		params.hand = hand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.TakeInHand_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              hand                                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsCallerHandLeft                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::TakeInHand_Native(class UGripMotionControllerComponent* hand, class UObject* Object, bool bIsCallerHandLeft)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.TakeInHand_Native");
		
		APRPlayerCharacter_TakeInHand_Native_Params params {};
		params.hand = hand;
		params.Object = Object;
		params.bIsCallerHandLeft = bIsCallerHandLeft;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.RecreateBackpack_Native
	 * 		Flags  -> ()
	 */
	void APRPlayerCharacter::RecreateBackpack_Native()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.RecreateBackpack_Native");
		
		APRPlayerCharacter_RecreateBackpack_Native_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.ProcessDamageArmor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Damage                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EDamageCategory                                    DamageCategory                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      causer                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              ResultDamage                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::ProcessDamageArmor(float Damage, EDamageCategory DamageCategory, class AActor* causer, float* ResultDamage)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.ProcessDamageArmor");
		
		APRPlayerCharacter_ProcessDamageArmor_Params params {};
		params.Damage = Damage;
		params.DamageCategory = DamageCategory;
		params.causer = causer;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (ResultDamage != nullptr)
			*ResultDamage = params.ResultDamage;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.PositionClimbingIndicatorNative
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bIsLeftHand                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bReset                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::PositionClimbingIndicatorNative(bool bIsLeftHand, bool bReset)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.PositionClimbingIndicatorNative");
		
		APRPlayerCharacter_PositionClimbingIndicatorNative_Params params {};
		params.bIsLeftHand = bIsLeftHand;
		params.bReset = bReset;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.PlayHapticsFeedback
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EHapticsType                                       HapticsType                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::PlayHapticsFeedback(EHapticsType HapticsType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.PlayHapticsFeedback");
		
		APRPlayerCharacter_PlayHapticsFeedback_Params params {};
		params.HapticsType = HapticsType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.OverlapsUINative
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPrimitiveComponent*                         Prim                                                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bLeft                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bOverlaps                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::OverlapsUINative(class UPrimitiveComponent* Prim, bool bLeft, bool* bOverlaps)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.OverlapsUINative");
		
		APRPlayerCharacter_OverlapsUINative_Params params {};
		params.Prim = Prim;
		params.bLeft = bLeft;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bOverlaps != nullptr)
			*bOverlaps = params.bOverlaps;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.OverlapGripNative
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bLeft                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::OverlapGripNative(bool bLeft)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.OverlapGripNative");
		
		APRPlayerCharacter_OverlapGripNative_Params params {};
		params.bLeft = bLeft;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.OnInventoryModeChanged
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EInventoryMode                                     Mode                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::OnInventoryModeChanged(EInventoryMode Mode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.OnInventoryModeChanged");
		
		APRPlayerCharacter_OnInventoryModeChanged_Params params {};
		params.Mode = Mode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.LerpRightGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              hand                                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsSlot                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Offset                                                     (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bDisableCollision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bKeepHandSnapped                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::LerpRightGrip(class AActor* Actor, class UGripMotionControllerComponent* hand, bool bIsSlot, const struct FTransform& Offset, bool bDisableCollision, bool bKeepHandSnapped)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.LerpRightGrip");
		
		APRPlayerCharacter_LerpRightGrip_Params params {};
		params.Actor = Actor;
		params.hand = hand;
		params.bIsSlot = bIsSlot;
		params.Offset = Offset;
		params.bDisableCollision = bDisableCollision;
		params.bKeepHandSnapped = bKeepHandSnapped;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.LerpLeftGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              hand                                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsSlot                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Offset                                                     (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bDisableCollision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bKeepHandSnapped                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::LerpLeftGrip(class AActor* Actor, class UGripMotionControllerComponent* hand, bool bIsSlot, const struct FTransform& Offset, bool bDisableCollision, bool bKeepHandSnapped)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.LerpLeftGrip");
		
		APRPlayerCharacter_LerpLeftGrip_Params params {};
		params.Actor = Actor;
		params.hand = hand;
		params.bIsSlot = bIsSlot;
		params.Offset = Offset;
		params.bDisableCollision = bDisableCollision;
		params.bKeepHandSnapped = bKeepHandSnapped;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.IsCrouch
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bCrouch                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::IsCrouch(bool* bCrouch)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.IsCrouch");
		
		APRPlayerCharacter_IsCrouch_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bCrouch != nullptr)
			*bCrouch = params.bCrouch;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.IsAliveNative
	 * 		Flags  -> ()
	 */
	bool APRPlayerCharacter::IsAliveNative()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.IsAliveNative");
		
		APRPlayerCharacter_IsAliveNative_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.InitClimbing_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              hand                                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               isObjectRelative                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::InitClimbing_Native(class UGripMotionControllerComponent* hand, class UObject* Object, bool isObjectRelative)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.InitClimbing_Native");
		
		APRPlayerCharacter_InitClimbing_Native_Params params {};
		params.hand = hand;
		params.Object = Object;
		params.isObjectRelative = isObjectRelative;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.HandHaptics
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EHapticsCurve                                      Type                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EControllerHand                                    hand                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::HandHaptics(EHapticsCurve Type, EControllerHand hand)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.HandHaptics");
		
		APRPlayerCharacter_HandHaptics_Params params {};
		params.Type = Type;
		params.hand = hand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GripOrDropObject_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              CallingHand                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              OtherHand                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRPlayerCharacter::GripOrDropObject_Native(class UGripMotionControllerComponent* CallingHand, class UGripMotionControllerComponent* OtherHand)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GripOrDropObject_Native");
		
		APRPlayerCharacter_GripOrDropObject_Native_Params params {};
		params.CallingHand = CallingHand;
		params.OtherHand = OtherHand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GripOrDrop_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              CallingHand                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              OtherHand                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsGrip                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class USphereComponent*                            GrabSphere                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::GripOrDrop_Native(class UGripMotionControllerComponent* CallingHand, class UGripMotionControllerComponent* OtherHand, bool bIsGrip, class USphereComponent* GrabSphere)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GripOrDrop_Native");
		
		APRPlayerCharacter_GripOrDrop_Native_Params params {};
		params.CallingHand = CallingHand;
		params.OtherHand = OtherHand;
		params.bIsGrip = bIsGrip;
		params.GrabSphere = GrabSphere;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetWidgetInteractionRight
	 * 		Flags  -> ()
	 */
	class UWidgetInteractionComponent* APRPlayerCharacter::GetWidgetInteractionRight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetWidgetInteractionRight");
		
		APRPlayerCharacter_GetWidgetInteractionRight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetWidgetInteractionLeft
	 * 		Flags  -> ()
	 */
	class UWidgetInteractionComponent* APRPlayerCharacter::GetWidgetInteractionLeft()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetWidgetInteractionLeft");
		
		APRPlayerCharacter_GetWidgetInteractionLeft_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetW_R_WristMenu
	 * 		Flags  -> ()
	 */
	class UWidgetComponent* APRPlayerCharacter::GetW_R_WristMenu()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetW_R_WristMenu");
		
		APRPlayerCharacter_GetW_R_WristMenu_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetW_L_WristMenu
	 * 		Flags  -> ()
	 */
	class UWidgetComponent* APRPlayerCharacter::GetW_L_WristMenu()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetW_L_WristMenu");
		
		APRPlayerCharacter_GetW_L_WristMenu_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetUIPoseTriggerRight
	 * 		Flags  -> ()
	 */
	class UCapsuleComponent* APRPlayerCharacter::GetUIPoseTriggerRight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetUIPoseTriggerRight");
		
		APRPlayerCharacter_GetUIPoseTriggerRight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetUIPoseTriggerLeft
	 * 		Flags  -> ()
	 */
	class UCapsuleComponent* APRPlayerCharacter::GetUIPoseTriggerLeft()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetUIPoseTriggerLeft");
		
		APRPlayerCharacter_GetUIPoseTriggerLeft_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetTriggerWeaponSecondary
	 * 		Flags  -> ()
	 */
	class UBoxComponent* APRPlayerCharacter::GetTriggerWeaponSecondary()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetTriggerWeaponSecondary");
		
		APRPlayerCharacter_GetTriggerWeaponSecondary_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetTriggerWeaponPrimary
	 * 		Flags  -> ()
	 */
	class UBoxComponent* APRPlayerCharacter::GetTriggerWeaponPrimary()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetTriggerWeaponPrimary");
		
		APRPlayerCharacter_GetTriggerWeaponPrimary_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetTriggerMelee
	 * 		Flags  -> ()
	 */
	class UBoxComponent* APRPlayerCharacter::GetTriggerMelee()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetTriggerMelee");
		
		APRPlayerCharacter_GetTriggerMelee_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetTriggerMap
	 * 		Flags  -> ()
	 */
	class UBoxComponent* APRPlayerCharacter::GetTriggerMap()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetTriggerMap");
		
		APRPlayerCharacter_GetTriggerMap_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetTriggerDetector
	 * 		Flags  -> ()
	 */
	class UBoxComponent* APRPlayerCharacter::GetTriggerDetector()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetTriggerDetector");
		
		APRPlayerCharacter_GetTriggerDetector_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetTriggerBackpack
	 * 		Flags  -> ()
	 */
	class UBoxComponent* APRPlayerCharacter::GetTriggerBackpack()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetTriggerBackpack");
		
		APRPlayerCharacter_GetTriggerBackpack_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetSM_ClimbingIndicatorRight
	 * 		Flags  -> ()
	 */
	class UStaticMeshComponent* APRPlayerCharacter::GetSM_ClimbingIndicatorRight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetSM_ClimbingIndicatorRight");
		
		APRPlayerCharacter_GetSM_ClimbingIndicatorRight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetSM_ClimbingIndicatorLeft
	 * 		Flags  -> ()
	 */
	class UStaticMeshComponent* APRPlayerCharacter::GetSM_ClimbingIndicatorLeft()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetSM_ClimbingIndicatorLeft");
		
		APRPlayerCharacter_GetSM_ClimbingIndicatorLeft_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetRHandCollider
	 * 		Flags  -> ()
	 */
	class USphereComponent* APRPlayerCharacter::GetRHandCollider()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetRHandCollider");
		
		APRPlayerCharacter_GetRHandCollider_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetPS_BeamPointerRight
	 * 		Flags  -> ()
	 */
	class UParticleSystemComponent* APRPlayerCharacter::GetPS_BeamPointerRight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetPS_BeamPointerRight");
		
		APRPlayerCharacter_GetPS_BeamPointerRight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetPS_BeamPointerLeft
	 * 		Flags  -> ()
	 */
	class UParticleSystemComponent* APRPlayerCharacter::GetPS_BeamPointerLeft()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetPS_BeamPointerLeft");
		
		APRPlayerCharacter_GetPS_BeamPointerLeft_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetPivotVest
	 * 		Flags  -> ()
	 */
	class USceneComponent* APRPlayerCharacter::GetPivotVest()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetPivotVest");
		
		APRPlayerCharacter_GetPivotVest_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetPivotNeck
	 * 		Flags  -> ()
	 */
	class USceneComponent* APRPlayerCharacter::GetPivotNeck()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetPivotNeck");
		
		APRPlayerCharacter_GetPivotNeck_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetPivotBackpack
	 * 		Flags  -> ()
	 */
	class USceneComponent* APRPlayerCharacter::GetPivotBackpack()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetPivotBackpack");
		
		APRPlayerCharacter_GetPivotBackpack_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetNearestOverlapObjectNative
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USphereComponent*                            OverlapComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              hand                                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              OtherHand                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     OutNearestObject                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bOutImplementsInterface                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  OutObjectTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bOutCanBeClimbed                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         OutPrimitive                                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bOutIsDistanceGrip                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  OutGripPoint                                               (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bOutIsSlotGrip                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         OutTriggerPrimitive                                        (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  OutTriggerTransform                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bOutSecondary                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  OutHandTransformWhenOverlap                                (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            OutGeometryType                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  OutPoseNumber                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::GetNearestOverlapObjectNative(class USphereComponent* OverlapComponent, class UGripMotionControllerComponent* hand, class UGripMotionControllerComponent* OtherHand, class UObject** OutNearestObject, bool* bOutImplementsInterface, struct FTransform* OutObjectTransform, bool* bOutCanBeClimbed, class UPrimitiveComponent** OutPrimitive, bool* bOutIsDistanceGrip, struct FTransform* OutGripPoint, bool* bOutIsSlotGrip, class UPrimitiveComponent** OutTriggerPrimitive, struct FTransform* OutTriggerTransform, bool* bOutSecondary, struct FTransform* OutHandTransformWhenOverlap, EPRHandPoseGeometryType* OutGeometryType, EPRHandPoseNumber* OutPoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetNearestOverlapObjectNative");
		
		APRPlayerCharacter_GetNearestOverlapObjectNative_Params params {};
		params.OverlapComponent = OverlapComponent;
		params.hand = hand;
		params.OtherHand = OtherHand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (OutNearestObject != nullptr)
			*OutNearestObject = params.OutNearestObject;
		if (bOutImplementsInterface != nullptr)
			*bOutImplementsInterface = params.bOutImplementsInterface;
		if (OutObjectTransform != nullptr)
			*OutObjectTransform = params.OutObjectTransform;
		if (bOutCanBeClimbed != nullptr)
			*bOutCanBeClimbed = params.bOutCanBeClimbed;
		if (OutPrimitive != nullptr)
			*OutPrimitive = params.OutPrimitive;
		if (bOutIsDistanceGrip != nullptr)
			*bOutIsDistanceGrip = params.bOutIsDistanceGrip;
		if (OutGripPoint != nullptr)
			*OutGripPoint = params.OutGripPoint;
		if (bOutIsSlotGrip != nullptr)
			*bOutIsSlotGrip = params.bOutIsSlotGrip;
		if (OutTriggerPrimitive != nullptr)
			*OutTriggerPrimitive = params.OutTriggerPrimitive;
		if (OutTriggerTransform != nullptr)
			*OutTriggerTransform = params.OutTriggerTransform;
		if (bOutSecondary != nullptr)
			*bOutSecondary = params.bOutSecondary;
		if (OutHandTransformWhenOverlap != nullptr)
			*OutHandTransformWhenOverlap = params.OutHandTransformWhenOverlap;
		if (OutGeometryType != nullptr)
			*OutGeometryType = params.OutGeometryType;
		if (OutPoseNumber != nullptr)
			*OutPoseNumber = params.OutPoseNumber;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetLHandCollider
	 * 		Flags  -> ()
	 */
	class USphereComponent* APRPlayerCharacter::GetLHandCollider()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetLHandCollider");
		
		APRPlayerCharacter_GetLHandCollider_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetIsInteractableHolsterable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRPlayerCharacter::GetIsInteractableHolsterable(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetIsInteractableHolsterable");
		
		APRPlayerCharacter_GetIsInteractableHolsterable_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetHolsterWeaponSecondary
	 * 		Flags  -> ()
	 */
	class UHolsterComponent* APRPlayerCharacter::GetHolsterWeaponSecondary()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetHolsterWeaponSecondary");
		
		APRPlayerCharacter_GetHolsterWeaponSecondary_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetHolsterWeaponPrimary
	 * 		Flags  -> ()
	 */
	class UHolsterComponent* APRPlayerCharacter::GetHolsterWeaponPrimary()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetHolsterWeaponPrimary");
		
		APRPlayerCharacter_GetHolsterWeaponPrimary_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetHolsterProbes_R
	 * 		Flags  -> ()
	 */
	class UHolsterComponent* APRPlayerCharacter::GetHolsterProbes_R()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetHolsterProbes_R");
		
		APRPlayerCharacter_GetHolsterProbes_R_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetHolsterProbes_L
	 * 		Flags  -> ()
	 */
	class UHolsterComponent* APRPlayerCharacter::GetHolsterProbes_L()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetHolsterProbes_L");
		
		APRPlayerCharacter_GetHolsterProbes_L_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetHolsterMelee
	 * 		Flags  -> ()
	 */
	class UHolsterComponent* APRPlayerCharacter::GetHolsterMelee()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetHolsterMelee");
		
		APRPlayerCharacter_GetHolsterMelee_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetHolsterMap
	 * 		Flags  -> ()
	 */
	class UHolsterComponent* APRPlayerCharacter::GetHolsterMap()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetHolsterMap");
		
		APRPlayerCharacter_GetHolsterMap_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetHolsterDetector
	 * 		Flags  -> ()
	 */
	class UHolsterComponent* APRPlayerCharacter::GetHolsterDetector()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetHolsterDetector");
		
		APRPlayerCharacter_GetHolsterDetector_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetHolderSmallPouchActorComponent
	 * 		Flags  -> ()
	 */
	class UChildActorComponent* APRPlayerCharacter::GetHolderSmallPouchActorComponent()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetHolderSmallPouchActorComponent");
		
		APRPlayerCharacter_GetHolderSmallPouchActorComponent_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetHandDataNative
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bLeftHand                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  ControllerTransform                                        (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  HandWorldTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  HandShiftTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     Object                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               SecondaryGrip                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            HandPoseGeometryType                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  HandPoseNumber                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::GetHandDataNative(bool bLeftHand, struct FTransform* ControllerTransform, struct FTransform* HandWorldTransform, struct FTransform* HandShiftTransform, class UObject** Object, bool* SecondaryGrip, EPRHandPoseGeometryType* HandPoseGeometryType, EPRHandPoseNumber* HandPoseNumber)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetHandDataNative");
		
		APRPlayerCharacter_GetHandDataNative_Params params {};
		params.bLeftHand = bLeftHand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (ControllerTransform != nullptr)
			*ControllerTransform = params.ControllerTransform;
		if (HandWorldTransform != nullptr)
			*HandWorldTransform = params.HandWorldTransform;
		if (HandShiftTransform != nullptr)
			*HandShiftTransform = params.HandShiftTransform;
		if (Object != nullptr)
			*Object = params.Object;
		if (SecondaryGrip != nullptr)
			*SecondaryGrip = params.SecondaryGrip;
		if (HandPoseGeometryType != nullptr)
			*HandPoseGeometryType = params.HandPoseGeometryType;
		if (HandPoseNumber != nullptr)
			*HandPoseNumber = params.HandPoseNumber;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetGripRelativeTransformByGeometryTypeAndPoseNumber
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     GripObject                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              handController                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseType                                    poseType                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseGeometryType                            GeometryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRHandPoseNumber                                  PoseNumber                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  GripRelativeTransform                                      (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::GetGripRelativeTransformByGeometryTypeAndPoseNumber(class UObject* GripObject, class UGripMotionControllerComponent* handController, EPRHandPoseType poseType, EPRHandPoseGeometryType GeometryType, EPRHandPoseNumber PoseNumber, bool* bSuccess, struct FTransform* GripRelativeTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetGripRelativeTransformByGeometryTypeAndPoseNumber");
		
		APRPlayerCharacter_GetGripRelativeTransformByGeometryTypeAndPoseNumber_Params params {};
		params.GripObject = GripObject;
		params.handController = handController;
		params.poseType = poseType;
		params.GeometryType = GeometryType;
		params.PoseNumber = PoseNumber;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (GripRelativeTransform != nullptr)
			*GripRelativeTransform = params.GripRelativeTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetGrabSphereRight
	 * 		Flags  -> ()
	 */
	class USphereComponent* APRPlayerCharacter::GetGrabSphereRight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetGrabSphereRight");
		
		APRPlayerCharacter_GetGrabSphereRight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetGrabSphereLeft
	 * 		Flags  -> ()
	 */
	class USphereComponent* APRPlayerCharacter::GetGrabSphereLeft()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetGrabSphereLeft");
		
		APRPlayerCharacter_GetGrabSphereLeft_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetBPC_VRController_Right
	 * 		Flags  -> ()
	 */
	class UVRControllerComponent* APRPlayerCharacter::GetBPC_VRController_Right()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetBPC_VRController_Right");
		
		APRPlayerCharacter_GetBPC_VRController_Right_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.GetBPC_VRController_Left
	 * 		Flags  -> ()
	 */
	class UVRControllerComponent* APRPlayerCharacter::GetBPC_VRController_Left()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.GetBPC_VRController_Left");
		
		APRPlayerCharacter_GetBPC_VRController_Left_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.DropOrRetakeOrHolster_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              CallingHand                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     ObjectToGrip                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSecondaryGrip                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bZeroVelocity                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRPlayerCharacter::DropOrRetakeOrHolster_Native(class UGripMotionControllerComponent* CallingHand, class UObject* ObjectToGrip, bool bSecondaryGrip, bool bZeroVelocity)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.DropOrRetakeOrHolster_Native");
		
		APRPlayerCharacter_DropOrRetakeOrHolster_Native_Params params {};
		params.CallingHand = CallingHand;
		params.ObjectToGrip = ObjectToGrip;
		params.bSecondaryGrip = bSecondaryGrip;
		params.bZeroVelocity = bZeroVelocity;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.DropOrHolster_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UGripMotionControllerComponent*              CallingHand                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UObject*                                     ObjectToGrip                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSecondaryGrip                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRPlayerCharacter::DropOrHolster_Native(class UGripMotionControllerComponent* CallingHand, class UObject* ObjectToGrip, bool bSecondaryGrip)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.DropOrHolster_Native");
		
		APRPlayerCharacter_DropOrHolster_Native_Params params {};
		params.CallingHand = CallingHand;
		params.ObjectToGrip = ObjectToGrip;
		params.bSecondaryGrip = bSecondaryGrip;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.DoesPlayerHolsterPreventInteraction
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Interactable                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRPlayerCharacter::DoesPlayerHolsterPreventInteraction(class AActor* Interactable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.DoesPlayerHolsterPreventInteraction");
		
		APRPlayerCharacter_DoesPlayerHolsterPreventInteraction_Params params {};
		params.Interactable = Interactable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.ClearClimbing_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bBecauseOfStepUp                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::ClearClimbing_Native(bool bBecauseOfStepUp)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.ClearClimbing_Native");
		
		APRPlayerCharacter_ClearClimbing_Native_Params params {};
		params.bBecauseOfStepUp = bBecauseOfStepUp;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.CheckTriggerOverlaps_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USphereComponent*                            GrabSphere                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              CallingHand                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRPlayerCharacter::CheckTriggerOverlaps_Native(class USphereComponent* GrabSphere, class UGripMotionControllerComponent* CallingHand)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.CheckTriggerOverlaps_Native");
		
		APRPlayerCharacter_CheckTriggerOverlaps_Native_Params params {};
		params.GrabSphere = GrabSphere;
		params.CallingHand = CallingHand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.CheckHolster_Native
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     Object                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bRemove                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsLeftHand                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bHolsterFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bHolsterOk                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UHolsterComponent*                           Holster                                                    (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::CheckHolster_Native(class UObject* Object, bool bRemove, bool bIsLeftHand, bool* bHolsterFound, bool* bHolsterOk, class UHolsterComponent** Holster)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.CheckHolster_Native");
		
		APRPlayerCharacter_CheckHolster_Native_Params params {};
		params.Object = Object;
		params.bRemove = bRemove;
		params.bIsLeftHand = bIsLeftHand;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bHolsterFound != nullptr)
			*bHolsterFound = params.bHolsterFound;
		if (bHolsterOk != nullptr)
			*bHolsterOk = params.bHolsterOk;
		if (Holster != nullptr)
			*Holster = params.Holster;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.CallNightGlow
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UObject*                                     Target                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bOn                                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::CallNightGlow(class UObject* Target, bool bOn)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.CallNightGlow");
		
		APRPlayerCharacter_CallNightGlow_Params params {};
		params.Target = Target;
		params.bOn = bOn;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.BindInteractable
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::BindInteractable(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.BindInteractable");
		
		APRPlayerCharacter_BindInteractable_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerCharacter.BeamPointerToggleNative
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bOnOff                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     TargetPoint                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsLeftHand                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bUIGrip                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRPlayerCharacter::BeamPointerToggleNative(bool bOnOff, const struct FVector& TargetPoint, bool bIsLeftHand, bool bUIGrip)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerCharacter.BeamPointerToggleNative");
		
		APRPlayerCharacter_BeamPointerToggleNative_Params params {};
		params.bOnOff = bOnOff;
		params.TargetPoint = TargetPoint;
		params.bIsLeftHand = bIsLeftHand;
		params.bUIGrip = bUIGrip;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRPlayerCharacter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRPlayerCharacter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRPlayerCharacter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerController.ReportReady
	 * 		Flags  -> ()
	 */
	void APRPlayerController::ReportReady()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerController.ReportReady");
		
		APRPlayerController_ReportReady_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerController.IsPossessingPlayer
	 * 		Flags  -> ()
	 */
	bool APRPlayerController::IsPossessingPlayer()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerController.IsPossessingPlayer");
		
		APRPlayerController_IsPossessingPlayer_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRPlayerController.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRPlayerController::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRPlayerController");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerControlsInterface.GrabRight
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bPressed                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerControlsInterface::GrabRight(bool bPressed)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerControlsInterface.GrabRight");
		
		UPRPlayerControlsInterface_GrabRight_Params params {};
		params.bPressed = bPressed;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerControlsInterface.GrabLeft
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bPressed                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerControlsInterface::GrabLeft(bool bPressed)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerControlsInterface.GrabLeft");
		
		UPRPlayerControlsInterface_GrabLeft_Params params {};
		params.bPressed = bPressed;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRPlayerControlsInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRPlayerControlsInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRPlayerControlsInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerGripSystemComponent.UnregisterForDistanceGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerGripSystemComponent::UnregisterForDistanceGrip(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerGripSystemComponent.UnregisterForDistanceGrip");
		
		UPRPlayerGripSystemComponent_UnregisterForDistanceGrip_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerGripSystemComponent.ToggleDebugDrawDistanceGrip
	 * 		Flags  -> ()
	 */
	void UPRPlayerGripSystemComponent::ToggleDebugDrawDistanceGrip()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerGripSystemComponent.ToggleDebugDrawDistanceGrip");
		
		UPRPlayerGripSystemComponent_ToggleDebugDrawDistanceGrip_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerGripSystemComponent.RegisterForDistanceGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerGripSystemComponent::RegisterForDistanceGrip(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerGripSystemComponent.RegisterForDistanceGrip");
		
		UPRPlayerGripSystemComponent_RegisterForDistanceGrip_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerGripSystemComponent.PerformOverlapGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               isLeftHand                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class AActor*>                              otherHandGrippedActors                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		class USphereComponent*                            gripSphere                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  HandWorldTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     handRootLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UGripMotionControllerComponent*              MotionController                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         compToGrip                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         triggerToGrip                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  triggerTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerGripSystemComponent::PerformOverlapGrip(bool isLeftHand, TArray<class AActor*> otherHandGrippedActors, class USphereComponent* gripSphere, const struct FTransform& HandWorldTransform, const struct FVector& handRootLocation, class UGripMotionControllerComponent* MotionController, class UPrimitiveComponent** compToGrip, class UPrimitiveComponent** triggerToGrip, struct FTransform* triggerTransform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerGripSystemComponent.PerformOverlapGrip");
		
		UPRPlayerGripSystemComponent_PerformOverlapGrip_Params params {};
		params.isLeftHand = isLeftHand;
		params.otherHandGrippedActors = otherHandGrippedActors;
		params.gripSphere = gripSphere;
		params.HandWorldTransform = HandWorldTransform;
		params.handRootLocation = handRootLocation;
		params.MotionController = MotionController;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (compToGrip != nullptr)
			*compToGrip = params.compToGrip;
		if (triggerToGrip != nullptr)
			*triggerToGrip = params.triggerToGrip;
		if (triggerTransform != nullptr)
			*triggerTransform = params.triggerTransform;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerGripSystemComponent.PerformDistanceGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               isLeftHand                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class AActor*>                              otherHandGrippedActors                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		class USphereComponent*                            gripSphere                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         compToGrip                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     compHitLoc                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     distanceGripPoint                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerGripSystemComponent::PerformDistanceGrip(bool isLeftHand, TArray<class AActor*> otherHandGrippedActors, class USphereComponent* gripSphere, class UPrimitiveComponent** compToGrip, struct FVector* compHitLoc, struct FVector* distanceGripPoint)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerGripSystemComponent.PerformDistanceGrip");
		
		UPRPlayerGripSystemComponent_PerformDistanceGrip_Params params {};
		params.isLeftHand = isLeftHand;
		params.otherHandGrippedActors = otherHandGrippedActors;
		params.gripSphere = gripSphere;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (compToGrip != nullptr)
			*compToGrip = params.compToGrip;
		if (compHitLoc != nullptr)
			*compHitLoc = params.compHitLoc;
		if (distanceGripPoint != nullptr)
			*distanceGripPoint = params.distanceGripPoint;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerGripSystemComponent.IsDebugDrawDistanceGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bDebugDrawing                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerGripSystemComponent::IsDebugDrawDistanceGrip(bool* bDebugDrawing)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerGripSystemComponent.IsDebugDrawDistanceGrip");
		
		UPRPlayerGripSystemComponent_IsDebugDrawDistanceGrip_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bDebugDrawing != nullptr)
			*bDebugDrawing = params.bDebugDrawing;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRPlayerGripSystemComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRPlayerGripSystemComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRPlayerGripSystemComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerVisibilityComponent.InitOnLevelStart
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPRPlayerVisibilityComponent::InitOnLevelStart(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerVisibilityComponent.InitOnLevelStart");
		
		UPRPlayerVisibilityComponent_InitOnLevelStart_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerVisibilityComponent.InitOnGameStart
	 * 		Flags  -> ()
	 */
	void UPRPlayerVisibilityComponent::InitOnGameStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerVisibilityComponent.InitOnGameStart");
		
		UPRPlayerVisibilityComponent_InitOnGameStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRPlayerVisibilityComponent.CleanupOnTransitionStart
	 * 		Flags  -> ()
	 */
	void UPRPlayerVisibilityComponent::CleanupOnTransitionStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRPlayerVisibilityComponent.CleanupOnTransitionStart");
		
		UPRPlayerVisibilityComponent_CleanupOnTransitionStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRPlayerVisibilityComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRPlayerVisibilityComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRPlayerVisibilityComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRPointOfInterest.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRPointOfInterest::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRPointOfInterest");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSkyBox.GetRadiusLocation
	 * 		Flags  -> ()
	 */
	struct FVector APRSkyBox::GetRadiusLocation()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSkyBox.GetRadiusLocation");
		
		APRSkyBox_GetRadiusLocation_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRSkyBox.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRSkyBox::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRSkyBox");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRSpiderNpcAnimInstance.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRSpiderNpcAnimInstance::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRSpiderNpcAnimInstance");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.UpdateVolume
	 * 		Flags  -> ()
	 */
	void APRSublevelStreamingVolume::UpdateVolume()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.UpdateVolume");
		
		APRSublevelStreamingVolume_UpdateVolume_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.Reset
	 * 		Flags  -> ()
	 */
	void APRSublevelStreamingVolume::Reset()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.Reset");
		
		APRSublevelStreamingVolume_Reset_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.OnTransitionStart
	 * 		Flags  -> ()
	 */
	void APRSublevelStreamingVolume::OnTransitionStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.OnTransitionStart");
		
		APRSublevelStreamingVolume_OnTransitionStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.OnTransitionEnd
	 * 		Flags  -> ()
	 */
	void APRSublevelStreamingVolume::OnTransitionEnd()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.OnTransitionEnd");
		
		APRSublevelStreamingVolume_OnTransitionEnd_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRSublevelStreamingVolume::OnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.OnLevelStarted");
		
		APRSublevelStreamingVolume_OnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.OnLevelPrepare
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRSublevelStreamingVolume::OnLevelPrepare(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.OnLevelPrepare");
		
		APRSublevelStreamingVolume_OnLevelPrepare_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.OnGameStartedPrivate
	 * 		Flags  -> ()
	 */
	void APRSublevelStreamingVolume::OnGameStartedPrivate()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.OnGameStartedPrivate");
		
		APRSublevelStreamingVolume_OnGameStartedPrivate_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.OnGameStarted
	 * 		Flags  -> ()
	 */
	void APRSublevelStreamingVolume::OnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.OnGameStarted");
		
		APRSublevelStreamingVolume_OnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.LoadSublevels
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               evented                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void APRSublevelStreamingVolume::LoadSublevels(bool evented)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.LoadSublevels");
		
		APRSublevelStreamingVolume_LoadSublevels_Params params {};
		params.evented = evented;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.IsLoaded
	 * 		Flags  -> ()
	 */
	bool APRSublevelStreamingVolume::IsLoaded()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.IsLoaded");
		
		APRSublevelStreamingVolume_IsLoaded_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.CheckSphere
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Center                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Radius                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Coefficient                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRSublevelStreamingVolume::CheckSphere(const struct FVector& Center, float Radius, float Coefficient)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.CheckSphere");
		
		APRSublevelStreamingVolume_CheckSphere_Params params {};
		params.Center = Center;
		params.Radius = Radius;
		params.Coefficient = Coefficient;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRSublevelStreamingVolume.CheckLocation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Coefficient                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool APRSublevelStreamingVolume::CheckLocation(const struct FVector& Location, float Coefficient)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRSublevelStreamingVolume.CheckLocation");
		
		APRSublevelStreamingVolume_CheckLocation_Params params {};
		params.Location = Location;
		params.Coefficient = Coefficient;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRSublevelStreamingVolume.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRSublevelStreamingVolume::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRSublevelStreamingVolume");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRTransitionHint.ShowTransitionHint
	 * 		Flags  -> ()
	 */
	void APRTransitionHint::ShowTransitionHint()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRTransitionHint.ShowTransitionHint");
		
		APRTransitionHint_ShowTransitionHint_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PRTransitionHint.HideTransitionHint
	 * 		Flags  -> ()
	 */
	void APRTransitionHint::HideTransitionHint()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PRTransitionHint.HideTransitionHint");
		
		APRTransitionHint_HideTransitionHint_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction APRTransitionHint.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* APRTransitionHint::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRTransitionHint");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPRVRGripSMComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPRVRGripSMComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PRVRGripSMComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusAudioBoxComponent.UpdateVolumeSettings
	 * 		Flags  -> ()
	 */
	void URadiusAudioBoxComponent::UpdateVolumeSettings()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusAudioBoxComponent.UpdateVolumeSettings");
		
		URadiusAudioBoxComponent_UpdateVolumeSettings_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusAudioBoxComponent.SetPriority
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              NewPriority                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusAudioBoxComponent::SetPriority(float NewPriority)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusAudioBoxComponent.SetPriority");
		
		URadiusAudioBoxComponent_SetPriority_Params params {};
		params.NewPriority = NewPriority;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusAudioBoxComponent.SetEnabled
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bNewEnabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusAudioBoxComponent::SetEnabled(bool bNewEnabled)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusAudioBoxComponent.SetEnabled");
		
		URadiusAudioBoxComponent_SetEnabled_Params params {};
		params.bNewEnabled = bNewEnabled;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusAudioBoxComponent.OnOwnerDestroyed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      DestoryedObject                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusAudioBoxComponent::OnOwnerDestroyed(class AActor* DestoryedObject)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusAudioBoxComponent.OnOwnerDestroyed");
		
		URadiusAudioBoxComponent_OnOwnerDestroyed_Params params {};
		params.DestoryedObject = DestoryedObject;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusAudioBoxComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusAudioBoxComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusAudioBoxComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusAutomationBase.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusAutomationBase::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusAutomationBase");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusAutomationComponent.MainMenuReadyCallback
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusAutomationComponent::MainMenuReadyCallback(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusAutomationComponent.MainMenuReadyCallback");
		
		URadiusAutomationComponent_MainMenuReadyCallback_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusAutomationComponent.GameStartedCallback
	 * 		Flags  -> ()
	 */
	void URadiusAutomationComponent::GameStartedCallback()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusAutomationComponent.GameStartedCallback");
		
		URadiusAutomationComponent_GameStartedCallback_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusAutomationComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusAutomationComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusAutomationComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusItemActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusItemActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusItemActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBaseItem.Setup
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FBaseItemSpawnInfo                          BaseItemSpawnInfo                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void ARadiusBaseItem::Setup(const struct FBaseItemSpawnInfo& BaseItemSpawnInfo)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBaseItem.Setup");
		
		ARadiusBaseItem_Setup_Params params {};
		params.BaseItemSpawnInfo = BaseItemSpawnInfo;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBaseItem.IsInitInventoryItem
	 * 		Flags  -> ()
	 */
	bool ARadiusBaseItem::IsInitInventoryItem()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBaseItem.IsInitInventoryItem");
		
		ARadiusBaseItem_IsInitInventoryItem_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBaseItem.InitInventoryItem
	 * 		Flags  -> ()
	 */
	class UInventoryItem* ARadiusBaseItem::InitInventoryItem()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBaseItem.InitInventoryItem");
		
		ARadiusBaseItem_InitInventoryItem_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusBaseItem.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusBaseItem::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusBaseItem");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletComponent.ProcessHit
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FHitResult                                  HitResult                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Velocity                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusBulletComponent::ProcessHit(const struct FHitResult& HitResult, const struct FVector& Velocity)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletComponent.ProcessHit");
		
		URadiusBulletComponent_ProcessHit_Params params {};
		params.HitResult = HitResult;
		params.Velocity = Velocity;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletComponent.Initialize
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FAmmoInfo                                   AmmoInfo                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		float                                              MuzzleVelocity                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              BaseDamage                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusBulletComponent::Initialize(const struct FAmmoInfo& AmmoInfo, float MuzzleVelocity, float BaseDamage)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletComponent.Initialize");
		
		URadiusBulletComponent_Initialize_Params params {};
		params.AmmoInfo = AmmoInfo;
		params.MuzzleVelocity = MuzzleVelocity;
		params.BaseDamage = BaseDamage;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusBulletComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusBulletComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusBulletComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletImpulseComponent.Suspend
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               IsSuspend                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusBulletImpulseComponent::Suspend(bool IsSuspend)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletImpulseComponent.Suspend");
		
		URadiusBulletImpulseComponent_Suspend_Params params {};
		params.IsSuspend = IsSuspend;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletImpulseComponent.Stop
	 * 		Flags  -> ()
	 */
	void URadiusBulletImpulseComponent::Stop()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletImpulseComponent.Stop");
		
		URadiusBulletImpulseComponent_Stop_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletImpulseComponent.Start
	 * 		Flags  -> ()
	 */
	void URadiusBulletImpulseComponent::Start()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletImpulseComponent.Start");
		
		URadiusBulletImpulseComponent_Start_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletImpulseComponent.Ricochet
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Force                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsPenetration                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusBulletImpulseComponent::Ricochet(const struct FVector& Location, const struct FVector& Force, bool IsPenetration)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletImpulseComponent.Ricochet");
		
		URadiusBulletImpulseComponent_Ricochet_Params params {};
		params.Location = Location;
		params.Force = Force;
		params.IsPenetration = IsPenetration;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletImpulseComponent.Initialize
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPrimitiveComponent*                         TargetComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Mass                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              InitialVelocity                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UCurveFloat*                                 SpeedCurve                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusBulletImpulseComponent::Initialize(class UPrimitiveComponent* TargetComponent, float Mass, float InitialVelocity, class UCurveFloat* SpeedCurve)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletImpulseComponent.Initialize");
		
		URadiusBulletImpulseComponent_Initialize_Params params {};
		params.TargetComponent = TargetComponent;
		params.Mass = Mass;
		params.InitialVelocity = InitialVelocity;
		params.SpeedCurve = SpeedCurve;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusBulletImpulseComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusBulletImpulseComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusBulletImpulseComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusProjectile.Dispose
	 * 		Flags  -> ()
	 */
	void ARadiusProjectile::Dispose()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusProjectile.Dispose");
		
		ARadiusProjectile_Dispose_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusProjectile.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusProjectile::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusProjectile");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletProjectile.SphereColliderHit
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UPrimitiveComponent*                         HitComponent                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      OtherActor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UPrimitiveComponent*                         OtherComponent                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     NormalImpulse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FHitResult                                  Hit                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	void ARadiusBulletProjectile::SphereColliderHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletProjectile.SphereColliderHit");
		
		ARadiusBulletProjectile_SphereColliderHit_Params params {};
		params.HitComponent = HitComponent;
		params.OtherActor = OtherActor;
		params.OtherComponent = OtherComponent;
		params.NormalImpulse = NormalImpulse;
		params.Hit = Hit;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletProjectile.OnSpawnImpact
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FHitResult                                  Hit                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 * 		float                                              Scale                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ARadiusBulletProjectile::OnSpawnImpact(const struct FHitResult& Hit, float Scale)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletProjectile.OnSpawnImpact");
		
		ARadiusBulletProjectile_OnSpawnImpact_Params params {};
		params.Hit = Hit;
		params.Scale = Scale;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletProjectile.BulletComponentRicochet
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     Location                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Force                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               IsPenetration                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ARadiusBulletProjectile::BulletComponentRicochet(const struct FVector& Location, const struct FVector& Force, bool IsPenetration)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletProjectile.BulletComponentRicochet");
		
		ARadiusBulletProjectile_BulletComponentRicochet_Params params {};
		params.Location = Location;
		params.Force = Force;
		params.IsPenetration = IsPenetration;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletProjectile.BulletComponentImpact
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FHitResult                                  Hit                                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	void ARadiusBulletProjectile::BulletComponentImpact(const struct FHitResult& Hit)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletProjectile.BulletComponentImpact");
		
		ARadiusBulletProjectile_BulletComponentImpact_Params params {};
		params.Hit = Hit;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusBulletProjectile.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusBulletProjectile::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusBulletProjectile");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletTracerComponent.Suspend
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               IsSuspend                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusBulletTracerComponent::Suspend(bool IsSuspend)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletTracerComponent.Suspend");
		
		URadiusBulletTracerComponent_Suspend_Params params {};
		params.IsSuspend = IsSuspend;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletTracerComponent.Stop
	 * 		Flags  -> ()
	 */
	void URadiusBulletTracerComponent::Stop()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletTracerComponent.Stop");
		
		URadiusBulletTracerComponent_Stop_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletTracerComponent.Start
	 * 		Flags  -> ()
	 */
	void URadiusBulletTracerComponent::Start()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletTracerComponent.Start");
		
		URadiusBulletTracerComponent_Start_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletTracerComponent.Initialize
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               ForceTracer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              MinSpeed                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              MaxSpeed                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                AmmoTypeID                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               DebugMode                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusBulletTracerComponent::Initialize(bool ForceTracer, float MinSpeed, float MaxSpeed, const struct FGameplayTag& AmmoTypeID, bool DebugMode)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletTracerComponent.Initialize");
		
		URadiusBulletTracerComponent_Initialize_Params params {};
		params.ForceTracer = ForceTracer;
		params.MinSpeed = MinSpeed;
		params.MaxSpeed = MaxSpeed;
		params.AmmoTypeID = AmmoTypeID;
		params.DebugMode = DebugMode;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletTracerComponent.DelayedStart
	 * 		Flags  -> ()
	 */
	void URadiusBulletTracerComponent::DelayedStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletTracerComponent.DelayedStart");
		
		URadiusBulletTracerComponent_DelayedStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusBulletTracerComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusBulletTracerComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusBulletTracerComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusEmitter.GetParticalSystemRef
	 * 		Flags  -> ()
	 */
	class UParticleSystemComponent* ARadiusEmitter::GetParticalSystemRef()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusEmitter.GetParticalSystemRef");
		
		ARadiusEmitter_GetParticalSystemRef_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusEmitter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusEmitter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusEmitter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusExplosionActor.SetTriggerMaxRange
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              MaxRange                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ARadiusExplosionActor::SetTriggerMaxRange(float MaxRange)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusExplosionActor.SetTriggerMaxRange");
		
		ARadiusExplosionActor_SetTriggerMaxRange_Params params {};
		params.MaxRange = MaxRange;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusExplosionActor.GetExplosionInfo
	 * 		Flags  -> ()
	 */
	struct FExplosionInfo ARadiusExplosionActor::GetExplosionInfo()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusExplosionActor.GetExplosionInfo");
		
		ARadiusExplosionActor_GetExplosionInfo_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusExplosionActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusExplosionActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusExplosionActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusFirearmShellActor.Setup
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRadiusFirearmShellInfo                     Info                                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void ARadiusFirearmShellActor::Setup(const struct FRadiusFirearmShellInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusFirearmShellActor.Setup");
		
		ARadiusFirearmShellActor_Setup_Params params {};
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusFirearmShellActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusFirearmShellActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusFirearmShellActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusGameData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusGameData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusGameData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameInstanceInterface.StartNewGame
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            ProfileNumber                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSkipTutorial                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bIronman                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FRadiusGameDifficulty                       GameDifficulty                                             (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bFromMainMenu                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusGameInstanceInterface::StartNewGame(int32_t ProfileNumber, bool bSkipTutorial, bool bIronman, const struct FRadiusGameDifficulty& GameDifficulty, bool bFromMainMenu)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameInstanceInterface.StartNewGame");
		
		URadiusGameInstanceInterface_StartNewGame_Params params {};
		params.ProfileNumber = ProfileNumber;
		params.bSkipTutorial = bSkipTutorial;
		params.bIronman = bIronman;
		params.GameDifficulty = GameDifficulty;
		params.bFromMainMenu = bFromMainMenu;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameInstanceInterface.LoadGame
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            SlotNr                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            SaveNr                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusGameInstanceInterface::LoadGame(int32_t SlotNr, int32_t SaveNr)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameInstanceInterface.LoadGame");
		
		URadiusGameInstanceInterface_LoadGame_Params params {};
		params.SlotNr = SlotNr;
		params.SaveNr = SaveNr;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameInstanceInterface.ExitGame
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bMenu                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSave                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusGameInstanceInterface::ExitGame(bool bMenu, bool bSave)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameInstanceInterface.ExitGame");
		
		URadiusGameInstanceInterface_ExitGame_Params params {};
		params.bMenu = bMenu;
		params.bSave = bSave;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameInstanceInterface.ContinueLastGameInSlot
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            SlotNr                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusGameInstanceInterface::ContinueLastGameInSlot(int32_t SlotNr)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameInstanceInterface.ContinueLastGameInSlot");
		
		URadiusGameInstanceInterface_ContinueLastGameInSlot_Params params {};
		params.SlotNr = SlotNr;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameInstanceInterface.ContinueLastGame
	 * 		Flags  -> ()
	 */
	void URadiusGameInstanceInterface::ContinueLastGame()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameInstanceInterface.ContinueLastGame");
		
		URadiusGameInstanceInterface_ContinueLastGame_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusGameInstanceInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusGameInstanceInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusGameInstanceInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameStatistics.GetStatisticsValueString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ERadiusCommonStatisticsType                        Type                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString URadiusGameStatistics::GetStatisticsValueString(ERadiusCommonStatisticsType Type)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameStatistics.GetStatisticsValueString");
		
		URadiusGameStatistics_GetStatisticsValueString_Params params {};
		params.Type = Type;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameStatistics.GetStatisticsTitle
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ERadiusCommonStatisticsType                        Type                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FText URadiusGameStatistics::GetStatisticsTitle(ERadiusCommonStatisticsType Type)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameStatistics.GetStatisticsTitle");
		
		URadiusGameStatistics_GetStatisticsTitle_Params params {};
		params.Type = Type;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameStatistics.GetRadiusGameStatistics
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class URadiusGameStatistics*                       RadiusGameStatistics                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusGameStatistics::GetRadiusGameStatistics(class URadiusGameStatistics** RadiusGameStatistics)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameStatistics.GetRadiusGameStatistics");
		
		URadiusGameStatistics_GetRadiusGameStatistics_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (RadiusGameStatistics != nullptr)
			*RadiusGameStatistics = params.RadiusGameStatistics;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameStatistics.GetPlayerKills
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TMap<struct FGameplayTag, int32_t>                 Enemies                                                    (Parm, OutParm, NativeAccessSpecifierPublic)
	 * 		TMap<struct FGameplayTag, int32_t>                 Weapon                                                     (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void URadiusGameStatistics::GetPlayerKills(TMap<struct FGameplayTag, int32_t>* Enemies, TMap<struct FGameplayTag, int32_t>* Weapon)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameStatistics.GetPlayerKills");
		
		URadiusGameStatistics_GetPlayerKills_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Enemies != nullptr)
			*Enemies = params.Enemies;
		if (Weapon != nullptr)
			*Weapon = params.Weapon;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusGameStatistics.GetPlayerDeaths
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TMap<struct FGameplayTag, int32_t>                 Deaths                                                     (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void URadiusGameStatistics::GetPlayerDeaths(TMap<struct FGameplayTag, int32_t>* Deaths)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusGameStatistics.GetPlayerDeaths");
		
		URadiusGameStatistics_GetPlayerDeaths_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Deaths != nullptr)
			*Deaths = params.Deaths;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusGameStatistics.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusGameStatistics::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusGameStatistics");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusImpactActor.Setup
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRadiusImpactInfo                           Info                                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	void ARadiusImpactActor::Setup(const struct FRadiusImpactInfo& Info)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusImpactActor.Setup");
		
		ARadiusImpactActor_Setup_Params params {};
		params.Info = Info;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusImpactActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusImpactActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusImpactActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusNiagaraEmitter.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusNiagaraEmitter::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusNiagaraEmitter");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusPlayerMovementComponent.StopMovement
	 * 		Flags  -> ()
	 */
	void URadiusPlayerMovementComponent::StopMovement()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusPlayerMovementComponent.StopMovement");
		
		URadiusPlayerMovementComponent_StopMovement_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusPlayerMovementComponent.ProcessMovementTeleport
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              DeltaSeconds                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusPlayerMovementComponent::ProcessMovementTeleport(float DeltaSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusPlayerMovementComponent.ProcessMovementTeleport");
		
		URadiusPlayerMovementComponent_ProcessMovementTeleport_Params params {};
		params.DeltaSeconds = DeltaSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusPlayerMovementComponent.ProcessMovementNormal
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              DeltaSeconds                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusPlayerMovementComponent::ProcessMovementNormal(float DeltaSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusPlayerMovementComponent.ProcessMovementNormal");
		
		URadiusPlayerMovementComponent_ProcessMovementNormal_Params params {};
		params.DeltaSeconds = DeltaSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusPlayerMovementComponent.ProcessMovement
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              DeltaSeconds                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusPlayerMovementComponent::ProcessMovement(float DeltaSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusPlayerMovementComponent.ProcessMovement");
		
		URadiusPlayerMovementComponent_ProcessMovement_Params params {};
		params.DeltaSeconds = DeltaSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusPlayerMovementComponent.PreparePointsToTeleport
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     From                                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     To                                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	TArray<struct FTeleportPointInfo> URadiusPlayerMovementComponent::PreparePointsToTeleport(const struct FVector& From, const struct FVector& To)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusPlayerMovementComponent.PreparePointsToTeleport");
		
		URadiusPlayerMovementComponent_PreparePointsToTeleport_Params params {};
		params.From = From;
		params.To = To;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusPlayerMovementComponent.IsTeleporting
	 * 		Flags  -> ()
	 */
	bool URadiusPlayerMovementComponent::IsTeleporting()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusPlayerMovementComponent.IsTeleporting");
		
		URadiusPlayerMovementComponent_IsTeleporting_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusPlayerMovementComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusPlayerMovementComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusPlayerMovementComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusPooledActor.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusPooledActor::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusPooledActor");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusProfilingCamera.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusProfilingCamera::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusProfilingCamera");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusProjectileInfo.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusProjectileInfo::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusProjectileInfo");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusFirearmProjectileInfo.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusFirearmProjectileInfo::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusFirearmProjectileInfo");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusBulletProjectileInfo.CreateInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FAmmoInfo                                   AmmoInfo                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		float                                              Velocity                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              BaseDamage                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               ForceTracer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class URadiusBulletProjectileInfo* URadiusBulletProjectileInfo::CreateInfo(const struct FAmmoInfo& AmmoInfo, float Velocity, float BaseDamage, bool ForceTracer)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusBulletProjectileInfo.CreateInfo");
		
		URadiusBulletProjectileInfo_CreateInfo_Params params {};
		params.AmmoInfo = AmmoInfo;
		params.Velocity = Velocity;
		params.BaseDamage = BaseDamage;
		params.ForceTracer = ForceTracer;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusBulletProjectileInfo.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusBulletProjectileInfo::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusBulletProjectileInfo");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusShrapnelProjectileInfo.CreateInfo
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FAmmoInfo                                   AmmoInfo                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		float                                              BaseDamage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AccuracyInternal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              AccuracyMultiplier                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Offset                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              TraceDistance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class URadiusShrapnelProjectileInfo* URadiusShrapnelProjectileInfo::CreateInfo(const struct FAmmoInfo& AmmoInfo, float BaseDamage, float AccuracyInternal, float AccuracyMultiplier, float Offset, float TraceDistance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusShrapnelProjectileInfo.CreateInfo");
		
		URadiusShrapnelProjectileInfo_CreateInfo_Params params {};
		params.AmmoInfo = AmmoInfo;
		params.BaseDamage = BaseDamage;
		params.AccuracyInternal = AccuracyInternal;
		params.AccuracyMultiplier = AccuracyMultiplier;
		params.Offset = Offset;
		params.TraceDistance = TraceDistance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusShrapnelProjectileInfo.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusShrapnelProjectileInfo::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusShrapnelProjectileInfo");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusShrapnelComponent.Initialize
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FAmmoInfo                                   AmmoInfo                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		float                                              Damage                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Accuracy                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Offset                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              TraceDistance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void URadiusShrapnelComponent::Initialize(const struct FAmmoInfo& AmmoInfo, float Damage, float Accuracy, const struct FVector& Offset, float TraceDistance)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusShrapnelComponent.Initialize");
		
		URadiusShrapnelComponent_Initialize_Params params {};
		params.AmmoInfo = AmmoInfo;
		params.Damage = Damage;
		params.Accuracy = Accuracy;
		params.Offset = Offset;
		params.TraceDistance = TraceDistance;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusShrapnelComponent.Execute
	 * 		Flags  -> ()
	 */
	void URadiusShrapnelComponent::Execute()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusShrapnelComponent.Execute");
		
		URadiusShrapnelComponent_Execute_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URadiusShrapnelComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URadiusShrapnelComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusShrapnelComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusShrapnelProjectile.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusShrapnelProjectile::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusShrapnelProjectile");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RadiusTeleportArcController.TickArc
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              DeltaSeconds                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ARadiusTeleportArcController::TickArc(float DeltaSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RadiusTeleportArcController.TickArc");
		
		ARadiusTeleportArcController_TickArc_Params params {};
		params.DeltaSeconds = DeltaSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ARadiusTeleportArcController.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ARadiusTeleportArcController::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RadiusTeleportArcController");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URelevanceActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URelevanceActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RelevanceActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UAlterTickActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UAlterTickActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.AlterTickActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UDeactivateRootActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UDeactivateRootActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.DeactivateRootActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UStopParticleSystemsActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UStopParticleSystemsActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.StopParticleSystemsActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UStopRenderingActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UStopRenderingActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.StopRenderingActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UStopColliderActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UStopColliderActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.StopColliderActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UDiscoverAnomalyActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UDiscoverAnomalyActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.DiscoverAnomalyActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UEnemyDistanceActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UEnemyDistanceActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.EnemyDistanceActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UReducedTickIntervalActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UReducedTickIntervalActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ReducedTickIntervalActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UDiscoverEnemyActionDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UDiscoverEnemyActionDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.DiscoverEnemyActionDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPlayFootstepsDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPlayFootstepsDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PlayFootstepsDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayFootstepHelper.OnMoveStart
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FAIRequestID                                RequestID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPathFollowingStatus                               MovementStatus                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayFootstepHelper::OnMoveStart(const struct FAIRequestID& RequestID, EPathFollowingStatus MovementStatus)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayFootstepHelper.OnMoveStart");
		
		UPlayFootstepHelper_OnMoveStart_Params params {};
		params.RequestID = RequestID;
		params.MovementStatus = MovementStatus;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.PlayFootstepHelper.OnMoveEnd
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FAIRequestID                                RequestID                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPathFollowingResult                               MovementResult                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UPlayFootstepHelper::OnMoveEnd(const struct FAIRequestID& RequestID, EPathFollowingResult MovementResult)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.PlayFootstepHelper.OnMoveEnd");
		
		UPlayFootstepHelper_OnMoveEnd_Params params {};
		params.RequestID = RequestID;
		params.MovementResult = MovementResult;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPlayFootstepHelper.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPlayFootstepHelper::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PlayFootstepHelper");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UViewportNotifierDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UViewportNotifierDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ViewportNotifierDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URelevanceCriteriaDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URelevanceCriteriaDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RelevanceCriteriaDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UValidActorCriteriaDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UValidActorCriteriaDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ValidActorCriteriaDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPlayerProximityCriteriaDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPlayerProximityCriteriaDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PlayerProximityCriteriaDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UPlayerViewportCriteriaDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UPlayerViewportCriteriaDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.PlayerViewportCriteriaDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UEnemyDiscoverCriteriaDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UEnemyDiscoverCriteriaDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.EnemyDiscoverCriteriaDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UAnomalySpawnCriteriaDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UAnomalySpawnCriteriaDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.AnomalySpawnCriteriaDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UAnomalyDiscoverCriteriaDescription.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UAnomalyDiscoverCriteriaDescription::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.AnomalyDiscoverCriteriaDescription");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.RelevanceManager.OnLevelUnloaded
	 * 		Flags  -> ()
	 */
	void URelevanceManager::OnLevelUnloaded()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.RelevanceManager.OnLevelUnloaded");
		
		URelevanceManager_OnLevelUnloaded_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction URelevanceManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* URelevanceManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.RelevanceManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ResizableDecalComponent.SetDecalSize
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FVector                                     newSize                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UResizableDecalComponent::SetDecalSize(const struct FVector& newSize)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ResizableDecalComponent.SetDecalSize");
		
		UResizableDecalComponent_SetDecalSize_Params params {};
		params.newSize = newSize;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UResizableDecalComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UResizableDecalComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ResizableDecalComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.TurnType
	 * 		Flags  -> ()
	 */
	int32_t USettingsManager::TurnType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.TurnType");
		
		USettingsManager_TurnType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetVolumeSounds
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetVolumeSounds(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetVolumeSounds");
		
		USettingsManager_SetVolumeSounds_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetVolumeMusic
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetVolumeMusic(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetVolumeMusic");
		
		USettingsManager_SetVolumeMusic_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetVolumeMaster
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetVolumeMaster(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetVolumeMaster");
		
		USettingsManager_SetVolumeMaster_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetVolumeAmbient
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetVolumeAmbient(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetVolumeAmbient");
		
		USettingsManager_SetVolumeAmbient_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetVirtualStock
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetVirtualStock(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetVirtualStock");
		
		USettingsManager_SetVirtualStock_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetVignetteShown
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetVignetteShown(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetVignetteShown");
		
		USettingsManager_SetVignetteShown_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetVignetteRunShown
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetVignetteRunShown(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetVignetteRunShown");
		
		USettingsManager_SetVignetteRunShown_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetVestShift
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetVestShift(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetVestShift");
		
		USettingsManager_SetVestShift_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetUpscaleSharpen
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetUpscaleSharpen(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetUpscaleSharpen");
		
		USettingsManager_SetUpscaleSharpen_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetUpscaleMethod
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetUpscaleMethod(int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetUpscaleMethod");
		
		USettingsManager_SetUpscaleMethod_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetUpdateNoticeShown
	 * 		Flags  -> ()
	 */
	void USettingsManager::SetUpdateNoticeShown()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetUpdateNoticeShown");
		
		USettingsManager_SetUpdateNoticeShown_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetTurnType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetTurnType(int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetTurnType");
		
		USettingsManager_SetTurnType_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetTurnSpeed
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetTurnSpeed(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetTurnSpeed");
		
		USettingsManager_SetTurnSpeed_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SettingsValueToString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		ESettingsValue                                     Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString USettingsManager::SettingsValueToString(ESettingsValue Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SettingsValueToString");
		
		USettingsManager_SettingsValueToString_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetTeleportMovement
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetTeleportMovement(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetTeleportMovement");
		
		USettingsManager_SetTeleportMovement_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetShowSubtitles
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetShowSubtitles(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetShowSubtitles");
		
		USettingsManager_SetShowSubtitles_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetShowBody
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetShowBody(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetShowBody");
		
		USettingsManager_SetShowBody_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetSeatedMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetSeatedMode(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetSeatedMode");
		
		USettingsManager_SetSeatedMode_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetPlayerHeight
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetPlayerHeight(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetPlayerHeight");
		
		USettingsManager_SetPlayerHeight_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetNeckHeight
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetNeckHeight(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetNeckHeight");
		
		USettingsManager_SetNeckHeight_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetMovementDirectionType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetMovementDirectionType(int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetMovementDirectionType");
		
		USettingsManager_SetMovementDirectionType_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetMirrorHolsters
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetMirrorHolsters(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetMirrorHolsters");
		
		USettingsManager_SetMirrorHolsters_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetLeftHanded
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetLeftHanded(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetLeftHanded");
		
		USettingsManager_SetLeftHanded_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetImperialUnits
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetImperialUnits(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetImperialUnits");
		
		USettingsManager_SetImperialUnits_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetHoldGrip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetHoldGrip(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetHoldGrip");
		
		USettingsManager_SetHoldGrip_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetHmdDeviceType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Value                                                      (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetHmdDeviceType(const class FString& Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetHmdDeviceType");
		
		USettingsManager_SetHmdDeviceType_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetGraphicsSetting
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EGraphicsSettingsType                              Type                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		ESettingsValue                                     Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetGraphicsSetting(EGraphicsSettingsType Type, ESettingsValue Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetGraphicsSetting");
		
		USettingsManager_SetGraphicsSetting_Params params {};
		params.Type = Type;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetGraphicsQualityIndex
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetGraphicsQualityIndex(int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetGraphicsQualityIndex");
		
		USettingsManager_SetGraphicsQualityIndex_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetGrabWithTrigger
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetGrabWithTrigger(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetGrabWithTrigger");
		
		USettingsManager_SetGrabWithTrigger_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetGPUQualityIndex
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetGPUQualityIndex(int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetGPUQualityIndex");
		
		USettingsManager_SetGPUQualityIndex_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetFSRMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetFSRMode(int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetFSRMode");
		
		USettingsManager_SetFSRMode_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetFirstLaunch
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bValue                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetFirstLaunch(bool bValue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetFirstLaunch");
		
		USettingsManager_SetFirstLaunch_Params params {};
		params.bValue = bValue;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetDLSSMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetDLSSMode(int32_t Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetDLSSMode");
		
		USettingsManager_SetDLSSMode_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetControllerType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Value                                                      (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetControllerType(const class FString& Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetControllerType");
		
		USettingsManager_SetControllerType_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetControllerShift
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRControllerType                                  Controller                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FVector                                     Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetControllerShift(EPRControllerType Controller, const struct FVector& Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetControllerShift");
		
		USettingsManager_SetControllerShift_Params params {};
		params.Controller = Controller;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetControllerRotation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRControllerType                                  Controller                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FRotator                                    Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetControllerRotation(EPRControllerType Controller, const struct FRotator& Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetControllerRotation");
		
		USettingsManager_SetControllerRotation_Params params {};
		params.Controller = Controller;
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetBrightnessAdjustment
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetBrightnessAdjustment(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetBrightnessAdjustment");
		
		USettingsManager_SetBrightnessAdjustment_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetArmLength
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetArmLength(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetArmLength");
		
		USettingsManager_SetArmLength_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.SetAimSmoothingIntensity
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::SetAimSmoothingIntensity(float Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.SetAimSmoothingIntensity");
		
		USettingsManager_SetAimSmoothingIntensity_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.RestoreDefaultControllerRotation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRControllerType                                  Controller                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::RestoreDefaultControllerRotation(EPRControllerType Controller)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.RestoreDefaultControllerRotation");
		
		USettingsManager_RestoreDefaultControllerRotation_Params params {};
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.MovementDirectionType
	 * 		Flags  -> ()
	 */
	int32_t USettingsManager::MovementDirectionType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.MovementDirectionType");
		
		USettingsManager_MovementDirectionType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsVirtualStock
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsVirtualStock()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsVirtualStock");
		
		USettingsManager_IsVirtualStock_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsVignetteShown
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsVignetteShown()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsVignetteShown");
		
		USettingsManager_IsVignetteShown_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsVignetteRunShown
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsVignetteRunShown()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsVignetteRunShown");
		
		USettingsManager_IsVignetteRunShown_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsTeleportMovement
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsTeleportMovement()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsTeleportMovement");
		
		USettingsManager_IsTeleportMovement_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsShowUpdateNotice
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsShowUpdateNotice()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsShowUpdateNotice");
		
		USettingsManager_IsShowUpdateNotice_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsShowSubtitles
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsShowSubtitles()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsShowSubtitles");
		
		USettingsManager_IsShowSubtitles_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsShowBody
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsShowBody()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsShowBody");
		
		USettingsManager_IsShowBody_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsSeatedMode
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsSeatedMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsSeatedMode");
		
		USettingsManager_IsSeatedMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsMirrorHolsters
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsMirrorHolsters()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsMirrorHolsters");
		
		USettingsManager_IsMirrorHolsters_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsLeftHanded
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsLeftHanded()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsLeftHanded");
		
		USettingsManager_IsLeftHanded_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsImperialUnits
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsImperialUnits()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsImperialUnits");
		
		USettingsManager_IsImperialUnits_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsHoldGrip
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsHoldGrip()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsHoldGrip");
		
		USettingsManager_IsHoldGrip_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsGrabWithTrigger
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsGrabWithTrigger()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsGrabWithTrigger");
		
		USettingsManager_IsGrabWithTrigger_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsFirstLaunch
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsFirstLaunch()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsFirstLaunch");
		
		USettingsManager_IsFirstLaunch_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IsAchievementsDisabled
	 * 		Flags  -> ()
	 */
	bool USettingsManager::IsAchievementsDisabled()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IsAchievementsDisabled");
		
		USettingsManager_IsAchievementsDisabled_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.IncrementGraphicsQuality
	 * 		Flags  -> ()
	 */
	int32_t USettingsManager::IncrementGraphicsQuality()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.IncrementGraphicsQuality");
		
		USettingsManager_IncrementGraphicsQuality_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GraphicsSettingsTypeToString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EGraphicsSettingsType                              Value                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	class FString USettingsManager::GraphicsSettingsTypeToString(EGraphicsSettingsType Value)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GraphicsSettingsTypeToString");
		
		USettingsManager_GraphicsSettingsTypeToString_Params params {};
		params.Value = Value;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetVolumeSounds
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetVolumeSounds()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetVolumeSounds");
		
		USettingsManager_GetVolumeSounds_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetVolumeMusic
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetVolumeMusic()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetVolumeMusic");
		
		USettingsManager_GetVolumeMusic_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetVolumeMaster
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetVolumeMaster()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetVolumeMaster");
		
		USettingsManager_GetVolumeMaster_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetVolumeAmbient
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetVolumeAmbient()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetVolumeAmbient");
		
		USettingsManager_GetVolumeAmbient_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetVestShift
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetVestShift()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetVestShift");
		
		USettingsManager_GetVestShift_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetUpscaleSharpen
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetUpscaleSharpen()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetUpscaleSharpen");
		
		USettingsManager_GetUpscaleSharpen_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetUpscaleMethod
	 * 		Flags  -> ()
	 */
	int32_t USettingsManager::GetUpscaleMethod()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetUpscaleMethod");
		
		USettingsManager_GetUpscaleMethod_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetTurnSpeed
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetTurnSpeed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetTurnSpeed");
		
		USettingsManager_GetTurnSpeed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetTeleportArcRotationForSecondaryGrip
	 * 		Flags  -> ()
	 */
	struct FVector USettingsManager::GetTeleportArcRotationForSecondaryGrip()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetTeleportArcRotationForSecondaryGrip");
		
		USettingsManager_GetTeleportArcRotationForSecondaryGrip_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetSettingsManager
	 * 		Flags  -> ()
	 */
	class USettingsManager* USettingsManager::GetSettingsManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetSettingsManager");
		
		USettingsManager_GetSettingsManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetScreenPercentages
	 * 		Flags  -> ()
	 */
	TArray<int32_t> USettingsManager::GetScreenPercentages()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetScreenPercentages");
		
		USettingsManager_GetScreenPercentages_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetScreenPercentage
	 * 		Flags  -> ()
	 */
	int32_t USettingsManager::GetScreenPercentage()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetScreenPercentage");
		
		USettingsManager_GetScreenPercentage_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetPlayerHeight
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetPlayerHeight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetPlayerHeight");
		
		USettingsManager_GetPlayerHeight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetPixelDensity
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetPixelDensity()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetPixelDensity");
		
		USettingsManager_GetPixelDensity_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetNeckHeight
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetNeckHeight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetNeckHeight");
		
		USettingsManager_GetNeckHeight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetHMDDeviceType
	 * 		Flags  -> ()
	 */
	class FString USettingsManager::GetHMDDeviceType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetHMDDeviceType");
		
		USettingsManager_GetHMDDeviceType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetGraphicsSetting
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EGraphicsSettingsType                              Type                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	ESettingsValue USettingsManager::GetGraphicsSetting(EGraphicsSettingsType Type)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetGraphicsSetting");
		
		USettingsManager_GetGraphicsSetting_Params params {};
		params.Type = Type;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetGraphicsQualityIndex
	 * 		Flags  -> ()
	 */
	int32_t USettingsManager::GetGraphicsQualityIndex()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetGraphicsQualityIndex");
		
		USettingsManager_GetGraphicsQualityIndex_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetGPUQualityIndex
	 * 		Flags  -> ()
	 */
	int32_t USettingsManager::GetGPUQualityIndex()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetGPUQualityIndex");
		
		USettingsManager_GetGPUQualityIndex_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetFSRMode
	 * 		Flags  -> ()
	 */
	int32_t USettingsManager::GetFSRMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetFSRMode");
		
		USettingsManager_GetFSRMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetDLSSMode
	 * 		Flags  -> ()
	 */
	int32_t USettingsManager::GetDLSSMode()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetDLSSMode");
		
		USettingsManager_GetDLSSMode_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetControllerType
	 * 		Flags  -> ()
	 */
	class FString USettingsManager::GetControllerType()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetControllerType");
		
		USettingsManager_GetControllerType_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetControllerTransform
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRControllerType                                  Controller                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Left                                                       (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Right                                                      (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void USettingsManager::GetControllerTransform(EPRControllerType Controller, struct FTransform* Left, struct FTransform* Right)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetControllerTransform");
		
		USettingsManager_GetControllerTransform_Params params {};
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Left != nullptr)
			*Left = params.Left;
		if (Right != nullptr)
			*Right = params.Right;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetControllerShift
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRControllerType                                  Controller                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FVector USettingsManager::GetControllerShift(EPRControllerType Controller)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetControllerShift");
		
		USettingsManager_GetControllerShift_Params params {};
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetControllerRotation
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EPRControllerType                                  Controller                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FRotator USettingsManager::GetControllerRotation(EPRControllerType Controller)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetControllerRotation");
		
		USettingsManager_GetControllerRotation_Params params {};
		params.Controller = Controller;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetBrightnessAdjustment
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetBrightnessAdjustment()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetBrightnessAdjustment");
		
		USettingsManager_GetBrightnessAdjustment_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetArmLength
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetArmLength()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetArmLength");
		
		USettingsManager_GetArmLength_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SettingsManager.GetAimSmoothingIntensity
	 * 		Flags  -> ()
	 */
	float USettingsManager::GetAimSmoothingIntensity()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SettingsManager.GetAimSmoothingIntensity");
		
		USettingsManager_GetAimSmoothingIntensity_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction USettingsManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* USettingsManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.SettingsManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AShopBin.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AShopBin::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ShopBin");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AShopComputer.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AShopComputer::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ShopComputer");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ShopShowcase.SwitchToIndex
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Index                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void AShopShowcase::SwitchToIndex(int32_t Index)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ShopShowcase.SwitchToIndex");
		
		AShopShowcase_SwitchToIndex_Params params {};
		params.Index = Index;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ShopShowcase.SetUnlockedTypes
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FGameplayTag>                        GameplayTag                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void AShopShowcase::SetUnlockedTypes(TArray<struct FGameplayTag> GameplayTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ShopShowcase.SetUnlockedTypes");
		
		AShopShowcase_SetUnlockedTypes_Params params {};
		params.GameplayTag = GameplayTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ShopShowcase.GetSelectedIndex
	 * 		Flags  -> ()
	 */
	int32_t AShopShowcase::GetSelectedIndex()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ShopShowcase.GetSelectedIndex");
		
		AShopShowcase_GetSelectedIndex_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AShopShowcase.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AShopShowcase::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ShopShowcase");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ShopSlot.UpdateSlot
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USceneComponent*                             componentToReturnActorTo                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                GameplayTag                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      actorToAttach                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void AShopSlot::UpdateSlot(class USceneComponent* componentToReturnActorTo, const struct FGameplayTag& GameplayTag, class AActor* actorToAttach)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ShopSlot.UpdateSlot");
		
		AShopSlot_UpdateSlot_Params params {};
		params.componentToReturnActorTo = componentToReturnActorTo;
		params.GameplayTag = GameplayTag;
		params.actorToAttach = actorToAttach;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ShopSlot.SetLock
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bLock                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bAnnounce                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void AShopSlot::SetLock(bool bLock, bool bAnnounce)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ShopSlot.SetLock");
		
		AShopSlot_SetLock_Params params {};
		params.bLock = bLock;
		params.bAnnounce = bAnnounce;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ShopSlot.Clear
	 * 		Flags  -> ()
	 */
	void AShopSlot::Clear()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ShopSlot.Clear");
		
		AShopSlot_Clear_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction AShopSlot.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* AShopSlot::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ShopSlot");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UShutdownAutomation.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UShutdownAutomation::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ShutdownAutomation");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.ToString
	 * 		Flags  -> ()
	 */
	class FString USpawnerGameData::ToString()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.ToString");
		
		USpawnerGameData_ToString_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SpawnSavedItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SpawnSavedItems(const class FString& SpawnerId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SpawnSavedItems");
		
		USpawnerGameData_SpawnSavedItems_Params params {};
		params.SpawnerId = SpawnerId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SpawnSavedArtifacts
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SpawnSavedArtifacts(const class FString& SpawnerId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SpawnSavedArtifacts");
		
		USpawnerGameData_SpawnSavedArtifacts_Params params {};
		params.SpawnerId = SpawnerId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SpawnSavedAnomalies
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SpawnSavedAnomalies(const class FString& SpawnerId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SpawnSavedAnomalies");
		
		USpawnerGameData_SpawnSavedAnomalies_Params params {};
		params.SpawnerId = SpawnerId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SpawnLootSpawnerData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               HasData                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               NeedPlacement                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      spawned                                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SpawnLootSpawnerData(const class FString& InstanceId, bool* HasData, bool* NeedPlacement, TArray<class UInventoryItem*>* spawned)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SpawnLootSpawnerData");
		
		USpawnerGameData_SpawnLootSpawnerData_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (HasData != nullptr)
			*HasData = params.HasData;
		if (NeedPlacement != nullptr)
			*NeedPlacement = params.NeedPlacement;
		if (spawned != nullptr)
			*spawned = params.spawned;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveSpawnedLootData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Loot                                                       (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveSpawnedLootData(const class FString& InstanceId, TArray<class UInventoryItem*> Loot)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveSpawnedLootData");
		
		USpawnerGameData_SaveSpawnedLootData_Params params {};
		params.InstanceId = InstanceId;
		params.Loot = Loot;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveSpawnedItemData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveSpawnedItemData(const class FString& SpawnerId, class UInventoryItem* Item, const struct FTransform& Transform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveSpawnedItemData");
		
		USpawnerGameData_SaveSpawnedItemData_Params params {};
		params.SpawnerId = SpawnerId;
		params.Item = Item;
		params.Transform = Transform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveSpawnedArtifactData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                TypeID                                                     (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveSpawnedArtifactData(const class FString& SpawnerId, const class FString& InstanceId, const struct FGameplayTag& TypeID, const struct FTransform& Transform)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveSpawnedArtifactData");
		
		USpawnerGameData_SaveSpawnedArtifactData_Params params {};
		params.SpawnerId = SpawnerId;
		params.InstanceId = InstanceId;
		params.TypeID = TypeID;
		params.Transform = Transform;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveSpawnedAnomalyData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class APRAnomaly*                                  anomaly                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveSpawnedAnomalyData(const class FString& SpawnerId, class APRAnomaly* anomaly)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveSpawnedAnomalyData");
		
		USpawnerGameData_SaveSpawnedAnomalyData_Params params {};
		params.SpawnerId = SpawnerId;
		params.anomaly = anomaly;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveNpcData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FNPCGameData                                Data                                                       (ConstParm, Parm, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveNpcData(const class FString& SpawnerId, const struct FNPCGameData& Data)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveNpcData");
		
		USpawnerGameData_SaveNpcData_Params params {};
		params.SpawnerId = SpawnerId;
		params.Data = Data;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveGeneratorData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      generatorID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              HP                                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FTransform                                  Transform                                                  (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	 * 		float                                              Cooldown                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveGeneratorData(const class FString& generatorID, float HP, const struct FTransform& Transform, float Cooldown)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveGeneratorData");
		
		USpawnerGameData_SaveGeneratorData_Params params {};
		params.generatorID = generatorID;
		params.HP = HP;
		params.Transform = Transform;
		params.Cooldown = Cooldown;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveGeneratedLootData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Loot                                                       (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveGeneratedLootData(const class FString& InstanceId, TArray<class UInventoryItem*> Loot)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveGeneratedLootData");
		
		USpawnerGameData_SaveGeneratedLootData_Params params {};
		params.InstanceId = InstanceId;
		params.Loot = Loot;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveFurnitureSocketData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TMap<class FName, struct FTransform>               Data                                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		TArray<class FName>                                Broken                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveFurnitureSocketData(const class FString& InstanceId, TMap<class FName, struct FTransform> Data, TArray<class FName> Broken)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveFurnitureSocketData");
		
		USpawnerGameData_SaveFurnitureSocketData_Params params {};
		params.InstanceId = InstanceId;
		params.Data = Data;
		params.Broken = Broken;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveFurnitureEmptySocket
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FName                                        EmptySlotId                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveFurnitureEmptySocket(const class FString& InstanceId, const class FName& EmptySlotId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveFurnitureEmptySocket");
		
		USpawnerGameData_SaveFurnitureEmptySocket_Params params {};
		params.InstanceId = InstanceId;
		params.EmptySlotId = EmptySlotId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveEmptyLootData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveEmptyLootData(const class FString& InstanceId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveEmptyLootData");
		
		USpawnerGameData_SaveEmptyLootData_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveBodyType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            bodyType                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveBodyType(const class FString& SpawnerId, int32_t bodyType)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveBodyType");
		
		USpawnerGameData_SaveBodyType_Params params {};
		params.SpawnerId = SpawnerId;
		params.bodyType = bodyType;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.SaveAnomalyData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FAnomalyData                                Data                                                       (ConstParm, Parm, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::SaveAnomalyData(const class FString& SpawnerId, const struct FAnomalyData& Data)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.SaveAnomalyData");
		
		USpawnerGameData_SaveAnomalyData_Params params {};
		params.SpawnerId = SpawnerId;
		params.Data = Data;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.RemoveSpawnedItemData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UInventoryItem*                              Item                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::RemoveSpawnedItemData(class UInventoryItem* Item)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.RemoveSpawnedItemData");
		
		USpawnerGameData_RemoveSpawnedItemData_Params params {};
		params.Item = Item;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.RemoveNpcData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::RemoveNpcData(const class FString& SpawnerId, const class FString& InstanceId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.RemoveNpcData");
		
		USpawnerGameData_RemoveNpcData_Params params {};
		params.SpawnerId = SpawnerId;
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.RemoveFieldDataArtifact
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::RemoveFieldDataArtifact(const class FString& InstanceId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.RemoveFieldDataArtifact");
		
		USpawnerGameData_RemoveFieldDataArtifact_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.MakeFurnitureSlotData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class UInventoryItem*>                      Items                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	struct FSpawnSlotData USpawnerGameData::MakeFurnitureSlotData(TArray<class UInventoryItem*> Items)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.MakeFurnitureSlotData");
		
		USpawnerGameData_MakeFurnitureSlotData_Params params {};
		params.Items = Items;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.IsGeneratorSaved
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      generatorID                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool USpawnerGameData::IsGeneratorSaved(const class FString& generatorID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.IsGeneratorSaved");
		
		USpawnerGameData_IsGeneratorSaved_Params params {};
		params.generatorID = generatorID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.HasSpawner
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool USpawnerGameData::HasSpawner(const class FString& SpawnerId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.HasSpawner");
		
		USpawnerGameData_HasSpawner_Params params {};
		params.SpawnerId = SpawnerId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.HasLootSpawnerData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bHasData                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::HasLootSpawnerData(const class FString& InstanceId, bool* bHasData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.HasLootSpawnerData");
		
		USpawnerGameData_HasLootSpawnerData_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bHasData != nullptr)
			*bHasData = params.bHasData;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.GetRandomStream
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FRandomStream USpawnerGameData::GetRandomStream(const class FString& SpawnerId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.GetRandomStream");
		
		USpawnerGameData_GetRandomStream_Params params {};
		params.SpawnerId = SpawnerId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.GetNpcData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TMap<class FString, struct FNPCGameData>           DataMap                                                    (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::GetNpcData(const class FString& SpawnerId, TMap<class FString, struct FNPCGameData>* DataMap)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.GetNpcData");
		
		USpawnerGameData_GetNpcData_Params params {};
		params.SpawnerId = SpawnerId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (DataMap != nullptr)
			*DataMap = params.DataMap;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.GetLootSpawnerData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		TArray<class UInventoryItem*>                      Loot                                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		bool                                               bIsEmpty                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bHasData                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::GetLootSpawnerData(const class FString& InstanceId, TArray<class UInventoryItem*>* Loot, bool* bIsEmpty, bool* bHasData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.GetLootSpawnerData");
		
		USpawnerGameData_GetLootSpawnerData_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Loot != nullptr)
			*Loot = params.Loot;
		if (bIsEmpty != nullptr)
			*bIsEmpty = params.bIsEmpty;
		if (bHasData != nullptr)
			*bHasData = params.bHasData;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.GetFurnitureData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      InstanceId                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FFurnitureData                              Data                                                       (Parm, OutParm, NativeAccessSpecifierPublic)
	 * 		struct FNameArray                                  BrokenSlots                                                (Parm, OutParm, NativeAccessSpecifierPublic)
	 * 		struct FNameArray                                  EmptySlots                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
	 * 		bool                                               bHasData                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::GetFurnitureData(const class FString& InstanceId, struct FFurnitureData* Data, struct FNameArray* BrokenSlots, struct FNameArray* EmptySlots, bool* bHasData)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.GetFurnitureData");
		
		USpawnerGameData_GetFurnitureData_Params params {};
		params.InstanceId = InstanceId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Data != nullptr)
			*Data = params.Data;
		if (BrokenSlots != nullptr)
			*BrokenSlots = params.BrokenSlots;
		if (EmptySlots != nullptr)
			*EmptySlots = params.EmptySlots;
		if (bHasData != nullptr)
			*bHasData = params.bHasData;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.GetBodyType
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	int32_t USpawnerGameData::GetBodyType(const class FString& SpawnerId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.GetBodyType");
		
		USpawnerGameData_GetBodyType_Params params {};
		params.SpawnerId = SpawnerId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.GetAnomalyFieldData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FAnomalyFieldData                           Data                                                       (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void USpawnerGameData::GetAnomalyFieldData(const class FString& SpawnerId, struct FAnomalyFieldData* Data)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.GetAnomalyFieldData");
		
		USpawnerGameData_GetAnomalyFieldData_Params params {};
		params.SpawnerId = SpawnerId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Data != nullptr)
			*Data = params.Data;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGameData.GetAnomalyData
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      SpawnerId                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FAnomalyData USpawnerGameData::GetAnomalyData(const class FString& SpawnerId)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGameData.GetAnomalyData");
		
		USpawnerGameData_GetAnomalyData_Params params {};
		params.SpawnerId = SpawnerId;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction USpawnerGameData.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* USpawnerGameData::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.SpawnerGameData");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ASpawnerGeneratorAlternativePlace.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ASpawnerGeneratorAlternativePlace::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.SpawnerGeneratorAlternativePlace");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGenerator.StopGenerator
	 * 		Flags  -> ()
	 */
	void ASpawnerGenerator::StopGenerator()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGenerator.StopGenerator");
		
		ASpawnerGenerator_StopGenerator_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGenerator.Special
	 * 		Flags  -> ()
	 */
	bool ASpawnerGenerator::Special()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGenerator.Special");
		
		ASpawnerGenerator_Special_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGenerator.SaveGeneratorData
	 * 		Flags  -> ()
	 */
	void ASpawnerGenerator::SaveGeneratorData()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGenerator.SaveGeneratorData");
		
		ASpawnerGenerator_SaveGeneratorData_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGenerator.OnSpawnerReadyToCall
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AMonsterSpawner*                             Spawner                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ASpawnerGenerator::OnSpawnerReadyToCall(class AMonsterSpawner* Spawner)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGenerator.OnSpawnerReadyToCall");
		
		ASpawnerGenerator_OnSpawnerReadyToCall_Params params {};
		params.Spawner = Spawner;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnerGenerator.CallSpawner
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AMonsterSpawner*                             Spawner                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class AActor*                                      NPCActor                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void ASpawnerGenerator::CallSpawner(class AMonsterSpawner* Spawner, bool* bSuccess, class AActor** NPCActor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnerGenerator.CallSpawner");
		
		ASpawnerGenerator_CallSpawner_Params params {};
		params.Spawner = Spawner;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (NPCActor != nullptr)
			*NPCActor = params.NPCActor;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ASpawnerGenerator.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ASpawnerGenerator::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.SpawnerGenerator");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SpawnSlotComponent.MarkSocketMatch
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<class FName>                                SocketNames                                                (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 * 		struct FColor                                      Color                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USpawnSlotComponent::MarkSocketMatch(TArray<class FName> SocketNames, const struct FColor& Color)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SpawnSlotComponent.MarkSocketMatch");
		
		USpawnSlotComponent_MarkSocketMatch_Params params {};
		params.SocketNames = SocketNames;
		params.Color = Color;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction USpawnSlotComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* USpawnSlotComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.SpawnSlotComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StorageDoorComponent.SetLock
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               lock                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UStorageDoorComponent::SetLock(bool lock)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StorageDoorComponent.SetLock");
		
		UStorageDoorComponent_SetLock_Params params {};
		params.lock = lock;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StorageDoorComponent.Open
	 * 		Flags  -> ()
	 */
	void UStorageDoorComponent::Open()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StorageDoorComponent.Open");
		
		UStorageDoorComponent_Open_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StorageDoorComponent.OnTick
	 * 		Flags  -> ()
	 */
	void UStorageDoorComponent::OnTick()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StorageDoorComponent.OnTick");
		
		UStorageDoorComponent_OnTick_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StorageDoorComponent.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UStorageDoorComponent::OnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StorageDoorComponent.OnLevelStarted");
		
		UStorageDoorComponent_OnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StorageDoorComponent.OnGameStarted
	 * 		Flags  -> ()
	 */
	void UStorageDoorComponent::OnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StorageDoorComponent.OnGameStarted");
		
		UStorageDoorComponent_OnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StorageDoorComponent.IsOpened
	 * 		Flags  -> ()
	 */
	bool UStorageDoorComponent::IsOpened()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StorageDoorComponent.IsOpened");
		
		UStorageDoorComponent_IsOpened_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StorageDoorComponent.IsClosed
	 * 		Flags  -> ()
	 */
	bool UStorageDoorComponent::IsClosed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StorageDoorComponent.IsClosed");
		
		UStorageDoorComponent_IsClosed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StorageDoorComponent.GetCurrentState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EStorageDoorState                                  CurrentState                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UStorageDoorComponent::GetCurrentState(EStorageDoorState* CurrentState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StorageDoorComponent.GetCurrentState");
		
		UStorageDoorComponent_GetCurrentState_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (CurrentState != nullptr)
			*CurrentState = params.CurrentState;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StorageDoorComponent.Close
	 * 		Flags  -> ()
	 */
	void UStorageDoorComponent::Close()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StorageDoorComponent.Close");
		
		UStorageDoorComponent_Close_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UStorageDoorComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UStorageDoorComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.StorageDoorComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.ParseRecordsTags
	 * 		Flags  -> ()
	 * Parameters:
	 * 		TArray<struct FGameplayTag>                        ItemAdditionalTags                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	 */
	TArray<struct FGameplayTag> UStoryConfig::ParseRecordsTags(TArray<struct FGameplayTag> ItemAdditionalTags)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.ParseRecordsTags");
		
		UStoryConfig_ParseRecordsTags_Params params {};
		params.ItemAdditionalTags = ItemAdditionalTags;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.IsJournalNote
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                NoteID                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UStoryConfig::IsJournalNote(const struct FGameplayTag& NoteID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.IsJournalNote");
		
		UStoryConfig_IsJournalNote_Params params {};
		params.NoteID = NoteID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.HasNote
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                NoteID                                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UStoryConfig::HasNote(const struct FGameplayTag& NoteID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.HasNote");
		
		UStoryConfig_HasNote_Params params {};
		params.NoteID = NoteID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.HasMissionTip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TipID                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UStoryConfig::HasMissionTip(const struct FGameplayTag& TipID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.HasMissionTip");
		
		UStoryConfig_HasMissionTip_Params params {};
		params.TipID = TipID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.GetSubtitleForTime
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FRecord                                     Record                                                     (Parm, NativeAccessSpecifierPublic)
	 * 		float                                              TimeSeconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FRecordSubtitle UStoryConfig::GetSubtitleForTime(const struct FRecord& Record, float TimeSeconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.GetSubtitleForTime");
		
		UStoryConfig_GetSubtitleForTime_Params params {};
		params.Record = Record;
		params.TimeSeconds = TimeSeconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.GetStoryConfig
	 * 		Flags  -> ()
	 */
	class UStoryConfig* UStoryConfig::GetStoryConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.GetStoryConfig");
		
		UStoryConfig_GetStoryConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.GetRandomCassette
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bMissingOnly                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FGameplayTag                                CassetteTag                                                (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FDialogue                                   CassetteDialogue                                           (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	void UStoryConfig::GetRandomCassette(bool bMissingOnly, bool* bSuccess, struct FGameplayTag* CassetteTag, struct FDialogue* CassetteDialogue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.GetRandomCassette");
		
		UStoryConfig_GetRandomCassette_Params params {};
		params.bMissingOnly = bMissingOnly;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (CassetteTag != nullptr)
			*CassetteTag = params.CassetteTag;
		if (CassetteDialogue != nullptr)
			*CassetteDialogue = params.CassetteDialogue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.GetPaperNote
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                NoteID                                                     (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FPaperNote                                  Note                                                       (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void UStoryConfig::GetPaperNote(const struct FGameplayTag& NoteID, bool* bSuccess, struct FPaperNote* Note)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.GetPaperNote");
		
		UStoryConfig_GetPaperNote_Params params {};
		params.NoteID = NoteID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (Note != nullptr)
			*Note = params.Note;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.GetNPCJournalNote
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                NpcID                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	struct FGameplayTag UStoryConfig::GetNPCJournalNote(const struct FGameplayTag& NpcID)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.GetNPCJournalNote");
		
		UStoryConfig_GetNPCJournalNote_Params params {};
		params.NpcID = NpcID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.GetMissionTip
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                TipID                                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FRecord                                     Record                                                     (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void UStoryConfig::GetMissionTip(const struct FGameplayTag& TipID, bool* bSuccess, struct FRecord* Record)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.GetMissionTip");
		
		UStoryConfig_GetMissionTip_Params params {};
		params.TipID = TipID;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (Record != nullptr)
			*Record = params.Record;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.GetKatyaMonologue
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                Tag                                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FDialogue                                   Monologue                                                  (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	void UStoryConfig::GetKatyaMonologue(const struct FGameplayTag& Tag, bool* bSuccess, struct FDialogue* Monologue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.GetKatyaMonologue");
		
		UStoryConfig_GetKatyaMonologue_Params params {};
		params.Tag = Tag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (Monologue != nullptr)
			*Monologue = params.Monologue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.StoryConfig.GetCassette
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                CassetteTag                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSuccess                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FDialogue                                   CassetteDialogue                                           (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	 */
	void UStoryConfig::GetCassette(const struct FGameplayTag& CassetteTag, bool* bSuccess, struct FDialogue* CassetteDialogue)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.StoryConfig.GetCassette");
		
		UStoryConfig_GetCassette_Params params {};
		params.CassetteTag = CassetteTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (bSuccess != nullptr)
			*bSuccess = params.bSuccess;
		if (CassetteDialogue != nullptr)
			*CassetteDialogue = params.CassetteDialogue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UStoryConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UStoryConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.StoryConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction ASubtitlesController.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* ASubtitlesController::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.SubtitlesController");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SubtitlesControllerInterface.ShowSubtitlesString
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Text                                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		float                                              Duration                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRSubtitleType                                    Type                                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSwitchable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USubtitlesControllerInterface::ShowSubtitlesString(const class FString& Text, float Duration, EPRSubtitleType Type, bool bSwitchable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SubtitlesControllerInterface.ShowSubtitlesString");
		
		USubtitlesControllerInterface_ShowSubtitlesString_Params params {};
		params.Text = Text;
		params.Duration = Duration;
		params.Type = Type;
		params.bSwitchable = bSwitchable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SubtitlesControllerInterface.ShowSubtitles
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FText                                        Text                                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 * 		float                                              Duration                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		EPRSubtitleType                                    Type                                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		bool                                               bSwitchable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USubtitlesControllerInterface::ShowSubtitles(const class FText& Text, float Duration, EPRSubtitleType Type, bool bSwitchable)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SubtitlesControllerInterface.ShowSubtitles");
		
		USubtitlesControllerInterface_ShowSubtitles_Params params {};
		params.Text = Text;
		params.Duration = Duration;
		params.Type = Type;
		params.bSwitchable = bSwitchable;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SubtitlesControllerInterface.ShowSaveIcon
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bAutoSave                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USubtitlesControllerInterface::ShowSaveIcon(bool bAutoSave)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SubtitlesControllerInterface.ShowSaveIcon");
		
		USubtitlesControllerInterface_ShowSaveIcon_Params params {};
		params.bAutoSave = bAutoSave;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SubtitlesControllerInterface.SetDressingMode
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Active                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void USubtitlesControllerInterface::SetDressingMode(bool Active)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SubtitlesControllerInterface.SetDressingMode");
		
		USubtitlesControllerInterface_SetDressingMode_Params params {};
		params.Active = Active;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SubtitlesControllerInterface.HideSubtitles
	 * 		Flags  -> ()
	 */
	void USubtitlesControllerInterface::HideSubtitles()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SubtitlesControllerInterface.HideSubtitles");
		
		USubtitlesControllerInterface_HideSubtitles_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction USubtitlesControllerInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* USubtitlesControllerInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.SubtitlesControllerInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SystemConfig.GetSystemConfig
	 * 		Flags  -> ()
	 */
	class USystemConfig* USystemConfig::GetSystemConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SystemConfig.GetSystemConfig");
		
		USystemConfig_GetSystemConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SystemConfig.GetLevelName
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FText                                        Placeholder                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	 */
	class FText USystemConfig::GetLevelName(const struct FGameplayTag& LevelTag, const class FText& Placeholder)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SystemConfig.GetLevelName");
		
		USystemConfig_GetLevelName_Params params {};
		params.LevelTag = LevelTag;
		params.Placeholder = Placeholder;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SystemConfig.GetLevelConfig
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		struct FLevelConfig                                Config                                                     (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void USystemConfig::GetLevelConfig(const struct FGameplayTag& LevelTag, struct FLevelConfig* Config)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SystemConfig.GetLevelConfig");
		
		USystemConfig_GetLevelConfig_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Config != nullptr)
			*Config = params.Config;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.SystemConfig.GetCurrentLevelConfig
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FLevelConfig                                Config                                                     (Parm, OutParm, NativeAccessSpecifierPublic)
	 */
	void USystemConfig::GetCurrentLevelConfig(struct FLevelConfig* Config)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.SystemConfig.GetCurrentLevelConfig");
		
		USystemConfig_GetCurrentLevelConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Config != nullptr)
			*Config = params.Config;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction USystemConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* USystemConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.SystemConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.ReadyMarkInterface.ReadyTrigger
	 * 		Flags  -> ()
	 */
	bool UReadyMarkInterface::ReadyTrigger()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.ReadyMarkInterface.ReadyTrigger");
		
		UReadyMarkInterface_ReadyTrigger_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UReadyMarkInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UReadyMarkInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.ReadyMarkInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameStarterInterface.GameStarted
	 * 		Flags  -> ()
	 */
	bool UGameStarterInterface::GameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameStarterInterface.GameStarted");
		
		UGameStarterInterface_GameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameStarterInterface.GameShuttingDown
	 * 		Flags  -> ()
	 */
	bool UGameStarterInterface::GameShuttingDown()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameStarterInterface.GameShuttingDown");
		
		UGameStarterInterface_GameShuttingDown_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.GameStarterInterface.CheckGameStart
	 * 		Flags  -> ()
	 */
	void UGameStarterInterface::CheckGameStart()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.GameStarterInterface.CheckGameStart");
		
		UGameStarterInterface_CheckGameStart_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UGameStarterInterface.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UGameStarterInterface::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.GameStarterInterface");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IClearable.Clear
	 * 		Flags  -> ()
	 */
	void UIClearable::Clear()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IClearable.Clear");
		
		UIClearable_Clear_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIClearable.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIClearable::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IClearable");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIAsset.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIAsset::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IAsset");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.IPreparable.Prepare
	 * 		Flags  -> ()
	 */
	void UIPreparable::Prepare()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.IPreparable.Prepare");
		
		UIPreparable_Prepare_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UIPreparable.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UIPreparable::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.IPreparable");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TagsConfig.GetTagsConfig
	 * 		Flags  -> ()
	 */
	class UTagsConfig* UTagsConfig::GetTagsConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TagsConfig.GetTagsConfig");
		
		UTagsConfig_GetTagsConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UTagsConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UTagsConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.TagsConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TeleportAutomation.LevelReadyCallback
	 * 		Flags  -> ()
	 */
	void UTeleportAutomation::LevelReadyCallback()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TeleportAutomation.LevelReadyCallback");
		
		UTeleportAutomation_LevelReadyCallback_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UTeleportAutomation.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UTeleportAutomation::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.TeleportAutomation");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.SetDateTime
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FDateTime                                   NewDateTime                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	bool UTimeManager::SetDateTime(const struct FDateTime& NewDateTime)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.SetDateTime");
		
		UTimeManager_SetDateTime_Params params {};
		params.NewDateTime = NewDateTime;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.IsNight
	 * 		Flags  -> ()
	 */
	bool UTimeManager::IsNight()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.IsNight");
		
		UTimeManager_IsNight_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.IsDay
	 * 		Flags  -> ()
	 */
	bool UTimeManager::IsDay()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.IsDay");
		
		UTimeManager_IsDay_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.GetTimeManager
	 * 		Flags  -> ()
	 */
	class UTimeManager* UTimeManager::GetTimeManager()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.GetTimeManager");
		
		UTimeManager_GetTimeManager_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.GetTime
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            Hour                                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		int32_t                                            Minute                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UTimeManager::GetTime(int32_t* Hour, int32_t* Minute)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.GetTime");
		
		UTimeManager_GetTime_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Hour != nullptr)
			*Hour = params.Hour;
		if (Minute != nullptr)
			*Minute = params.Minute;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.GetSecondsTill
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Hour                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	float UTimeManager::GetSecondsTill(float Hour)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.GetSecondsTill");
		
		UTimeManager_GetSecondsTill_Params params {};
		params.Hour = Hour;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.GetSecondsPassed
	 * 		Flags  -> ()
	 */
	float UTimeManager::GetSecondsPassed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.GetSecondsPassed");
		
		UTimeManager_GetSecondsPassed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.GetHoursPassed
	 * 		Flags  -> ()
	 */
	float UTimeManager::GetHoursPassed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.GetHoursPassed");
		
		UTimeManager_GetHoursPassed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.GetHour
	 * 		Flags  -> ()
	 */
	float UTimeManager::GetHour()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.GetHour");
		
		UTimeManager_GetHour_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.GetDateTimeStrings
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class FString                                      Date                                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      DayOfWeek                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Hour                                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Minute                                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class FString                                      Second                                                     (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UTimeManager::GetDateTimeStrings(class FString* Date, class FString* DayOfWeek, class FString* Hour, class FString* Minute, class FString* Second)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.GetDateTimeStrings");
		
		UTimeManager_GetDateTimeStrings_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Date != nullptr)
			*Date = params.Date;
		if (DayOfWeek != nullptr)
			*DayOfWeek = params.DayOfWeek;
		if (Hour != nullptr)
			*Hour = params.Hour;
		if (Minute != nullptr)
			*Minute = params.Minute;
		if (Second != nullptr)
			*Second = params.Second;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.GetDateTime
	 * 		Flags  -> ()
	 */
	struct FDateTime UTimeManager::GetDateTime()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.GetDateTime");
		
		UTimeManager_GetDateTime_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.DebugSetHour
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Hour                                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UTimeManager::DebugSetHour(float Hour)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.DebugSetHour");
		
		UTimeManager_DebugSetHour_Params params {};
		params.Hour = Hour;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.AddTimeTill
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Hour                                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UTimeManager::AddTimeTill(float Hour)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.AddTimeTill");
		
		UTimeManager_AddTimeTill_Params params {};
		params.Hour = Hour;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.AddSeconds
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Seconds                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UTimeManager::AddSeconds(float Seconds)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.AddSeconds");
		
		UTimeManager_AddSeconds_Params params {};
		params.Seconds = Seconds;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.TimeManager.AddHours
	 * 		Flags  -> ()
	 * Parameters:
	 * 		float                                              Hours                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UTimeManager::AddHours(float Hours)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.TimeManager.AddHours");
		
		UTimeManager_AddHours_Params params {};
		params.Hours = Hours;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UTimeManager.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UTimeManager::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.TimeManager");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.VfxConfig.GetVfxConfig
	 * 		Flags  -> ()
	 */
	class UVfxConfig* UVfxConfig::GetVfxConfig()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.VfxConfig.GetVfxConfig");
		
		UVfxConfig_GetVfxConfig_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UVfxConfig.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UVfxConfig::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.VfxConfig");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.VRControllerComponent.UpdateControllerMesh
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class USceneComponent*                             Parent                                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UVRControllerComponent::UpdateControllerMesh(class USceneComponent* Parent)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.VRControllerComponent.UpdateControllerMesh");
		
		UVRControllerComponent_UpdateControllerMesh_Params params {};
		params.Parent = Parent;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.VRControllerComponent.SetMeshVisibility
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Visible                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UVRControllerComponent::SetMeshVisibility(bool Visible)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.VRControllerComponent.SetMeshVisibility");
		
		UVRControllerComponent_SetMeshVisibility_Params params {};
		params.Visible = Visible;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.VRControllerComponent.IsMeshVisibile
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               Visible                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UVRControllerComponent::IsMeshVisibile(bool* Visible)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.VRControllerComponent.IsMeshVisibile");
		
		UVRControllerComponent_IsMeshVisibile_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Visible != nullptr)
			*Visible = params.Visible;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.VRControllerComponent.GetMaterial
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UMaterialInstanceDynamic*                    Material                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UVRControllerComponent::GetMaterial(class UMaterialInstanceDynamic** Material)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.VRControllerComponent.GetMaterial");
		
		UVRControllerComponent_GetMaterial_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (Material != nullptr)
			*Material = params.Material;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UVRControllerComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UVRControllerComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.VRControllerComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WeaponBoltComponent.OnTick
	 * 		Flags  -> ()
	 */
	void UWeaponBoltComponent::OnTick()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WeaponBoltComponent.OnTick");
		
		UWeaponBoltComponent_OnTick_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WeaponBoltComponent.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UWeaponBoltComponent::OnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WeaponBoltComponent.OnLevelStarted");
		
		UWeaponBoltComponent_OnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WeaponBoltComponent.OnGameStarted
	 * 		Flags  -> ()
	 */
	void UWeaponBoltComponent::OnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WeaponBoltComponent.OnGameStarted");
		
		UWeaponBoltComponent_OnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WeaponBoltComponent.IsOpened
	 * 		Flags  -> ()
	 */
	bool UWeaponBoltComponent::IsOpened()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WeaponBoltComponent.IsOpened");
		
		UWeaponBoltComponent_IsOpened_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WeaponBoltComponent.IsClosed
	 * 		Flags  -> ()
	 */
	bool UWeaponBoltComponent::IsClosed()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WeaponBoltComponent.IsClosed");
		
		UWeaponBoltComponent_IsClosed_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WeaponBoltComponent.GetCurrentState
	 * 		Flags  -> ()
	 * Parameters:
	 * 		EWeaponBoltState                                   CurrentState                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UWeaponBoltComponent::GetCurrentState(EWeaponBoltState* CurrentState)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WeaponBoltComponent.GetCurrentState");
		
		UWeaponBoltComponent_GetCurrentState_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		if (CurrentState != nullptr)
			*CurrentState = params.CurrentState;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WeaponBoltComponent.Drop
	 * 		Flags  -> ()
	 */
	void UWeaponBoltComponent::Drop()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WeaponBoltComponent.Drop");
		
		UWeaponBoltComponent_Drop_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UWeaponBoltComponent.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UWeaponBoltComponent::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.WeaponBoltComponent");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WElement_ShowcaseCategory.ShowNewItemExclamationMark
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bShow                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UWElement_ShowcaseCategory::ShowNewItemExclamationMark(bool bShow)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WElement_ShowcaseCategory.ShowNewItemExclamationMark");
		
		UWElement_ShowcaseCategory_ShowNewItemExclamationMark_Params params {};
		params.bShow = bShow;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UWElement_ShowcaseCategory.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UWElement_ShowcaseCategory::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.WElement_ShowcaseCategory");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WPage.UpdateFooterTexts
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class UTextBlock*                                  textPlayerLevel                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UTextBlock*                                  textMoney                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 * 		class UTextBlock*                                  textTime                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UWPage::UpdateFooterTexts(class UTextBlock* textPlayerLevel, class UTextBlock* textMoney, class UTextBlock* textTime)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WPage.UpdateFooterTexts");
		
		UWPage_UpdateFooterTexts_Params params {};
		params.textPlayerLevel = textPlayerLevel;
		params.textMoney = textMoney;
		params.textTime = textTime;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UWPage.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UWPage::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.WPage");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WMCPage_ShowcaseCategories.UpdateSelection
	 * 		Flags  -> ()
	 * Parameters:
	 * 		int32_t                                            selectedIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UWMCPage_ShowcaseCategories::UpdateSelection(int32_t selectedIndex)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WMCPage_ShowcaseCategories.UpdateSelection");
		
		UWMCPage_ShowcaseCategories_UpdateSelection_Params params {};
		params.selectedIndex = selectedIndex;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WMCPage_ShowcaseCategories.CheckForHasNewItems
	 * 		Flags  -> ()
	 */
	void UWMCPage_ShowcaseCategories::CheckForHasNewItems()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WMCPage_ShowcaseCategories.CheckForHasNewItems");
		
		UWMCPage_ShowcaseCategories_CheckForHasNewItems_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UWMCPage_ShowcaseCategories.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UWMCPage_ShowcaseCategories::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.WMCPage_ShowcaseCategories");
		return ptr;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WShopComputer.UpdateNewItems
	 * 		Flags  -> ()
	 */
	void UWShopComputer::UpdateNewItems()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WShopComputer.UpdateNewItems");
		
		UWShopComputer_UpdateNewItems_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WShopComputer.ShowTakeItems
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bShow                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UWShopComputer::ShowTakeItems(bool bShow)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WShopComputer.ShowTakeItems");
		
		UWShopComputer_ShowTakeItems_Params params {};
		params.bShow = bShow;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WShopComputer.ShowShopBin
	 * 		Flags  -> ()
	 * Parameters:
	 * 		bool                                               bShow                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UWShopComputer::ShowShopBin(bool bShow)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WShopComputer.ShowShopBin");
		
		UWShopComputer_ShowShopBin_Params params {};
		params.bShow = bShow;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WShopComputer.OnSCTick
	 * 		Flags  -> ()
	 */
	void UWShopComputer::OnSCTick()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WShopComputer.OnSCTick");
		
		UWShopComputer_OnSCTick_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WShopComputer.OnLevelStarted
	 * 		Flags  -> ()
	 * Parameters:
	 * 		struct FGameplayTag                                LevelTag                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UWShopComputer::OnLevelStarted(const struct FGameplayTag& LevelTag)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WShopComputer.OnLevelStarted");
		
		UWShopComputer_OnLevelStarted_Params params {};
		params.LevelTag = LevelTag;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WShopComputer.OnGameStarted
	 * 		Flags  -> ()
	 */
	void UWShopComputer::OnGameStarted()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WShopComputer.OnGameStarted");
		
		UWShopComputer_OnGameStarted_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WShopComputer.IsShopBinVisible
	 * 		Flags  -> ()
	 */
	bool UWShopComputer::IsShopBinVisible()
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WShopComputer.IsShopBinVisible");
		
		UWShopComputer_IsShopBinVisible_Params params {};
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
		
		return params.ReturnValue;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> Function IntoTheRadius.WShopComputer.InitializeByActor
	 * 		Flags  -> ()
	 * Parameters:
	 * 		class AActor*                                      Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	 */
	void UWShopComputer::InitializeByActor(class AActor* Actor)
	{
		static UFunction* fn = UObject::FindObject<UFunction>("Function IntoTheRadius.WShopComputer.InitializeByActor");
		
		UWShopComputer_InitializeByActor_Params params {};
		params.Actor = Actor;
		
		auto flags = fn->FunctionFlags;
		UObject::ProcessEvent(fn, &params);
		fn->FunctionFlags = flags;
	}

	/**
	 * Function:
	 * 		RVA    -> 0x00000000
	 * 		Name   -> PredefinedFunction UWShopComputer.StaticClass
	 * 		Flags  -> (Predefined, Static)
	 */
	UClass* UWShopComputer::StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class IntoTheRadius.WShopComputer");
		return ptr;
	}

}


